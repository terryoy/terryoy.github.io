<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Hello, World!</title>
    <link href="http://terryoy.github.io/feed.xml" rel="self" />
    <link href="http://terryoy.github.io/" />
    <updated>2016-06-21T17:53:51+08:00</updated>
    <id>http://terryoy.github.io/</id>
    <entry>
        <title type="html"><![CDATA[A Short Reference of Python Logging]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/05/short-ref-python-logging.html"/>
        <published>2016-05-26T19:55:00+08:00</published>
        <updated>2016-06-08T00:42:26+08:00</updated>
        <id>http://terryoy.github.io/2016/05/short-ref-python-logging.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>I have for many times use the logging function, but never understand it completely. So I go through the document and make some notes, hoping it will help me use it more quickly in the future. </p>

<h3 id="toc_0">1. Basic Config</h3>
<p>If you want to use a programmable method other than a configuration file, the basicConfig() method is the general initializing method.</p>
<p>The most basic form is default log, which you don&#39;t need basicConfig(). It is using console output with WARNING level.</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">logging</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">logging</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&#39;hello&#39;</span><span class="p">)</span> <span class="c"># no output</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">logging</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s">&#39;world&#39;</span><span class="p">)</span>
<span class="n">world</span>
</pre></div>
<p>The basic config contains a list of below elements:</p>

<ul>
<li>  filename    - Using a <em>FileHandler</em> to output the log</li>
<li>  filemode    - file open mode(&#39;r&#39;, &#39;w&#39;, &#39;a&#39;), mainly used to choose append or write a new log file</li>
<li>  format      - A string for specifying the log output template, If you want to lookup a list of supported keywords, look for section &#39;LogRecord attributes&#39; in the python official document</li>
<li>  datefmt     - A specified date/time format.</li>
<li>  level       - set the <em>root</em> loglevel for the logger</li>
<li>  stream      - Specify a stream for the StreamHandler, for example, a buffer output stream or stdout. It will be ignored if &ldquo;filename&rdquo; is present.</li>
</ul>
<p>The logger can be initialized only once when basicConfig() is called. Then </p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">logging</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="s">&#39;program.log&#39;</span><span class="p">,</span> 
        <span class="n">filemode</span><span class="o">=</span><span class="s">&#39;a&#39;</span><span class="p">,</span>
        <span class="n">format</span><span class="o">=</span><span class="s">&quot;</span><span class="si">%(asctime)-15s</span><span class="s"> </span><span class="si">%(levelname)s</span><span class="s"> [</span><span class="si">%(module)s</span><span class="s">] </span><span class="si">%(message)s</span><span class="s">&quot;</span><span class="p">,</span>
        <span class="n">datefmt</span><span class="o">=</span><span class="s">&quot;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S.</span><span class="si">%f</span><span class="s">&quot;</span><span class="p">,</span>
        <span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">)</span>
</pre></div>

<h3 id="toc_1">2. Configuration Object and the Modular Approach</h3>
<p>When choosing the Modular Approach of logging, you need to deal with 4 elements:</p>

<ul>
<li>  loggers     - the interface that application modules used to log things</li>
<li>  handlers    - send the log records (that loggers created) to the appropriate destinations</li>
<li>  filters     - provide a finer grained facility for determining which log records should be output</li>
<li>  formatters  - specify the layout of the log records in the final output</li>
</ul>

<h4 id="toc_2">2.1 Logger hierarchy</h4>
<p>The loggers used by all the modules are formed in a conceptual hierarchy by the naming with a separator(&#39;.&#39;). For example: &#39;abc.text&#39;, is the descendant of logger &#39;abc&#39;, while &#39;abc&#39; can be the parent of &#39;abc.text&#39;, &#39;abc.pdf&#39;, &#39;abc.image&#39;, etc. A good convention is to use loggers in a module sense, using in each <code>.py</code> as below:</p>
<div class="highlight"><pre><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</pre></div>
<p>The root of all loggers is called the &ldquo;root&rdquo; logger, which prints the logger name as &ldquo;ROOT&rdquo; in output.
</p>

<h4 id="toc_3">2.2 Useful handlers</h4>
<p>There are some useful handlers in the section of python <em>Logging Howto</em> document. Some of them are listed as here:</p>

<ul>
<li>  StreamHandler   - to stream object (default stdin?)</li>
<li>  FileHandler     - to a disk file</li>
<li>  <strong>RotatingFileHandler</strong>         - from <em>BaseRotatingHandler</em>, send logs to files, rotating log file with a maximum file size.</li>
<li>  <strong>TimedRotatingFileHandler</strong>    - from <em>BaseRotatingHandler</em>, send logs to files, rotating log file at a certain timed intervals.</li>
<li>  SocketHandler/DatagramHandler   - send log messages to TCP/IP and UDP sockets</li>
<li>  SMTPHandler     - Send to a designated email address</li>
<li>  NullHandler     - Do nothing, it&#39;s used in development that supports logging with this mock</li>
</ul>
<p>This shows the variety of logging output scenarios, which you could look them up in the python doc.</p>

<h4 id="toc_4">2.3 The propagation of loggers</h4>
<p>Look at the flow of logging in the below diagram from <a href="https://docs.python.org/2/howto/logging.html#logging-advanced-tutorial">python&#39;s tutorial</a>,</p>
<p><img src="https://docs.python.org/2/_images/logging_flow.png" alt="logging flow"/></p>
<p>When a log record is send to the logger in the module, it will first check if its own filter(the filter of a logger) reject it, then pass to its handler; if propagation is set to true(by default), it will pass the log record to it&#39;s parent too, so the log record will bubble up till the root logger, and each logger will judge by their handler and filter to decide whether to output the log record. So we often setup a top level logger, and then configure a child logger only if needed.</p>

<h4 id="toc_5">2.4 Configuring Logging</h4>
<p>The most usual approaches are using <code>fileConfig()</code> and <code>dictConfig()</code>. With fileConfig() you can use a <strong>.conf</strong> file to load the settings, and with dictConfig() you can use even wider range of persistence choices, such as JSON, python file, yaml, etc.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Put Linux into Old PC - (2) Desktop Environment]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/05/put-linux-into-old-pc-2-desktop.html"/>
        <published>2016-05-18T09:47:00+08:00</published>
        <updated>2016-05-18T12:36:01+08:00</updated>
        <id>http://terryoy.github.io/2016/05/put-linux-into-old-pc-2-desktop.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#study" term="study" label="study" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">Part 2. Setup a minimal desktop environment</h3>

<h4 id="toc_1">2.1 Xorg and Openbox</h4>
<p>To use a desktop environment, <strong>Xorg</strong> is the package you won&#39;t miss(for more information you can also check the <a href="htts://www.x.org/">x.org</a> and <a href="https://www.freedesktop.org/">freedesktop.org</a> web-sites. I choose <strong>Openbox</strong> as the window manager, which is one of the most lightweight window manager. It is the best showcase of minimalism, yet the functions shall be simple enough for customization. The window manager is not a desktop environment, it is just simply a manager to windows, their styles and behaviors. A complete desktop environment is not necessary, or maybe it&#39;s the chance that I could design my own.</p>
<div class="highlight"><pre><span class="nv">$ </span>sudo apt-get install xorg
<span class="c"># now you can enter the GUI environment by command &quot;startx&quot;, but you still need a window manager to do further things</span>
<span class="nv">$ </span>sudo apt-get install openbox obconf openbox-themes
<span class="c"># the above packages and their dependencies will allow you to build and configure an Openbox system, along with choices of themes.</span>
</pre></div>
<p>What&#39;s interesting about &ldquo;startx&rdquo; is that, if you try it after you install xorg and before any Window Manager, you&#39;ll get a graphical shell environment with mouse available. The font is definitly different from what you had in the normal console. It is I think the essential GUI environment possible. And if you press Ctrl+D to exit the session, you get back to your original console environment, so the <strong>xorg-session</strong> is exited.</p>
<p>After installing the openbox package, it&#39;s not yet completed. You also need to add the a <code>~/.xinitrc</code> configuration so that it calls the openbox when you execute &ldquo;startx&rdquo;.</p>
<div class="highlight"><pre><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;exec openbox-session&quot;</span> &gt; ~/.xinitrc
<span class="nv">$ </span>startx
</pre></div>
<p>Now you can see GUI environment by Openbox. Right click on the desktop and you get a start menu, you can start a terminal emulator or configure the openbox using <em>Obconf</em>.</p>
<p>Next we try to do more about the customization.</p>

<h4 id="toc_2">2.2 Openbox Configuration (menu.xml and rc.xml)</h4>
<p>Openbox has two main configuration files:</p>

<pre><code>* rc.xml, which sets keybindings, desktop names and window behavior
* menu.xml, which contains the instructions for the right-click menu.</code></pre>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Put Linux into Old PC - (1) Installation and Hardware]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/05/put-linux-into-old-pc-1-hardware.html"/>
        <published>2016-05-15T21:04:00+08:00</published>
        <updated>2016-05-18T12:46:17+08:00</updated>
        <id>http://terryoy.github.io/2016/05/put-linux-into-old-pc-1-hardware.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#study" term="study" label="study" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">0. How this series begin?</h3>
<p>I bought from Taobao a used Japanese IBM G40 PC, which has Pentium 4 (2.5GHz) processor, 512MB RAM and a 140GB hard disk (I believe the hardware spec has been changed by the used PC seller). Since the power consumption and the speed are not suitable for very modern applications, I decided to use it as an experiment machine for creating a minimal linux workspace. This series of blog posts will be the progress showing how I work on this machine to make it very friendly and efficient for daily used.</p>

<h3 id="toc_1">Part 1. System Setup</h3>
<p>I started to boot with the Ubuntu 16.04 LTS server image(flashed on a USB stick), the booting is a bit strange than previous versions, it shows a &ldquo;boot:&rdquo; prompt which need you to tells what to boot, but it&#39;s not difficult to find out how to boot into the installation mode.</p>
<p>The reason using Ubuntu latest version is because I want to keep up with the development of the software packages, Debian is in a very stable status, while the Ubuntu packages are active enough to try out new things. I format the whole disk and install Ubuntu on it. This is the starting point.</p>

<h4 id="toc_2">1.1 Problem 1: hibernation on lid close</h4>
<p>I&#39;m so exciting at the moment when I finish all the installation and reboot, because I finally get this project started! But the first problem come very quickly - <strong>when I try to lower the lid, the screen just go dark, and when I reopen it, the going hibernate process sticks in every few seconds</strong>. I think there is some problem with the led sensor, because it automatically goes into hibernate a few seconds later when I activate again. So I think it is related to the power options in system settings.</p>
<p>This problem leads me to know about the <strong>&ldquo;systemd&rdquo;</strong> program. Searching solutions on the internet, I find out the settings in systemd will handle the power related key event. It sets how system react when user press Power key, Hibernate Key, Lid close/open, etc.</p>
<div class="highlight"><pre><span class="nv">$ </span>sudo vi /etc/systemd/logind.conf
<span class="c"># --in the file, change below line</span>
<span class="c">#HandleLidSwitch=suspend</span>
<span class="c"># --to</span>
<span class="nv">HandleLidSwitch</span><span class="o">=</span>ignore

<span class="nv">$ </span>sudo service systemd-logind restart
</pre></div>
<p>This helps me to get over the hibernation problem at once. <strong>Systemd</strong> is a Linux system and service manager. There is similar programs like ubuntu&#39;s &ldquo;upstart&rdquo;, or Mac OS&#39;s &ldquo;launchd&rdquo;. You can search for more info about it. <strong>The man page of systemd(init) is definitely worth reading to understand the first process of the system.</strong></p>
<p>There are two other power related packages <code>acpi</code> and <code>acpid</code>. The Ubuntu document recommends that you can remove the packages if you do not have a laptop. Might read that later.</p>

<h4 id="toc_3">1.2 Problem 2: Japanese keyboard layout</h4>
<p>Although I set some Japanese keyboard layout in the installation, but it doesn&#39;t match all the keys with my Japanese IBM G40 keyboard. Apparently I need to switch the keyboard layout and do a few tests. The configuration program I used here is <code>dpkg-reconfigure</code>, which allows you to configure a package again after they&#39;re installed. The package will be &ldquo;keyboard-configuration&rdquo;.</p>
<div class="highlight"><pre><span class="c"># choose a different keyboard mapping</span>
<span class="nv">$ </span>sudo dpkg-reconfigure keyboard-configuration
</pre></div>
<p>The above one already solved the problem. I changed the keyboard model to IBM ThinkPad T60/R60/T61/R61, then it says the layout of this keyboard varies in different country, so I&#39;m able to choose the &ldquo;Japanese&rdquo; as the country of the origin layout. </p>
<p>Some threads mentioned about the <code>console-setup</code> as I found out it is mainly for the encoding and the font set in the console, it might be related to the problem but not at this point. I may referred back if I try to work with Chinese character in the console.</p>
<div class="highlight"><pre><span class="c"># This change some console character set options</span>
<span class="nv">$ </span>sudo dpkg-reconfigure console-setup
</pre></div>
<p>A little more on dpkg-reconfigure, if you use <code>man dpkg-recongure</code> to check its manual, you will find another related command called <code>debconf-show</code>. It shows you all the current configurations of the package. So before you go with &ldquo;dpkg-reconfigure&rdquo;, you can check the configuration first.</p>
<div class="highlight"><pre><span class="nv">$ </span>sudo debconf-show keyboard-configuration
</pre></div>
<p>It shows how many configuration items of the package and their values. Check out the man page for &ldquo;keyboard-configuration&rdquo;, &ldquo;console-setup&rdquo;, &ldquo;dpkg-reconfigure&rdquo; and &ldquo;debconf-show&rdquo; to explore more.</p>

<h4 id="toc_4">1.3 Problem 3: WiFi Connection</h4>
<p>The original G40 doesn&#39;t have wireless network connection. Fortunately I have a spare USB wifi adapter, but I need to configure the WiFi manually via command line. The adapter I used is Ralink RT5370, which is already supported in the kernel, so I don&#39;t need to explicitly install a driver for it.</p>
<p>First I could use <code>lsusb</code> to check that device is recognized. Then I move on to updating the configuration in <code>/etc/network/interfaces</code>. Check out the man page of <strong>interfaces</strong>, and you will find the information of the keywords and syntax for configuring the network interface. For example:</p>

<ul>
<li>  <em>auto</em>, telling <code>ifup</code> to get this interface up automatically</li>
<li>  <em>iface</em>, define an interface (template) using different methods(inet, inet6, etc.)</li>
<li>  <em>allow-\</em>, allow the interface to be brought up by various sub-system(e.g. allow-hotplug, allow-auto, etc.)</li>
<li>  <em>pre-up</em>, <em>post-down</em>, commands to be execute before the interface is up or after it is down</li>
</ul>
<p>The configuration syntax is not difficult, so I added the below lines to enable the wifi adapter at system startup:</p>

<pre><code>auto wlan0
iface wlan0 inet dhcp
iface wlan0 inet6 auto</code></pre>
<p>Next I discover that my WiFi adapter is not called &ldquo;wlan0&rdquo;(you can check that by command <code>iwconfig</code>). Instead, it is called &ldquo;wlx5c63bf2a8b28&rdquo;, no wonder why I cannot bring it up when execute ifup. So now I need to change the name for it to make it more readable using <strong>udev</strong>. udev is responsible for which device gets which name. By the Systemd v197 standard of &ldquo;Predictable Network Interface Names&rdquo;, interfaces are prefixed with &ldquo;en&rdquo; for ethernet, &ldquo;wl&rdquo; for WLAN, and &ldquo;WW&rdquo; for WWAN. </p>
<div class="highlight"><pre><span class="c"># you check the interface entires list first, and fine the MAC address we&#39;ll need in udev</span>
<span class="nv">$ </span>ip link
<span class="c"># (or alternatively for wireless interfaces)</span>
<span class="nv">$ </span>iw dev

<span class="c"># update udev configuration</span>
<span class="nv">$ </span>sudo vi /etc/udev/rules.d/10-network.rules
<span class="c"># add below line and save</span>
<span class="nv">SUBSYSTEM</span><span class="o">==</span><span class="s2">&quot;net&quot;</span>, <span class="nv">ACTION</span><span class="o">==</span><span class="s2">&quot;add&quot;</span>, ATTR<span class="o">{</span>address<span class="o">}==</span><span class="s2">&quot;5c:63:bf:2a:8b:28&quot;</span>, <span class="nv">NAME</span><span class="o">=</span><span class="s2">&quot;wlan0&quot;</span>
</pre></div>
<p>The <strong>udev</strong> program is a dynamic device management software, it supplies the system softwares with device events, manage permissions of device nodes and may create additional symlinks in the &ldquo;/dev&rdquo; directory, or provide names to unpredictable device names from the kernel. The man page for <code>udev</code> is worth reading.</p>
<p>Reboot to test out if the device is named correctly. The devicexs can be found in <code>/sys/class/net/</code>, with a symbolic link to the device&#39;s DEVPATH.</p>
<p>Next step is to setup the WPA2 authentication of the WiFi with my SSID and password. We&#39;ll need <code>wpasupplicant</code> package for that.</p>
<div class="highlight"><pre><span class="nv">$ </span>sudo apt-get install wpasupplicant
<span class="nv">$ </span>sudo vi /etc/wpa_supplicant/example.conf
<span class="c"># add the following contents:</span>
<span class="c">#   ctrl_interface=/run/wpa_supplicant</span>
<span class="c">#   update_config=1</span>
<span class="nv">$ </span>sudo wpa_passphrase &lt;SSID&gt; &lt;password&gt; &gt;&gt; /etc/wpa_supplicant/example.conf

<span class="c"># to test the configuration: 1. start wpa_supplicant in the background, 2. use wpa_cli to interactive with the interface</span>
<span class="nv">$ </span>wpa_supplicant -i wlan0 -c /etc/wpa_supplicant/example.conf
<span class="c"># (or alternatively, add &quot;-B&quot; parameter to the wpa_supplicant command to make it run as a daemon in the background, then use &quot;wpa_cli&quot; to work interactively)</span>
<span class="nv">$ </span>wpa_cli
&gt;scan
&gt;scan_results
<span class="c"># now you see the hotspot scan result, which means the configuration work</span>

<span class="c"># Go back to our network interface setup, we will add wpa_supplicant to it</span>
<span class="nv">$ </span>sudo vi /etc/network/interfaces
auto wlan0
iface wlan0 inet dhcp
  pre-up wpa_supplicant -B -i wlan0 -c /etc/wpa_supplicant/example.conf
<span class="c"># save and test the interface</span>
<span class="nv">$ </span>sudo ifdown wlan0
<span class="nv">$ </span>sudo ifup wlan0
<span class="c"># make sure the DHCP client can get an IP, otherwise the network auto start process in boot up might hang for 5 minutes to get the network...</span>
</pre></div>
<p>Hard-coding the WiFi SSID and password in the configuration is not convenience in real environment, but so far in my experiement environment, it is OK to use it first. We will get back to the network manager later to make it more convenience to connect different WiFi network.</p>

<h4 id="toc_5">Problem 1.4 WiFi Connection Revisited</h4>
<p>Last night I has successfully connect the wifi adapter to my home&#39;s network, howvever some new issues come up:</p>

<ul>
<li>  The bandwidth is only 1Mb/s</li>
<li>  It takes a very long time to activate the interface, and sometimes hang there</li>
</ul>
<p>After checking the <a href="https://www.debian.org/doc/manuals/debian-reference/ch05.en.html">Debian&#39;s document</a>, the network setup using <em>ifupdown</em> approach is a bit outdate, and the modern way is to use NetworkManager(NM) or Wicd(wicd and associated packages). </p>
<p>(BTW, it is good to have the <em>debian-handbook</em> and <em>debian-reference</em> package installed in your local machine for any reference needed.)</p>
<p>So first step, I try to look up a proper driver for the adapter. There is a package <a href="https://wiki.debian.org/rt2800usb">rt2800usb</a> to support Ralink 802.11n usb devices on Linux.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Config your git repository to use SSH Key]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/04/git-ssh-config.html"/>
        <published>2016-04-17T16:11:00+08:00</published>
        <updated>2016-04-18T09:50:50+08:00</updated>
        <id>http://terryoy.github.io/2016/04/git-ssh-config.html</id>
        <category scheme="http://terryoy.github.io/tag/#shell" term="shell" label="shell" />
        <category scheme="http://terryoy.github.io/tag/#virtualbox" term="virtualbox" label="virtualbox" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>It is very time-consuming typing user and password every time when you do git pull/push to sync your code. Using the rsa ssh key for the authentication will save you a lot of time.</p>

<h3 id="toc_0">1. Generate SSH Key</h3>
<p>Just use the method I mentioned before in <a href="/2014/01/ssh-key-based-auth-server.html#toc_1">this article</a>, you will get a public/private key pair. Upload the public key to your github or other git hosting service.</p>

<h3 id="toc_1">2. Config your local SSH</h3>
<p>Create or open the file <code>~/.ssh/config</code> for ssh key config. The content will be similar as below:</p>

<pre><code>Host dev
 HostName dev.local
 IdentityFile ~/.ssh/dev_rsa
Host github.com
 HostName github.com
 IdentityFile ~/.ssh/github_rsa</code></pre>
<p>You can use a &ldquo;host&rdquo; alias for ssh connect instead of the full host name, this would be convenient if you might switch server host.</p>

<h3 id="toc_2">3. Choose the correct git url</h3>
<p>Usually public git hosting services use HTTPS or GIT protocol, and your private repository can use SSH protocol like in <a href="/2014/10/common-git-commands.html#toc_3">this article</a>.</p>

<pre><code>* Git URL: git@bitbucket.org:&lt;accountname&gt;/&lt;reponame&gt;.git  
* Use with alias: git@bitbucket:&lt;accountname&gt;/&lt;reponame&gt;.git</code></pre>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Ubuntu Desktop Sharing to Mac OSX]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/02/ubuntu-desktop-sharing-to-osx.html"/>
        <published>2016-02-26T10:52:00+08:00</published>
        <updated>2016-02-26T11:11:36+08:00</updated>
        <id>http://terryoy.github.io/2016/02/ubuntu-desktop-sharing-to-osx.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#osx" term="osx" label="osx" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>I have a spare laptop rest in my house which I seldom use(I major use my macbook pro for work), but it&#39;s still good for developing projects and runs Linuxi Mint. So I want it to be available any time when I&#39;m at home so I could use it to continue my side project works. With ssh and VNC, I can setup both the command line and desktop environment online so I don&#39;t need to open the laptop, but use my macbook to access the environment. Then I have the convenience that the laptop can put anywhere in the house and clear my desktop.</p>
<p>I found <a href="http://www.fiz-ix.com/2012/12/ubuntu-to-mac-os-x-screen-sharing-with-vinagre/">this post</a> very useful to do the trick. It uses &ldquo;vino&rdquo; with easily setup steps, and you can get &ldquo;Vinagre&rdquo; VNC client on Linux ox,  but you need some notices about the access on OSX. So I write my process here.</p>

<h3 id="toc_0">1. Setup Vino(VNC for gnome)</h3>
<p>Just reference the post. </p>
<div class="highlight"><pre><span class="nv">$ </span>sudo apt-get vino
<span class="c"># the preferences is the same as &quot;Desktop Sharing&quot; preference panel in Linux Mint</span>
<span class="nv">$ </span>vino-preferences
</pre></div>
<p>You can set up the items just as the post said in vino-preferences, but on Linux Mint it lacks out the &ldquo;Advanced settings&rdquo; mentioned in the post. So you need &ldquo;dconf-editor&rdquo; to manually set it.</p>
<div class="highlight"><pre><span class="nv">$ </span>sudo apt-get install dconf-editor
<span class="nv">$ </span>dconf-editor
</pre></div>
<p>Find the config item in dconf-editor with path <strong>&ldquo;desktop.gnome.remote-access&rdquo;</strong>. You need to uncheck the &ldquo;require encryption&rdquo; to support OSX, otherwise the authentication is unsupported on OSX.</p>

<h3 id="toc_1">2. Using Screen Sharing on Mac OSX</h3>
<p>Turn on the &ldquo;Spotlight&rdquo; with keyboard shortcut <code>cmd+K</code>, enter &ldquo;screen sharing&rdquo; and you can find the default desktop sharing client app on Mac OSX.</p>
<p>Type &ldquo;vnc://your_server_ip:5900&rdquo; and then you get the prompt to enter password for the access. That&#39;s it!</p>

<h3 id="toc_2">3. More</h3>
<p>The post also talked about using the <code>avahi</code> service to broadcast the desktop sharing service to OSX. It is an advanced option to try, I will update it if I have tried.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[VirtualBox Command Line Tricks]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/02/vbox-cmd-tools-tricks.html"/>
        <published>2016-02-17T11:01:00+08:00</published>
        <updated>2016-02-26T10:39:43+08:00</updated>
        <id>http://terryoy.github.io/2016/02/vbox-cmd-tools-tricks.html</id>
        <category scheme="http://terryoy.github.io/tag/#shell" term="shell" label="shell" />
        <category scheme="http://terryoy.github.io/tag/#virtualbox" term="virtualbox" label="virtualbox" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Sometimes we need to work with VirtualBox&#39;s command line tools to make things done. Here are a collections of tasks I encountered.</p>

<h3 id="toc_0">1. Converting an Linux .img format to a .vdi (VirtualBox disk)</h3>
<div class="highlight"><pre><span class="nv">$ </span>VBoxManage convertfromraw mydisk.img mydisk.vdi --format vdi
</pre></div>

<h3 id="toc_1">2. Mount virtual disk on your ubuntu system</h3>
<p>(&hellip;to be continued)</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Multiple Arguments in Python]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/02/args-kwargs-python.html"/>
        <published>2016-02-03T16:05:00+08:00</published>
        <updated>2016-02-03T16:57:01+08:00</updated>
        <id>http://terryoy.github.io/2016/02/args-kwargs-python.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>This article tells about how to use variable number of arguments in Python functions.</p>

<h3 id="toc_0">1. Passing Multiple Arguments</h3>
<p>The meaning of &ldquo;args&rdquo; and &ldquo;kwargs&rdquo; we often used as the multiple arguments are &ldquo;normal(unnamed) arguments&rdquo; and &ldquo;keyword(named) arguments&rdquo;. Try the below in python and you can see it&#39;s actually the difference of a tuple and a dictionary.</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span><span class="k">def</span> <span class="nf">play</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">kwargs</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span><span class="n">play</span><span class="p">()</span>
<span class="p">()</span>
<span class="p">{}</span>
</pre></div>
<p>You should use the order of specific arguments, unnamed arguments, and named arguments when defining a function:</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">arg_order</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</pre></div>

<h3 id="toc_1">2. How to pass arguments from one function to another</h3>
<p>Below are a list of examples to show you the result of different methods of multiple arguments:</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">a</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
<span class="o">...</span>   <span class="k">print</span><span class="p">(</span><span class="s">&quot;unnamed: {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">args</span><span class="p">))</span>
<span class="o">...</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
<span class="n">unnamed</span><span class="p">:</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">b</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<span class="o">...</span>   <span class="k">print</span><span class="p">(</span><span class="s">&quot;named: {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">kwargs</span><span class="p">))</span>
<span class="o">...</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">named</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>

<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">c</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<span class="o">...</span>   <span class="k">print</span><span class="p">(</span><span class="s">&quot;full:&quot;</span><span class="p">)</span>
<span class="o">...</span>   <span class="k">print</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
<span class="o">...</span>   <span class="n">a</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
<span class="o">...</span>   <span class="n">b</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
<span class="o">...</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<span class="o">...</span>   <span class="n">c</span><span class="p">(</span><span class="mi">123</span><span class="p">,</span> <span class="mi">456</span><span class="p">,</span> <span class="mi">789</span><span class="p">,</span> <span class="n">we</span><span class="o">=</span><span class="s">&quot;we&quot;</span><span class="p">,</span> <span class="n">love</span><span class="o">=</span><span class="s">&quot;love&quot;</span><span class="p">,</span> <span class="n">it</span><span class="o">=</span><span class="s">&quot;it&quot;</span><span class="p">)</span>
<span class="o">...</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">test</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span> <span class="n">we</span><span class="o">=</span><span class="s">&quot;we&quot;</span><span class="p">,</span> <span class="n">love</span><span class="o">=</span><span class="s">&quot;love&quot;</span><span class="p">,</span> <span class="n">it</span><span class="o">=</span><span class="s">&quot;it&quot;</span><span class="p">)</span>
<span class="n">full</span><span class="p">:</span>
<span class="mi">123</span>
<span class="n">unnamed</span><span class="p">:</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
<span class="n">named</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;we&#39;</span><span class="p">:</span> <span class="s">&#39;we&#39;</span><span class="p">,</span> <span class="s">&#39;love&#39;</span><span class="p">:</span> <span class="s">&#39;love&#39;</span><span class="p">,</span> <span class="s">&#39;it&#39;</span><span class="p">:</span> <span class="s">&#39;it&#39;</span><span class="p">}</span>
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Raspberry Pi Hardware GPIO with Python]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/09/rpi-hardware-begin-gpio-python.html"/>
        <published>2015-09-06T20:02:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2015/09/rpi-hardware-begin-gpio-python.html</id>
        <category scheme="http://terryoy.github.io/tag/#rpi" term="rpi" label="rpi" />
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#hardware" term="hardware" label="hardware" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>This article is for beginner to learn how to work with RPi.GPIO. It collects a bunch of useful information and examples of GPIO/SPI/I2C programs.</p>

<h3 id="toc_0">1. Raspberry Pi Hardware Documentation</h3>
<p>First of all, the hardware documentation for rpi is here:
<a href="https://www.raspberrypi.org/documentation/hardware/README.md">https://www.raspberrypi.org/documentation/hardware/README.md</a></p>
<p>GPIO Pin out: <a href="http://pi.gadgetoid.com/pinout">http://pi.gadgetoid.com/pinout</a>. Now here&#39;s a screenshot of the pinouts.</p>
<p><img src="http://terryoy-github.u.qiniudn.com/blog/2015/rpi-gpio-pinout.png" alt="http://terryoy-github.u.qiniudn.com/blog/2015/rpi-gpio-pinout.png"/></p>
<p>SPI: <a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/spi/README.md">https://www.raspberrypi.org/documentation/hardware/raspberrypi/spi/README.md</a></p>
<p>Low level Peripherals: <a href="http://elinux.org/RPi_Low-level_peripherals">http://elinux.org/RPi_Low-level_peripherals</a></p>

<h3 id="toc_1">2. Basic GPIO</h3>
<p>(to be continued)</p>

<h3 id="toc_2">References:</h3>
<p>Sparkfun&#39;s tutorials:
<a href="https://learn.sparkfun.com/tutorials/raspberry-gpio/hardware-setup">learn.sparkfun.com/tutorials/raspberry-gpio/hardware-setup</a>
<a href="https://learn.sparkfun.com/tutorials/raspberry-gpio/python-rpigpio-example">learn.sparkfun.com/tutorials/raspberry-gpio/python-rpigpio-example</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Linux Server Security Useful Commands]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/06/some-useful-linux-server-security-commands.html"/>
        <published>2015-06-27T22:31:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2015/06/some-useful-linux-server-security-commands.html</id>
        <category scheme="http://terryoy.github.io/tag/#server" term="server" label="server" />
        <category scheme="http://terryoy.github.io/tag/#security" term="security" label="security" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>When suspecting your server is broken into, below is some tricks to do the server audit.</p>

<h3 id="toc_0">1. Use &ldquo;last&rdquo; command to check login sessions</h3>
<div class="highlight"><pre><span class="nv">$ </span>last
terryoy  pts/0        58.251.197.153   Sat Jun 27 21:42   still logged in   
terryoy  pts/2        113.116.1.68     Tue Jun 23 14:40 - 16:14  <span class="o">(</span>01:34<span class="o">)</span>    
terryoy  pts/0        113.116.1.68     Tue Jun 23 14:38 - 16:14  <span class="o">(</span>01:35<span class="o">)</span>    
terryoy  pts/0        183.16.85.159    Tue Jun 23 09:37 - 14:02  <span class="o">(</span>04:24<span class="o">)</span>    
terryoy  pts/0        183.16.197.223   Mon Jun 22 17:47 - 20:10  <span class="o">(</span>02:22<span class="o">)</span>    
terryoy  pts/6        183.16.195.96    Thu Jun 18 11:08 - 15:23  <span class="o">(</span>04:14<span class="o">)</span>    
terryoy  pts/5        183.16.195.96    Thu Jun 18 11:08 - 15:23  <span class="o">(</span>04:14<span class="o">)</span>    
terryoy  pts/2        183.16.190.37    Thu Jun 18 10:37 - 13:06  <span class="o">(</span>02:29<span class="o">)</span>    
terryoy  pts/0        183.16.190.37    Thu Jun 18 10:01 - 13:01  <span class="o">(</span>02:59<span class="o">)</span>
</pre></div>

<h3 id="toc_1">2. Use &ldquo;lastlog&rdquo; to check all user&#39;s last login time</h3>
<div class="highlight"><pre><span class="nv">$ </span>lastlog
Username         Port     From             Latest
root             pts/2    27.45.56.68      Sat Feb 21 15:21:40 +0800 2015
daemon                                     **Never logged in**
bin                                        **Never logged in**
sys                                        **Never logged in**
sync                                       **Never logged in**
games                                      **Never logged in**
man                                        **Never logged in**
lp                                         **Never logged in**
mail                                       **Never logged in**
news                                       **Never logged in**
uucp                                       **Never logged in**
proxy                                      **Never logged in**
</pre></div>

<h3 id="toc_2">3. Check &ldquo;/var/log/auth.log&rdquo;</h3>
<div class="highlight"><pre><span class="nv">$ </span>sudo less /var/log/auth.log
...
Jun 27 21:35:01 iZ940ou5p7nZ CRON<span class="o">[</span>14089<span class="o">]</span>: pam_unix<span class="o">(</span>cron:session<span class="o">)</span>: session closed <span class="k">for </span>user root
Jun 27 21:42:55 iZ940ou5p7nZ sshd<span class="o">[</span>14108<span class="o">]</span>: Accepted password <span class="k">for </span>terryoy from 58.251.197.153 port 62430 ssh2
Jun 27 21:42:55 iZ940ou5p7nZ sshd<span class="o">[</span>14108<span class="o">]</span>: pam_unix<span class="o">(</span>sshd:session<span class="o">)</span>: session opened <span class="k">for </span>user terryoy by <span class="o">(</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">)</span>
Jun 27 21:45:01 iZ940ou5p7nZ CRON<span class="o">[</span>14187<span class="o">]</span>: pam_unix<span class="o">(</span>cron:session<span class="o">)</span>: session opened <span class="k">for </span>user root by <span class="o">(</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">)</span>
Jun 27 21:45:01 iZ940ou5p7nZ CRON<span class="o">[</span>14187<span class="o">]</span>: pam_unix<span class="o">(</span>cron:session<span class="o">)</span>: session closed <span class="k">for </span>user root
Jun 27 21:53:30 iZ940ou5p7nZ sudo:  terryoy : <span class="nv">TTY</span><span class="o">=</span>pts/0 ; <span class="nv">PWD</span><span class="o">=</span>/home/terryoy ; <span class="nv">USER</span><span class="o">=</span>root ; <span class="nv">COMMAND</span><span class="o">=</span>/usr/bin/apt-get install acct
Jun 27 21:53:30 iZ940ou5p7nZ sudo: pam_unix<span class="o">(</span>sudo:session<span class="o">)</span>: session opened <span class="k">for </span>user root by terryoy<span class="o">(</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">)</span>
Jun 27 21:53:39 iZ940ou5p7nZ sudo: pam_unix<span class="o">(</span>sudo:session<span class="o">)</span>: session closed <span class="k">for </span>user root
...
</pre></div>

<h3 id="toc_3">4. Use &ldquo;acct&rdquo; for system accounting</h3>
<p>The &ldquo;acct&rdquo; package is a set of utilities for system accounting. </p>

<pre><code>* ac, print stats about user's connect time
* accton, turn process accounting on or off
* last, listing of last logged in users
* lastcomm, print info about previous executed commands
* sa, summarize accounting info
* dump-utmp, print an utmp file in human readable format
* dump-acct, print an acct file in human readable format</code></pre>
<div class="highlight"><pre><span class="c"># list user&#39;s login session time by date</span>
<span class="nv">$ </span>ac -p -d

<span class="c"># display user&#39;s last commands</span>
<span class="nv">$ </span>lastcomm &lt;user_name&gt;
</pre></div>

<h3 id="toc_4">Reference to secure ubuntu server</h3>
<p><a href="https://www.ftmon.org/blog/secure-ubuntu-server/">www.ftmon.org/blog/secure-ubuntu-server/</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Intel Edison Get Started]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/06/edison-get-started.html"/>
        <published>2015-06-03T16:15:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2015/06/edison-get-started.html</id>
        <category scheme="http://terryoy.github.io/tag/#programming" term="programming" label="programming" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>This guide is about the initial steps for me starting development on Intel Edison platform.</p>

<h3 id="toc_0">1. The Board and Setting Up Serial Communication</h3>
<p>The board I use to develop with Edison is the <a href="http://www.seeedstudio.com/depot/Intel-Edison-for-Arduino-p-2149.html">Intel Edison for Arduino</a> board. So first plug the Edison module on the board; secondary, I have the 6.5V 2A DC connected to supply the power to the board (or you could power up the board with the micro-USB in the middle); third, a micro-USB wire connect to the board for serial communication.</p>
<p>I&#39;m using minicom on Mac OSX for the serial connection, but you can also use <code>screen</code> on Mac OSX and Linux(see the reference at the end of this section).</p>
<p>If you forgot the root password, here&#39;s the way to recover it: </p>

<pre><code>* on booting, press any key to stop the process
* on the &quot;boot&gt;&quot; command line prompt, type ```run do_ota``` to redo the flashing process.</code></pre>
<p>Then you end up with a login using &ldquo;root&rdquo; as user name and no password.</p>

<ul>
<li><a href="https://software.intel.com/zh-cn/assembling-intel-edison-board-with-arduino-expansion-board">Reference for assembling</a></li>
<li><a href="https://software.intel.com/zh-cn/setting-up-serial-terminal-on-system-with-linux">Reference for setting up serial on Linux</a></li>
<li><a href="https://software.intel.com/zh-cn/setting-up-serial-terminal-on-system-with-mac-os-x">Reference for setting up serial on Mac</a></li>
</ul>

<h3 id="toc_1">2. Setting up WiFi</h3>
<p>The next thing to do is to setup the WiFi on Edison, because a large part of the development process happens on WiFi.</p>
<div class="highlight"><pre><span class="nv">$ </span>configure_edison --wifi

<span class="c"># check the wifi status</span>
<span class="nv">$ </span>wpa_cli status
</pre></div>
<p>Follow the instructions of this program to complete the scanning, choosing hotspot, and reboot with WiFi.</p>
<p>By default, <code>ssh</code> is restricted to usb, so you need to disable the restriction by using <code>configure_edison --setup</code> to setup the device name and password. It will automatically update the file &#39;/lib/systemd/system/sshd.socket&#39; and comment out this line &ldquo;BindToDevice=usb0&rdquo;. (need reboot to take effect)</p>

<ul>
<li><a href="https://software.intel.com/zh-cn/connecting-your-intel-edison-board-using-wifi">Reference for setting up WiFi</a></li>
</ul>

<h3 id="toc_2">3. Blink the LED</h3>
<p>(to be continued when I get the board&hellip;)</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[A Template for Program Readme on Github]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/06/program-readme-template.html"/>
        <published>2015-06-03T16:15:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2015/06/program-readme-template.html</id>
        <category scheme="http://terryoy.github.io/tag/#programming" term="programming" label="programming" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>When writing a Program, the developer should be clear about the purpose, to eliminate time wasted. Refering to the <a href="http://textfiles.com/programming/writprog.pro">How to Program</a>, I propose a documatation template companied with a Software Development Life Cycle to ensure this.</p>

<pre><code>1. SPECIFICATION
2. PROGRAM DESIGN
3. CODE DESIGN
4. CONSTRUCTION AND DESIGN</code></pre>
<p>So, starting a project on github, I think we should follow a basic documentation structure to answer each questions, to ensure that your purpose is clear enough.</p>

<h3 id="toc_0">1. Speficication</h3>
<p>In this stage, four things matter.</p>

<ul>
<li><p>User Interface</p>
<p>in what approach does user interact with the program?
what input/output?
command line? menus? how much freedom allowed?</p></li>
<li><p>Algorithm</p>
<p>what specific computation behind the program?
what method do we use?</p></li>
<li><p>Data Structures</p>
<p>how should the data of the problem be organized?</p></li>
<li><p>[Generality]</p>
<p>is it used only in a small number of situations? or is it general purpose of wide variety of circumstances?
you need fewer choices if made for a small number of situations, and more choices and more commands for large number of situations</p></li>
<li><p>[Robustness]
how gracefully does the program respond to bad data or bad commands?</p></li>
</ul>

<h3 id="toc_1">2. Program Design</h3>
<p>A design of the program may be often represented by a structure chart, but it&#39;s not the most important thing. Instead, you should divied the large program into <strong>subroutines</strong>.</p>

<ul>
<li>Design Structure
top level routines
    sub routines</li>
</ul>
<p>There&#39;re a few ideas for evaluating the desgin:</p>

<pre><code>1. Keep subroutines short
2. Keep subroutines single-purpose
3. Keep calling sequence short
4. Communicate data through calling sequences
5. Limit use of flag variables
6. Make design hierarchical</code></pre>

<h3 id="toc_2">[3. Setup and Testing]</h3>

<h3 id="toc_3">[4. About and License]</h3>
<p><em>(Since the original post discontinued, I have to complete the rest of the template myself.)</em></p>
<p>Following is a template in markdown:</p>

<pre><code>### 1. Specification

##### User Interface

##### Algorithms

##### Data Structures

##### [Generality]

##### [Robustness]

### 2. Program Design

##### Design Structure

##### Public Interface

### 3. Setup and Testing

### 4. About

### 5. License</code></pre>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Create a Root CA and Self-Sign Certificate for SSL]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/02/create-ssl-ca-root-and-self-sign.html"/>
        <published>2015-02-23T11:03:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2015/02/create-ssl-ca-root-and-self-sign.html</id>
        <category scheme="http://terryoy.github.io/tag/#server" term="server" label="server" />
        <category scheme="http://terryoy.github.io/tag/#security" term="security" label="security" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Concepts</h3>
<p>Nowadays we often have HTTPS protected web access scenario, however it&#39;s expensive to purchase a certificates from authority if you&#39;re just running a small site. So it&#39;s better to create your own certificates and use your own SSL protection.</p>
<p>The steps can be roughly described as below:</p>

<pre><code>1. Create a private key (as Root CA Key), keep this very private
2. Self-sign a root certificate
3. Install root CA on your various workstations
4. Create a CSR(Certificate Signing Request) for each of your authorized needed circumstances(device, server, client, etc.)
5. Sign CA with root CA Key</code></pre>

<h3 id="toc_1">2. Generate Root CA(Certificate Authority)</h3>
<p>The first part is to create a private key and the CA, which will be used as the root CA to sign certificates.</p>
<div class="highlight"><pre><span class="c">## Step 1: Create a private key</span>

<span class="c"># generate a private root key</span>
<span class="nv">$ </span>openssl genrsa -out rootCA.key 2048
<span class="c"># (or) generate a private root key with passphrase protection; and if you forgot the password, you need to do everything again</span>
<span class="nv">$ </span>openssl genrsa -out rootCA.key 2048 -des3


<span class="c">## Step 2: Self-sign a certificate</span>

<span class="nv">$ </span>openssl req -x509 -new -nodes -key rootCA.key -days 3650 -out rootCA.pem
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter <span class="s1">&#39;.&#39;</span>, the field will be left blank.
-----
Country Name <span class="o">(</span>2 letter code<span class="o">)</span> <span class="o">[</span>AU<span class="o">]</span>:CN
State or Province Name <span class="o">(</span>full name<span class="o">)</span> <span class="o">[</span>Some-State<span class="o">]</span>:Guangdong
Locality Name <span class="o">(</span>eg, city<span class="o">)</span> <span class="o">[]</span>:Shenzhen
Organization Name <span class="o">(</span>eg, company<span class="o">)</span> <span class="o">[</span>Internet Widgits Pty Ltd<span class="o">]</span>:TeaTime Production.
Organizational Unit Name <span class="o">(</span>eg, section<span class="o">)</span> <span class="o">[]</span>:IT   
Common Name <span class="o">(</span>e.g. server FQDN or YOUR name<span class="o">)</span> <span class="o">[]</span>:Terry Ouyang    
Email Address <span class="o">[]</span>:terry.ouyang@gmail.com
</pre></div>
<p>Now we have a private root key(rootCA.key), and a root CA(rootCA.pem). If you want all the clients/PC/browsers accept your authorized certificate, you need to put your root CA in their local trusted stores(e.g. OS&#39;s trusted certificates repositories).</p>

<h3 id="toc_2">3. Create Certificates and Sign with Root CA</h3>
<p>For every device you want to authorize, you need to create their own private key, then complete the signed certificate with a certificate signing request(CSR).</p>
<div class="highlight"><pre><span class="c">## Step 1: Create the private key</span>

<span class="nv">$ </span>openssl genrsa -out device.key 2048

<span class="c">## Step 2: Create the CSR (In this step you must set &quot;Common Name&quot; to your desire host if you&#39;re planning to use it as a server&#39;s certificate)</span>

<span class="nv">$ </span>openssl req -new -key device.key -out device.csr
...
Common Name <span class="o">(</span>e.g. server FQDN or YOUR name<span class="o">)</span> <span class="o">[]</span>:terryoy.github.io
...

<span class="c">## Step 3: Create the signed certificate </span>

<span class="nv">$ </span>openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 3650
</pre></div>
<p>Now you have the certificate private key(device.key) and the self CA signed certificate(device.crt). You can now use them for SSL communications.</p>

<h3 id="toc_3">4. Congifuration for Nginx</h3>
<p>Below is an example of enabling the SSL function for the service configuration.</p>
<div class="highlight"><pre>server <span class="o">{</span>
    listen 443;
    ssl on;
    ssl_certificate /etc/nginx/ssl/service.crt;
    ssl_certificate_key /etc/nginx/ssl/service.key;

    ...
<span class="o">}</span>
</pre></div>
<p>You can also check your server&#39;s certificate by the command below:</p>
<div class="highlight"><pre><span class="nv">$ </span>openssl s_client -connect www.yourexample.com:443
</pre></div>

<h3 id="toc_4">5. Setup SSL Factory on Android App</h3>
<p>There is a good reference on <a href="http://stackoverflow.com/a/6378872">stackoverflow.com</a> for this problem.</p>
<p>If you&#39;re using cocos2d-x 3.3+, it supports that you set a certificate for the HttpClient(globally), which allows you use your own certificate for SSL verification.</p>
<div class="highlight"><pre><span class="k">auto</span> <span class="n">path</span> <span class="o">=</span> <span class="n">FileUtils</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">fullPathForFilename</span><span class="p">(</span><span class="s">&quot;my_cacert.pem&quot;</span><span class="p">);</span>
<span class="n">HttpClient</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">setSSLVerification</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[PostgesSQL 9 Administration QuickRef(2) - Managing Database]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/02/postgresql-admin-quickref-part2-initiating-database.html"/>
        <published>2015-02-21T16:40:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2015/02/postgresql-admin-quickref-part2-initiating-database.html</id>
        <category scheme="http://terryoy.github.io/tag/#postgresql" term="postgresql" label="postgresql" />
        <category scheme="http://terryoy.github.io/tag/#database" term="database" label="database" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Creating a Database</h3>
<p>It&#39;s a common task to create a database and assign an access user for it. This can be done by command line or by psql queries.</p>
<div class="highlight"><pre><span class="c"># by command line</span>
<span class="nv">$ </span>su postgres
<span class="nv">$ </span>createuser -D -A -P myuser
<span class="nv">$ </span>createdb -O myuser mydb

<span class="c"># (or) a longer version for the createdb command</span>
<span class="nv">$ </span>createdb -h localhost -p 5432 -U postgres -O myuser -E UTF8 mydb
</pre></div>
<div class="highlight"><pre><span class="c1">--create database by psql client </span>
<span class="gp">postgres=#</span> <span class="k">CREATE</span> <span class="k">USER</span> <span class="n">myuser</span> <span class="k">WITH</span> <span class="k">PASSWORD</span> <span class="s1">&#39;my_password&#39;</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">mydb</span> <span class="k">WITH</span> <span class="k">OWNER</span> <span class="n">myuser</span> <span class="k">ENCODING</span> <span class="s1">&#39;UTF8&#39;</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">GRANT</span> <span class="k">ALL</span> <span class="k">PRIVILEGES</span> <span class="k">ON</span> <span class="k">DATABASE</span> <span class="s-Name">&quot;mydb&quot;</span> <span class="k">to</span> <span class="n">myuser</span><span class="p">;</span>
</pre></div>

<h3 id="toc_1">2. Configuring Connection Method</h3>
<p>Peer authentication uses system&#39;s user accounts for authentication, while MD5 authentication uses password authentication encrypted in md5.</p>
<p>Restart Postgresql service after configuration file is changed.</p>
<div class="highlight"><pre><span class="c"># Edit the file for the database access method</span>
<span class="nv">$ </span>sudo vi /etc/postgresql/9.1/main/pg_hba.conf

<span class="c"># Database administrative login by Unix domain socket</span>
<span class="nb">local   </span>all             postgres                                peer

<span class="c"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span>

<span class="c"># &quot;local&quot; is for Unix domain socket connections only</span>
<span class="nb">local   </span>all             all                                     peer
<span class="c"># IPv4 local connections:</span>
host    all             all             127.0.0.1/32            md5
<span class="c"># IPv6 local connections:</span>
host    all             all             ::1/128                 md5
<span class="c"># Allow replication connections from localhost, by a user with the</span>
<span class="c"># replication privilege.</span>
<span class="c">#local   replication     postgres                                peer</span>
<span class="c">#host    replication     postgres        127.0.0.1/32            md5</span>
<span class="c">#host    replication     postgres        ::1/128                 md5</span>


<span class="nv">$ </span>sudo service postgresql restart
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[A JNI Guide on Android]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/11/jni-guide-on-android.html"/>
        <published>2014-11-27T16:06:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2014/11/jni-guide-on-android.html</id>
        <category scheme="http://terryoy.github.io/tag/#cpp" term="cpp" label="cpp" />
        <category scheme="http://terryoy.github.io/tag/#android" term="android" label="android" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Begin a JNI Project</h3>
<p>To create a JNI project in ADT, first is to setup NDK support for the workspace.  Open <em>&ldquo;Preferences&rdquo; -&gt; &ldquo;Android&rdquo; -&gt; &ldquo;NDK&rdquo;</em>, set the <em>NDK Locaiton</em> to your ndk root.</p>
<p>After you create a new Android project, native support is not yet enabled. Right click on the project, and select <em>&ldquo;Android Tools&rdquo; -&gt; &ldquo;Add Native Support&hellip;&rdquo;</em>. It prompts a &ldquo;Library Name&rdquo; input for you to type in the native library name you want to use. On succeed, it will generate a &ldquo;jni&rdquo; folders containing a &ldquo;.cpp&rdquo; file and a &ldquo;Android.mk&rdquo; makefile.</p>
<p><em>***a small hint on creating project: if you created an project without an initial activity (which it&#39;s possible when your only interest is in building an native app), you need to specify your MainActivity in the AndroidManifest.xml. On the &ldquo;Application&rdquo; sheet in Manifest editor, first add a &ldquo;Activity&rdquo; node, which connects to your Activity subclass; then create an &ldquo;Intent Filter&rdquo; node, and then an &ldquo;Action&rdquo; node and a &ldquo;Category&rdquo; node under the IntentFilter node. The Action node selects &ldquo;android.intent.action.MAIN&rdquo;, and the Category node selects &ldquo;android.intent.category.LAUNCHER&rdquo;.</em></p>

<h3 id="toc_1">2. Information on Android.mk</h3>
<p>The syntax of Android.mk is based on <a href="http://www.gnu.org/software/make/">GNU Make</a>. This file is only a snippet of the whole make process. The whole process also includes an Application.mk and a Android.mk provided by the NDK build system. </p>
<div class="highlight"><pre><span class="c"># my-dir is a macro defined by Android, which provides the path for where the make file is.</span>
<span class="nv">LOCAL_PATH</span> <span class="o">:=</span> <span class="k">$(</span>call my-dir<span class="k">)</span>

<span class="c"># CLEAR_VARS clears all the &quot;LOCAL_*&quot; variables except &quot;LOCAL_PATH&quot;</span>
<span class="cp">include $(CLEAR_VARS)</span>

<span class="nv">LOCAL_MODULE</span>    <span class="o">:=</span> jnidemo <span class="c"># provide the lib name (e.g. libjnidemo.so), and also the name to load in Java Class</span>
<span class="nv">LOCAL_SRC_FILES</span> <span class="o">:=</span> jnidemo.cpp <span class="c"># a source file list to compile and build into the library</span>

<span class="c">#LOCAL_SHARE_LIBRARIES := avilib # (optional 1): if you depends on other libraries, you can load it here</span>

<span class="c"># build the library</span>
<span class="cp">include $(BUILD_SHARED_LIBRARY)</span>

<span class="c">#$(call import-module,transcode/avilib) # (optional 2): put the 3rd party library outside project folder, under NDK_MODULE_PATH and import it using this line</span>
</pre></div>
<p><em>* If you have more than one library to build, just duplicate the part from &ldquo;include $(CLEAR_VARS)&rdquo; to &ldquo;include $(BUILD_SHARED_LIBRARY)&rdquo;.</em></p>
<p><em>* NDK build also supports executable build, only by replacing &ldquo;include $(BUILD_SHARED_LIBRARY)&rdquo; with &ldquo;include $(BUILD_EXECUTABLE)&rdquo;, the output will also be in libs/<arch> folder, but will not be packed into an .apk file.</em></p>
<p>_* If you need to trigger build under command line, go to the project root folder, and type <code>ndk-build</code> to build.</p>

<h3 id="toc_2">3. Import JNI library in Java Class</h3>
<p>Use the code below to load a library in the Java class.</p>
<div class="highlight"><pre><span class="kd">static</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">&quot;jnidemo&quot;</span><span class="o">);</span>
    <span class="c1">// System.load(&quot;c:/path/to/library.so&quot;); // this is not recommended since it would be platform dependent</span>
<span class="o">}</span>
</pre></div>

<h3 id="toc_3">4. Working With Native Functions</h3>
<p>There are two sides of the JNI interface: Java calling C/C++, and C/C++ calling Java. In Java, you can call a native funciton implmeneted by a C/C++ shared library; and in C/C++, you might also need to trigger Java methods inside C/C++ code. So let&#39;s talk about both respectively.</p>

<h4 id="toc_4">4.1 Java Calling C/C++</h4>
<p>In a Java class, you can define a native method which will be implmemented by C/C++ code. In this case, you can call native C/C++ functions from Java.</p>
<div class="highlight"><pre><span class="n">Class</span> <span class="n">A</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">native</span> <span class="n">String</span> <span class="nf">stringFromJNI</span><span class="o">();</span> <span class="c1">// native method</span>

    <span class="kd">static</span> <span class="o">{</span> <span class="c1">// load the shared library that contains the native method</span>
        <span class="n">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">&quot;jnidemo&quot;</span><span class="o">);</span>
    <span class="o">}</span> 
<span class="o">}</span>
</pre></div>
<p>You can use <code>javah -classpath bin/classes com.teatime.jnidemo.A</code> to generate the C/C++ header for the java native methods. It will create a &ldquo;com_teatime_jnidemo_A.h&rdquo; file as below: </p>
<div class="highlight"><pre><span class="cm">/* DO NOT EDIT THIS FILE - it is machine generated */</span>
<span class="cp">#include &lt;jni.h&gt;</span>
<span class="cm">/* Header for class com_teatime_jnidemo_A */</span>

<span class="cp">#ifndef _Included_com_teatime_jnidemo_A</span>
<span class="cp">#define _Included_com_teatime_jnidemo_A</span>
<span class="cp">#ifdef __cplusplus</span>
<span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
<span class="cp">#endif</span>
<span class="cm">/*</span>
<span class="cm"> * Class:     com_teatime_jnidemo_A</span>
<span class="cm"> * Method:    stringFromJNI</span>
<span class="cm"> * Signature: ()Ljava/lang/String;</span>
<span class="cm"> */</span>
<span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span> <span class="n">Java_com_teatime_jnidemo_A_stringFromJNI</span>
  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">);</span>

<span class="cp">#ifdef __cplusplus</span>
<span class="p">}</span>
<span class="cp">#endif</span>
<span class="cp">#endif</span>
</pre></div>
<p>Here you can see the Java method signature is converted to something have similar meaning: &ldquo;jstring&rdquo; means the Java String class, &ldquo;jobject&rdquo; is for the object instance which calls  this method. </p>

<hr/>
<p>However, you don&#39;t really want to type this command to generate every file you make, so a more convenient way is to setup a &ldquo;Run -&gt; External Tools -&gt; External Tools Configurations&rdquo; to trigger it inside Eclipse IDE. The configuration will be like below: (note that the path segment is joined by &ldquo;:&rdquo; on mac/linux and &ldquo;;&rdquo; on windows)</p>

<pre><code>Name: Generate C/C++ Header File
Location: ${system_path:javah}
Working Directory: ${project_loc}/jni
Arguments: -classpath &quot;${project_classpath}:${env_var:ANDROID_SDK_HOME}/platforms/android-15/android.jar&quot; ${java_type_name}
Refresh -&gt; Refresh Resources upon completions; The project containing the selected resource
Common -&gt; Display in favourites menu -&gt; External Tools</code></pre>

<hr/>
<p>There are type mappings betwine Java and C as below. For more information you could check out the JNI document <a href="http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/types.html">here</a>.</p>
<p><img src="http://terryoy-github.u.qiniudn.com/blog/2014/jni_primitive_types.png" alt="Primitive Types"/>
<img src="http://terryoy-github.u.qiniudn.com/blog/2014/jni_reference_types.gif" alt="Reference Types"/></p>

<h4 id="toc_5">4.2 C/C++ Calling Java</h4>
<p>In C/C++, you need to include <code>jni.h</code> and use <code>JNIEnv</code> to work with the Java methods in JVM. The JNIEnv object is to keep everything consistent inside JVM. </p>

<blockquote>
<p>typedef const struct JNINativeInterface *JNIEnv; </p>
</blockquote>
<p>There&#39;s a list of functions for JNIEnv object you can check out <a href="http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/functions.html#wp23720">here</a></p>
<p>For primitive types, you can  use directly convert to the c types directly. For  Here are some examples:</p>
<div class="highlight"><pre><span class="c1">// primitive types</span>
<span class="kt">int</span> <span class="n">cvalue</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="n">jint</span> <span class="n">value</span> <span class="o">=</span> <span class="n">cvalue</span><span class="p">;</span>

<span class="c1">// create Java string</span>
<span class="n">jstring</span> <span class="n">javaString</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&quot;Hello World!&quot;</span><span class="p">);</span>
<span class="c1">// convert Java string to C string</span>
<span class="k">const</span> <span class="n">jbyte</span> <span class="o">*</span><span class="n">str</span><span class="p">;</span>
<span class="n">jboolean</span> <span class="n">isCopy</span><span class="p">;</span>
<span class="n">str</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaString</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">isCopy</span><span class="p">);</span> <span class="c1">// isCopy tells the function to get a copy or return the original string</span>
<span class="c1">// release string after GetStringChars/GetStringUTFChars</span>
<span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaString</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>

<span class="c1">// operating array</span>
<span class="n">jintArray</span> <span class="n">javaArray</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewIntArray</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="n">javaArray</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// this only creates a java array</span>
    <span class="c1">// approach 1: you can ask for a C array pointer to operate on it</span>
    <span class="n">jint</span><span class="o">*</span> <span class="n">nativeDirectArray</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntArrayElements</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaArray</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">isCopy</span><span class="p">);</span> <span class="c1">// isCopy tells the function to get a copy or the original</span>
    <span class="c1">// ... do something</span>
    <span class="c1">// release the pointer ref, otherwise will cause memory leak</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseIntArrayElements</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaArray</span><span class="p">,</span> <span class="n">nativeDirectArray</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// last param can be: 0, JNI_COMMIT, JNI_ABORT</span>
    <span class="c1">// 0: apply the content and release the native array</span>
    <span class="c1">// JNI_COMMIT: apply the content, don&#39;t release the native array</span>
    <span class="c1">// JNI_ABORT: don&#39;t apply the content, but release the array</span>

    <span class="c1">// aproach 2: work with a local array, and submit changes when needed</span>
    <span class="n">jint</span> <span class="n">nativeArray</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntArrayRegion</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaArray</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">nativeArray</span><span class="p">);</span> <span class="c1">// copy the content to nativeArray</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">setIntArrayRegion</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaArray</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">nativeArray</span><span class="p">);</span> <span class="c1">// apply the changes back to the original array</span>
<span class="p">}</span>

<span class="c1">// calling a method</span>
<span class="n">jmethodID</span> <span class="n">isntanceMethodId</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetMethodID</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">clazz</span><span class="p">,</span> <span class="s">&quot;instanceMethod&quot;</span><span class="p">,</span> <span class="s">&quot;()Ljava/lang/String;&quot;</span><span class="p">);</span>
<span class="n">jstring</span> <span class="n">stringValue</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">CallStringMethod</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="n">instanceMethodId</span><span class="p">);</span>
</pre></div>
<p>Often you will need to checkout the method signature of the Java class, so that you can lookup the method in JNI interface. Here is a small trick to print the method signature in JNI style.</p>
<div class="highlight"><pre><span class="nv">$ </span><span class="nb">cd </span>bin/classes
<span class="nv">$ </span>javap -s com.jnidemo.MyJNIClass
</pre></div>

<h3 id="toc_6">5. References</h3>
<p>Best Practices for using Java Native Interface: <a href="http://www.ibm.com/developerworks/library/j-jni/">http://www.ibm.com/developerworks/library/j-jni/</a> <br/>
JNI Documentation: <a href="http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/jniTOC.html">http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/jniTOC.html</a> <br/></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Finding Information for C/C++ Library on Linux]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/10/finding-information-linux-c-library.html"/>
        <published>2014-10-30T09:38:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2014/10/finding-information-linux-c-library.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#programming" term="programming" label="programming" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Developing on Linux often needs shared libraries most of the time. Below is a few references for finding the information about the libraries you are dealing with.</p>

<h3 id="toc_0">1. Naming Convention</h3>
<p>All C standard libraries on linux has the name convention <em>&ldquo;lib<strong>xxx</strong>&rdquo;</em>. If you search packages of a library, you can use the (debian) command below to look for it:</p>
<div class="highlight"><pre><span class="nv">$ </span>apt-cache search libxxx
</pre></div>

<h3 id="toc_1">2. Library Packages</h3>
<p>Usually, there are three packages of a library you could deal with. </p>

<ul>
<li>libxxx - this is the binary package of the shared library, usually has a &ldquo;lib<name>.so.<version>&rdquo; file on the path /usr/lib/ or /usr/local/lib. It is also needed at runtime.</li>
<li>libxxx-dev - this is the package which enables you to compile and link the library.</li>
<li>libxxx-dbg - this is the package which contains the debug symbols for debugging the program. where the files are usually installed at &ldquo;/usr/lib/debug/&rdquo;.</li>
</ul>
<p>If you want to know what files are installed on you system of a package, below are a few commands to do so:</p>
<div class="highlight"><pre><span class="nv">$ </span>dpkg-query -L &lt;package_name&gt;
<span class="nv">$ </span>dpkg-query -c &lt;.deb_file&gt;

<span class="c"># if you want to check files without installing the package</span>
<span class="c"># use the apt-file program(it will cache the file lists of all packages)</span>
<span class="nv">$ </span>apt-file update
<span class="nv">$ </span>apt-file list &lt;package_name&gt;
</pre></div>

<h3 id="toc_2">3. List Libraries on Your System</h3>
<p>Below command can list all the share libraries and their locations, so you could whether a libray is installed and registered on which path.</p>
<div class="highlight"><pre><span class="nv">$ </span>ldconfig -p

<span class="c"># find a library(SDL) for example</span>
<span class="nv">$ </span>ldconfig -p | grep -i sdl
</pre></div>
<p>For the <code>ld</code> program, it searches &ldquo;/usr/lib/&rdquo; for libraries by default, but it also include the paths defined in &ldquo;/etc/ld.so.conf&rdquo; and &ldquo;/etc/ld.so.conf.d/&rdquo;.</p>

<h3 id="toc_3">4. Checking The Information of Library Files</h3>
<p>A library usually contains two parts: static(.a) and shared(.so). You can check the both parts with the commands below:</p>
<div class="highlight"><pre><span class="c"># listing object files in static (archive) library</span>
<span class="nv">$ </span>ar tf /usr/lib/i386-linux-gnu/libSDL2.a
SDL.o
SDL_assert.o
SDL_error.o
SDL_hints.o
SDL_log.o
...

<span class="c"># listing symbols in object files(.o), archive library(.a), and shared library(.so)</span>
<span class="nv">$ </span>nm object.o
<span class="nv">$ </span>nm lib.a
<span class="nv">$ </span>nm -D lib.so 
<span class="nv">$ </span>nm --dynamic lib.so
</pre></div>

<h3 id="toc_4">5. Development Reference</h3>
<p>Usually the &ldquo;-dev&rdquo; package contains some documentation or example files under path &ldquo;/usr/share/doc/lib<name>-dev/&rdquo;. It is very useful to checkout these materials locally. For examples:</p>
<div class="highlight"><pre><span class="c"># open the documentation home page(xdg-open is a general command to open file, you can replace it with &quot;iceaweasel&quot; etc.)</span>
<span class="nv">$ </span>xdg-open /usr/share/doc/libusb-dev/html/index.html

<span class="c"># extract the examples </span>
<span class="nv">$ </span>tar -zxvf /usr/share/doc/libsdl2-dev/examples/examples.tar.gz
</pre></div>

<h3 id="toc_5">6. More Information</h3>
<p>Static, Shared Dynamic and Loadable Linux Libraries <br/>
<a href="http://www.yolinux.com/TUTORIALS/LibraryArchives-StaticAndDynamic.html">http://www.yolinux.com/TUTORIALS/LibraryArchives-StaticAndDynamic.html</a><br/>
Program Library HOWTO <br/>
<a href="http://tldp.org/HOWTO/Program-Library-HOWTO/index.html">http://tldp.org/HOWTO/Program-Library-HOWTO/index.html</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[A Guide of Common Git Tasks]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/10/common-git-commands.html"/>
        <published>2014-10-22T20:57:00+08:00</published>
        <updated>2016-06-21T17:53:51+08:00</updated>
        <id>http://terryoy.github.io/2014/10/common-git-commands.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#programming" term="programming" label="programming" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Initialize a Git project</h3>
<p>Usually, starting a git project include&#39;s the following steps:</p>

<ul>
<li>initialize local repository</li>
<li>add a remote repository from server</li>
<li>set up-stream and push to remote repository</li>
</ul>
<div class="highlight"><pre><span class="c"># initialize a repository</span>
<span class="nv">$ </span>git init

<span class="c"># set a new remote</span>
<span class="nv">$ </span>git remote add origin https://github.com/user/repo.git

<span class="c"># verify new remote</span>
<span class="nv">$ </span>git remote -v

<span class="c"># (you might need to pull origin/master first if it&#39;s not empty)</span>
<span class="nv">$ </span>git pull origin master

<span class="c"># push to remote repository</span>
<span class="nv">$ </span>git push --set-upstream origin master
</pre></div>

<h3 id="toc_1">2. Correct mistakes on the repository</h3>
<p>Usually there are some mistakes we will commit to git repository, so here are a few tips to correct the mistakes:</p>

<ul>
<li>Change file name/path</li>
<li>Unstage files</li>
<li>Remove sensitive data, or binary data in the history </li>
</ul>
<div class="highlight"><pre><span class="c"># change or delete files in the current version</span>
<span class="c"># -- you should not simple use the common shell command &quot;mv&quot; and &quot;rm&quot;, </span>
<span class="c"># -- because that will lose the tracking. You should use with git instead</span>
<span class="nv">$ </span>git rm &lt;somefile&gt;
<span class="nv">$ </span>git mv &lt;somefile&gt; &lt;otherfile&gt;


<span class="c"># Unstage files</span>
<span class="c"># -- usually when you execute &quot;git status&quot;, it will prompt you how to unstage files (e.g. &#39;(use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#39;)</span>
<span class="nv">$ </span>git reset HEAD &lt;file&gt;...
<span class="c"># -- (or, in some cases)</span>
<span class="nv">$ </span>git rm --cached &lt;file&gt;

<span class="c"># Remove sensitive data</span>
<span class="c"># -- This one is more difficult. </span>
<span class="c"># check this link: https://help.github.com/articles/remove-sensitive-data/</span>
</pre></div>

<h3 id="toc_2">3. Using Proxy to work with server</h3>
<p>You can use openssh to create an ssh tunnel with a remote server, and then communicate with git server with this tunnel proxy.</p>
<div class="highlight"><pre><span class="c"># Socks</span>
ssh -D &lt;local_proxy_port&gt; &lt;remote_user&gt;@&lt;remote_server&gt; -p &lt;remote_ssh_port&gt;
<span class="c"># HTTPS for one site:</span>
ssh -L &lt;local_proxy_port&gt;:&lt;destination_host&gt;:&lt;destination_port&gt; &lt;ssh_user&gt;@&lt;ssh_server&gt; -p &lt;ssh_port&gt;
</pre></div>
<p>Using git with proxies:</p>
<div class="highlight"><pre><span class="c"># proxy for https</span>
<span class="nb">export </span><span class="nv">https_proxy</span><span class="o">=</span>&lt;http_proxy_host&gt;:&lt;http_proxy_port&gt;
<span class="c"># socks4 proxy for http</span>
<span class="nb">export </span><span class="nv">http_proxy</span><span class="o">=</span>socks://&lt;socks4_proxy_host&gt;:&lt;socks4_proxy_port&gt;
<span class="c"># socks5 proxy for https</span>
<span class="nb">export </span><span class="nv">https_proxy</span><span class="o">=</span>socks5://&lt;socks5_proxy_host&gt;:&lt;socks5_proxy_port&gt;
</pre></div>
<p>* If in some blocked environment that can only access HTTP/HTTPS, you can consider changing your ssh service port to 80/443.</p>

<h3 id="toc_3">4. Create a private Git repo on your SSH server</h3>
<p>(reference: <a href="http://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server">git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server</a>)</p>
<div class="highlight"><pre><span class="c"># create a git user for remote access(optional)</span>
<span class="nv">$ </span>sudo adduser git
<span class="nv">$ </span><span class="nb">cd</span> /home/git/ <span class="o">&amp;&amp;</span> mkdir .ssh <span class="o">&amp;&amp;</span> chmod 700 .ssh
<span class="nv">$ </span>touch .ssh/authorized_keys <span class="o">&amp;&amp;</span> chmod 600 .ssh/authorized_keys
<span class="nv">$ </span>cat /tmp/id_rsa.someone.pub &gt;&gt; .ssh/authorized_keys

<span class="c"># create a server repo with </span>
<span class="nv">$ </span>mkdir -p /opt/git/somerepo.git
<span class="nv">$ </span><span class="nb">cd</span> /opt/git/somerepo.git
<span class="nv">$ </span>git init --bare

<span class="c"># create a local git repo(on your PC) and push to server repo</span>
<span class="nv">$ </span><span class="nb">cd </span>myproject
<span class="nv">$ </span>git init
<span class="nv">$ </span>git add . <span class="o">&amp;&amp;</span> git commit -m <span class="s2">&quot;initial commit&quot;</span>
<span class="nv">$ </span>git remote add origin git@gitserver:/opt/git/somerepo.git
<span class="nv">$ </span>git push origin master
</pre></div>

<h3 id="toc_4">5. Tagging</h3>
<div class="highlight"><pre><span class="c"># list your tags</span>
<span class="nv">$ </span>git tag
<span class="c"># search for tags</span>
<span class="nv">$ </span>git tag -l <span class="s2">&quot;v1.8.*&quot;</span>

<span class="c"># create a tag with annotation</span>
<span class="nv">$ </span>git tag -a v1.0.1 -m <span class="s2">&quot;a new tag for v1.0.1&quot;</span>
<span class="c"># create a tag for a previous commit(for example, 902acd...)</span>
<span class="nv">$ </span>git tag -a v1.0.0 902acd

<span class="c"># show tag info</span>
<span class="nv">$ </span>git show v1.0.1

<span class="c"># push a tag to remote server</span>
<span class="nv">$ </span>git push origin v1.0.1
<span class="c"># or push tags</span>
<span class="nv">$ </span>git push origin --tags 

<span class="c"># You can also checkout the tags like the same way you checkout branches</span>
<span class="nv">$ </span>git checkout -b version2 v2.0.0
</pre></div>

<h3 id="toc_5">6. Amend Logs</h3>
<div class="highlight"><pre><span class="c"># amend log for the last commit</span>
<span class="nv">$ </span>git commit --amend
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Linux C Learning (Part 1)]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/08/learning-linux-c-part-1.html"/>
        <published>2014-08-20T23:34:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2014/08/learning-linux-c-part-1.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#programming" term="programming" label="programming" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Below is some study notes for Linux C Programming from a web course. It can serve as a coding reference in the future, or a walkthrough summary of the study. As I already have the knowledge of C Programming Language, so I will not cover the language detail here, but only the development environment under Linux.</p>

<h3 id="toc_0">1. <strong>gcc</strong> and <strong>gdb</strong></h3>
<p>There are several steps for the <strong>gcc</strong> compiler to compile a source file into a executable program. It can be set to the step output with some parameter to gcc, so you can checkout their result in file.</p>
<div class="highlight"><pre><span class="c"># Preprocessor: This is to remove comments, replace marcos(#define), and headers(#include)</span>
<span class="nv">$ </span>gcc -E test.c -o test.i

<span class="c"># (+)Compile: This compile the source code into assembly code. Different architecture has different assembly language spec</span>
<span class="nv">$ </span>gcc -S test.c -o test.s

<span class="c"># (+)Assemble: this translate assembly code into binary object. You can check the file with &quot;file test.o&quot; to see the format as a &quot;object file&quot; or a &quot;ELF LSB relocatable&quot;, and the architecture of the platform(x64, etc.)</span>
<span class="nv">$ </span>gcc -c test.c -o test.o

<span class="c"># (+)Link: This generate the final executable</span>
<span class="nv">$ </span>gcc test.c -o <span class="nb">test</span>
</pre></div>
<p>There are other useful parameters of gcc for specific purpose, for example, optimization, or debugging.</p>

<ul>
<li>&ldquo;-O[level]&rdquo;, optimzation level, (0,1,2,3)</li>
<li>&ldquo;-g&rdquo;, generate debug info, gdb needed</li>
<li>&ldquo;-Wall&rdquo;, enable all warnings and errors</li>
<li>&ldquo;-Werror&rdquo;, enable errors</li>
<li>&ldquo;-D&rdquo;, define macro in command line</li>
<li>&ldquo;-I&rdquo;, set the location of headers</li>
<li>&ldquo;-std=C99&rdquo;, use C99 standard</li>
</ul>
<p>The <strong>gdb</strong> debugging tool can be used to trace the program with some useful commands:</p>

<ul>
<li>&ldquo;l&rdquo;, list source code with line numbers</li>
<li>&ldquo;n&rdquo;, proceed next line</li>
<li>&ldquo;b [line number]&rdquo;, set a breakpoint at the code with the line number</li>
<li>&ldquo;c&rdquo;, continue running until finish or meets the next break point</li>
<li>&ldquo;p [variable]&rdquo;, print the instant value of a variable</li>
</ul>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Creating A New Database in MySql]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/06/create-database-mysql.html"/>
        <published>2014-06-04T14:40:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2014/06/create-database-mysql.html</id>
        <category scheme="http://terryoy.github.io/tag/#database" term="database" label="database" />
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Create the database</h3>
<div class="highlight"><pre><span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">mytestdb</span><span class="p">;</span>
<span class="k">show</span> <span class="n">databases</span><span class="p">;</span>
</pre></div>

<h3 id="toc_1">2. Create a user and grant access</h3>
<div class="highlight"><pre><span class="k">CREATE</span> <span class="k">USER</span> <span class="s1">&#39;myuser&#39;</span><span class="o">@</span><span class="s1">&#39;localhost&#39;</span> <span class="n">IDENTIFIED</span> <span class="k">BY</span> <span class="s1">&#39;my_password&#39;</span><span class="p">;</span>

<span class="k">GRANT</span> <span class="k">ALL</span> <span class="k">PRIVILEGES</span> <span class="k">ON</span> <span class="n">mytestdb</span><span class="p">.</span><span class="o">*</span> <span class="k">TO</span> <span class="s1">&#39;myuser&#39;</span><span class="o">@</span><span class="s1">&#39;localhost&#39;</span><span class="p">;</span> 

<span class="c1">-- or alternatively, with more powerful access</span>
<span class="k">GRANT</span> <span class="k">ALL</span> <span class="k">PRIVILEGES</span> <span class="k">ON</span> <span class="n">mytestdb</span><span class="p">.</span><span class="o">*</span> <span class="k">TO</span> <span class="s1">&#39;admin&#39;</span><span class="o">@</span><span class="s1">&#39;%&#39;</span> <span class="k">WITH</span> <span class="k">GRANT</span> <span class="k">OPTION</span><span class="p">;</span>
</pre></div>

<h3 id="toc_2">3. Login with the User</h3>
<div class="highlight"><pre>mysql -u myuser -p mytestdb
</pre></div>

<h3 id="toc_3">4. Import a SQL dump into database</h3>
<div class="highlight"><pre><span class="n">USE</span> <span class="n">mytestdb</span><span class="p">;</span>
<span class="k">source</span> <span class="n">db_dump</span><span class="p">.</span><span class="k">sql</span><span class="p">;</span>
</pre></div>
<p>Or you can use a command line:</p>
<div class="highlight"><pre>mysql -u dbuser -p <span class="o">[</span>-h host<span class="o">]</span> dbname &lt; dbdump.sql
</pre></div>
<p>Exporting in command line is similar, using &ldquo;mysqldump&rdquo; command:</p>
<div class="highlight"><pre>mysqldump -u dbuser -p dbname &gt; dbdump.sql
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Use Ctypes to Wrap C Libraries in Python]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/03/using-ctypes-to-wrap-c-library.html"/>
        <published>2014-03-23T07:57:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2014/03/using-ctypes-to-wrap-c-library.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>In Linux, many libraries are provided in C dll with headers. It is not easy to try with the features if you&#39;re a Python programmer, unless you know how to work with C library i Python.</p>
<p>There is a tool to do it, which is <em><strong>ctypes</strong></em>. You can operate on data types, structs, pointers and functions with it. Now here is a brief guide on how to do it. <a href="http://stackoverflow.com/questions/1942298/wrapping-a-c-library-in-python-c-cython-or-ctypes">Here</a> is also a comparison of ctypes with other solutions.</p>

<h3 id="toc_0">1. Loading Libraries</h3>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">ctypes</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">CDLL</span><span class="p">(</span><span class="s">&#39;libc.so.6&#39;</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span><span class="o">.</span><span class="n">rand</span><span class="p">()</span>
<span class="mi">1804289383</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span><span class="o">.</span><span class="n">atoi</span><span class="p">(</span><span class="s">&quot;12345&quot;</span><span class="p">)</span>
<span class="mi">12345</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libtest</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">CDLL</span><span class="p">(</span><span class="s">&#39;./test.so&#39;</span><span class="p">)</span> <span class="c"># you can also load the shared library by location, but you cannot load static library</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">ctypes.util</span> <span class="kn">import</span> <span class="n">find_library</span> <span class="c"># if you need to find the library name</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">find_library</span><span class="p">(</span><span class="s">&#39;c&#39;</span><span class="p">)</span>
<span class="s">&#39;libc.so.6&#39;</span>
</pre></div>
<p>The &ldquo;ctypes.CDLL()&rdquo; method will return a class that wraps a Standard C library. Alternatively, there is a &ldquo;ctypes.WinDLL()&rdquo; method that wraps a Windows stdcall library.</p>
<p>Ctypes assumes that all methods accept &ldquo;int&rdquo; or &ldquo;char*&rdquo; as parameters and return &ldquo;int&rdquo;, in other cases it doesn&#39;t work properly. So we&#39;ll need to define some attributes for the functions to fix that.</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span><span class="o">.</span><span class="n">atof</span><span class="p">(</span><span class="s">&quot;12345.123&quot;</span><span class="p">)</span>
<span class="mi">531599</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span><span class="o">.</span><span class="n">atof</span><span class="o">.</span><span class="n">restype</span><span class="o">=</span><span class="n">ctypes</span><span class="o">.</span><span class="n">c_double</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span><span class="o">.</span><span class="n">atof</span><span class="p">(</span><span class="s">&quot;12345.123&quot;</span><span class="p">)</span>
<span class="mf">12345.123</span>
</pre></div>
<p>So every function in the library you can have three attributes to handle that: </p>

<ul>
<li>  <strong><em>func</em>.argtypes</strong> = [ ]       - a sequence of arguments </li>
<li>  <strong><em>func</em>.restype</strong> = xxx        - the type of return value </li>
<li>  <strong><em>func</em>.errcheck</strong> = method(result, func, args)        - a method that manipulates the <em>result</em>(return value) of the executed <em>func</em>, and also passed with the original <em>args</em> of this execution. </li>
</ul>
<p><a href="http://docs.python.org/2/library/ctypes.html#fundamental-data-types">Here</a> is a list of fundamental data types that you could use in <em>argtypes</em> and <em>restype</em>.</p>

<h3 id="toc_1">2. Structures and Pointers</h3>
<p>Since we&#39;ll need to define the parameters of the C functions, we need to have a way to work with structure and pointers.</p>
<p>With Ctypes, we can define a structure class by deriving from <em>ctype.Structure</em>.</p>
<div class="highlight"><pre><span class="c"># in C we have this structure:</span>
<span class="c">#</span>
<span class="c"># struct Point {</span>
<span class="c">#     double x, y;</span>
<span class="c"># }</span>
<span class="c">#</span>

<span class="c"># in Python we create this class to represent a structure</span>
<span class="k">class</span> <span class="nc">Point</span><span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">Structure</span><span class="p">):</span>
    <span class="n">_fields_</span> <span class="o">=</span> <span class="p">[(</span><span class="s">&#39;x&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_double</span><span class="p">),</span>
        <span class="p">(</span><span class="s">&#39;y&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_double</span><span class="p">)];</span>
</pre></div>
<p>If you want to define an array with ctypes, you can simply use the mutiply method:</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">int_arr</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="o">*</span><span class="mi">4</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">int_arr</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">c_long_Array_4</span><span class="s">&#39;&gt;</span>
</pre></div>
<p>We could use _ctypes.POINTER() to define the pointer type of ctype types(fundamental types and structures).</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">type_int_p</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">POINTER</span><span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">)</span> <span class="c"># type of a pointer</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">type_int_p</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">LP_c_long</span><span class="s">&#39;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">type_int_pp</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">POINTER</span><span class="p">(</span><span class="n">int_p</span><span class="p">)</span> <span class="c"># type of a pointer of the integer pointer</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">type_int_pp</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">LP_LP_c_long</span><span class="s">&#39;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">type_point_p</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">POINTER</span><span class="p">(</span><span class="n">Point</span><span class="p">)</span> <span class="c"># type of a pointer of the structure Point above</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">type_point_p</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">LP_Point</span><span class="s">&#39;&gt;</span>
</pre></div>

<h3 id="toc_2">3. Initialize Variables and Pass Arguments to C</h3>
<p>The ctypes data types all have a kind of construction method to initialize variables with values. The instance will be a ctype object with the respective value as defined in C.</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">ival</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>    <span class="c"># integer value</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ival</span>
<span class="n">c_long</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ival</span><span class="o">.</span><span class="n">value</span>      <span class="c"># you can convert it&#39;s value to a python value by the &quot;value&quot; attribute</span>
<span class="mi">100</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">dval</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_double</span><span class="p">(</span><span class="mf">200.25</span><span class="p">)</span>  <span class="c"># double value</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">dval</span>
<span class="n">c_double</span><span class="p">(</span><span class="mf">200.25</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">dval</span><span class="o">.</span><span class="n">value</span>
<span class="mf">200.25</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">sval</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_char_p</span><span class="p">(</span><span class="s">&quot;Hello, world!&quot;</span><span class="p">)</span>     <span class="c"># string value</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">sval</span>    <span class="c"># you can see the value is representing a pointer address instead of string</span>
<span class="n">c_char_p</span><span class="p">(</span><span class="mi">3071487276</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">sval</span><span class="o">.</span><span class="n">value</span>
<span class="s">&#39;Hello, world!&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">sval</span><span class="p">)</span> <span class="c"># but it can be printed as string with &quot;printf&quot; in C</span>
<span class="n">Hello</span><span class="p">,</span> <span class="n">world</span><span class="err">!</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ret</span>     <span class="c"># (the return value of &quot;printf&quot; is the printed string length)</span>
<span class="mi">13</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">structval</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>     <span class="c"># the Point structure defined above, you can also initialize like &quot;Point(0, 10)&quot;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">structval</span>
<span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">Point</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xb74466a4</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="n">structval</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">structval</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
<span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</pre></div>
<p>When we pass objects to functions, we can pass by <em>pointer</em>. In this case we&#39;ll have two companion methods <em>byref()</em> and <em>pointer()</em> that works with pointers. Also, for a pointer object you can access it&#39;s value by the <em>contents</em> attribute.
The <em>byref()</em> method create a parameter object of pointer, which you can only use in functions(notice the &ldquo;cparam&rdquo; object), while the <em>pointer()</em> method returns a pointer object which you can manipulate later.</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">intc</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">byref</span><span class="p">(</span><span class="n">intc</span><span class="p">)</span>      <span class="c"># the byref() returns a parameter object that only can be used as a foreign function&#39;s parameter(notice a &quot;cparam&quot; object). </span>
<span class="o">&lt;</span><span class="n">cparam</span> <span class="s">&#39;P&#39;</span> <span class="p">(</span><span class="mh">0xb7124a70</span><span class="p">)</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">intp</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">pointer</span><span class="p">(</span><span class="n">intc</span><span class="p">)</span>     <span class="c"># the pointer() returns a pointer object that you can further work with it</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">intp</span>
<span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">LP_c_long</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xb713392c</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">intp</span><span class="o">.</span><span class="n">contents</span>   <span class="c"># access the data to which the pointer points</span>
<span class="n">c_long</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">intp</span><span class="o">.</span><span class="n">contents</span><span class="o">.</span><span class="n">value</span>
<span class="mi">100</span>
</pre></div>

<h3 id="toc_3">4. Accessing Structure and Variables from C</h3>
<p>We need not only passing data to C functions, but also getting some pre-defined data structure or variables in C. So let&#39;s talk about a few things you want to import from C.</p>
<p>For <strong>enums</strong> in C, you&#39;ll need to define them again in Python. Since it&#39;s a representative of basic data types like integer, it&#39;s easy to act in the same way as in C.</p>
<p>For <strong>Structures</strong>, you&#39;ll need to define the similar classes, derived from ctypes. Structure, and declare the <code>_fields_</code> attributes as mentioned above in Section 2. After that, you can use <strong>in_dll()</strong> method to load an object within the library. (BTW, If you don&#39;t need to access the attribute of that object, it&#39;s not necessary to set the <code>_fields_</code> attribute.)</p>
<div class="highlight"><pre><span class="n">libaa</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">CDLL</span><span class="p">(</span><span class="s">&#39;libaa.so.1&#39;</span><span class="p">)</span> <span class="c"># the ascii-art lib</span>

<span class="k">class</span> <span class="nc">RenderSettings</span><span class="p">(</span><span class="n">Structure</span><span class="p">):</span>
    <span class="n">_pack_</span> <span class="o">=</span> <span class="mi">4</span>
    <span class="n">_fields_</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">(</span><span class="s">&#39;brightness&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">),</span>
        <span class="p">(</span><span class="s">&#39;contrast&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">),</span>
        <span class="p">(</span><span class="s">&#39;gamma&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_float</span><span class="p">),</span>
        <span class="p">(</span><span class="s">&#39;dithering_mode&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">),</span>
        <span class="p">(</span><span class="s">&#39;inversion&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">),</span>
        <span class="p">(</span><span class="s">&#39;random&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">),</span>
    <span class="p">]</span>

<span class="n">DEFAULT_RENDER_SETTINGS</span> <span class="o">=</span> <span class="n">RenderSettings</span><span class="o">.</span><span class="n">in_dll</span><span class="p">(</span><span class="n">libaa</span><span class="p">,</span> <span class="s">&#39;aa_defrenderparams&#39;</span><span class="p">)</span>
</pre></div>
<p>Sometimes the Structure object is a constant which you cannot change any value of it, it&#39;s better to have a <strong>clone()</strong> method to make a copy to chang it. The <strong>clone()</strong> method defined below can act as </p>
<div class="highlight"><pre><span class="k">class</span> <span class="nc">Structure</span><span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">Structure</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">clone</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">clone</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="bp">self</span><span class="p">)()</span>
        <span class="n">ctypes</span><span class="o">.</span><span class="n">pointer</span><span class="p">(</span><span class="n">clone</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span>
        <span class="k">return</span> <span class="n">clone</span>
</pre></div>
<p>For <strong>basic data types</strong>, it&#39;s the same way to use the in_dll() method in the simple types. (e.g. &ldquo;ctypes.c_int.in_dll(libaa, &#39;some_int&#39;)&rdquo;)</p>

<h3 id="toc_4">5. Playing with Functions</h3>
<p>In Section 1, we already talked about how to import the functions from C and use them. However there are a few things to remember. Below is an example of calling the functions. </p>

<ul>
<li>First, you should declare all the related types and structures in the function&#39;s arguments and return value. </li>
<li>Second, basic types can be auto converted into ctypes types, but for those are not, ensure they are in ctypes form.</li>
<li>Third, remember to use ctypes.pointer() or ctypes.byref() for passing the pointer arguments.</li>
</ul>
<div class="highlight"><pre><span class="c"># it&#39;s a good practice to declare the structures and the functions at first like in C </span>

<span class="c"># ... </span>
<span class="c"># declare Structures </span>
<span class="k">class</span> <span class="nc">Context</span><span class="p">(</span><span class="n">Structure</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="n">ContextPtr</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">POINTER</span><span class="p">(</span><span class="n">Context</span><span class="p">)</span>

<span class="c"># ... </span>
<span class="c"># declare functions</span>
<span class="n">aa_init</span> <span class="o">=</span> <span class="n">libaa</span><span class="o">.</span><span class="n">aa_init</span>
<span class="n">aa_init</span><span class="o">.</span><span class="n">argtypes</span> <span class="o">=</span> <span class="p">[</span><span class="n">DriverPtr</span><span class="p">,</span> <span class="n">HardwareSettingsPtr</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_void_p</span><span class="p">]</span> <span class="c"># parameters are (pointer of struct &quot;Driver&quot;, pointer of struct HardwareSetting, and a pointer of &quot;void&quot;)</span>
<span class="n">aa_init</span><span class="o">.</span><span class="n">restype</span> <span class="o">=</span> <span class="n">ContextPtr</span> 

<span class="n">aa_fastrender</span> <span class="o">=</span> <span class="n">libaa</span><span class="o">.</span><span class="n">aa_fastrender</span>
<span class="n">aa_fastrender</span><span class="o">.</span><span class="n">argtypes</span> <span class="o">=</span> <span class="p">[</span><span class="n">ContextPtr</span><span class="p">]</span> <span class="o">+</span> <span class="mi">4</span> <span class="o">*</span> <span class="p">[</span><span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">]</span> 

<span class="c"># calling aa_init() and aa_fastrender()</span>
<span class="n">context</span> <span class="o">=</span> <span class="n">aa_init</span><span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">pointer</span><span class="p">(</span><span class="n">aa_mem_d</span><span class="p">),</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">pointer</span><span class="p">(</span><span class="n">settings</span><span class="p">),</span> <span class="bp">None</span><span class="p">)</span>
<span class="c"># ...</span>
<span class="n">aa_fastrender</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span><span class="n">height</span><span class="p">)</span>
</pre></div>
<p>By now, you should have the knowledge to play with C libraries. Just start playing around with those libraries you can find in /usr/lib and /usr/include. Enjoy!</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[PostgesSQL 9 Administration QuickRef(1) - Exploring Database]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/03/postgresql-admin-quickref-part1-exploring-database.html"/>
        <published>2014-03-06T15:27:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2014/03/postgresql-admin-quickref-part1-exploring-database.html</id>
        <category scheme="http://terryoy.github.io/tag/#postgresql" term="postgresql" label="postgresql" />
        <category scheme="http://terryoy.github.io/tag/#database" term="database" label="database" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>The most cheat sheets or quick references I found are organized by knowledge domains, but I would rather like a quick reference organized by tasks. Thus I make this reference.</p>

<h1 id="toc_0">Part I: Exploring Database</h1>

<h3 id="toc_1">1. Basic Information</h3>
<p>Default location of data files (in debian/ubuntu): <code>/var/lib/postgresql/9.1/main/</code>
Data files for an instance:
    base        -   data directory for databases 
    global      -   database catalog tables(shared across databases)
    pg_clog - transaction status files
    pg_multixact    -   row-level lock status files
    pg_subtrans -   subtransaction status files 
    pg_tblspc       -   links to external tablespaces
    pg_twophase -   prepared transaction status
    pg_xlog     -   WAL(Write-Ahead Log) transaction log
Log files: <code>/var/log/postgresql/</code></p>
<p>PostgreSQL command line programs:</p>
<div class="highlight"><pre><span class="c"># check psql version</span>
<span class="nv">$ </span>psql --version
<span class="c"># check configuration variables</span>
<span class="nv">$ </span>pg_config
<span class="c"># run a single command</span>
<span class="nv">$ </span>psql -c <span class="s2">&quot;\d&quot;</span>
</pre></div>
<p>PSQL text client:</p>
<div class="highlight"><pre><span class="c1">-- line comment</span>
<span class="o">/</span> <span class="o">*</span><span class="n">multi</span><span class="o">-</span><span class="nb">line</span> <span class="k">comment</span><span class="o">*</span> <span class="o">/</span>
<span class="c1">-- check server version</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="k">version</span><span class="p">();</span>
<span class="go">-- output query result as one column per line</span>
<span class="gp">postgres=#</span> <span class="kp">\x</span>
</pre></div>

<h3 id="toc_2">2. Server Stats</h3>
<div class="highlight"><pre><span class="c"># list databases</span>
<span class="nv">$ </span>psql -l
<span class="c"># list tables in a database</span>
<span class="nv">$ </span>psql -c <span class="s2">&quot;\d&quot;</span> -d somedb
</pre></div>
<div class="highlight"><pre><span class="c1">-- check server uptime</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">date_trunc</span><span class="p">(</span><span class="s1">&#39;second&#39;</span><span class="p">,</span> <span class="k">current_timestamp</span> <span class="o">-</span> <span class="n">pg_postmaster_start_time</span><span class="p">())</span> <span class="k">as</span> <span class="n">uptime</span><span class="p">;</span>

<span class="go">-- list database names</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">datname</span> <span class="k">from</span> <span class="n">pg_database</span><span class="p">;</span>
<span class="go">-- list tables in databases;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">table_catalog</span><span class="p">,</span> <span class="n">table_schema</span><span class="p">,</span> <span class="n">table_name</span><span class="p">,</span> <span class="n">table_type</span> <span class="k">from</span> <span class="n">information_schema</span><span class="mf">.</span><span class="k">tables</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="kp">\dt+</span>

<span class="go">-- check database size</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_database_size</span><span class="p">(</span><span class="s1">&#39;somedb&#39;</span><span class="p">);</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_database_size</span><span class="p">(</span><span class="n">current_database</span><span class="p">());</span>
<span class="go">-- check table size</span>
<span class="gp">postgres=#</span> <span class="kp">\dt+</span> <span class="ss">some_table</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_relation_size</span><span class="p">(</span><span class="s1">&#39;some_table&#39;</span><span class="p">);</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_total_relation_size</span><span class="p">(</span><span class="s1">&#39;some_table&#39;</span><span class="p">);</span> <span class="c1">-- including indexes and other related space</span>
<span class="go">-- list table sizes in order</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">table_name</span><span class="p">,</span> <span class="n">pg_total_relation_size</span><span class="p">(</span><span class="n">table_name</span><span class="p">)</span> <span class="k">as</span> <span class="n">size</span>
<span class="k">FROM</span> <span class="n">information_schema</span><span class="mf">.</span><span class="k">tables</span> <span class="k">NOT</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;information_schema&#39;</span><span class="p">,</span> <span class="s1">&#39;pg_catalog&#39;</span><span class="p">)</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">size</span> <span class="k">DESC</span><span class="p">;</span>

<span class="go">-- check online users/clients</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span>  <span class="k">from</span> <span class="n">pg_stat_activity</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">datname</span><span class="p">,</span> <span class="n">usename</span><span class="p">,</span> <span class="n">client_addr</span><span class="p">,</span> <span class="n">client_port</span> <span class="k">FROM</span> <span class="n">pg_stat_activity</span><span class="p">;</span>

<span class="go">-- track user activities(like check user&#39;s pending query)</span>
<span class="gp">postgres=#</span> <span class="k">SET</span> <span class="n">track_activities</span> <span class="o">=</span> <span class="k">on</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">datname</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">current_query</span> 
<span class="k">FROM</span> <span class="n">pg_stat_activity</span> 
<span class="k">WHERE</span> <span class="n">current_query</span> <span class="o">!=</span> <span class="s1">&#39;&lt;IDLE&gt;&#39;</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="k">current_timestamp</span> <span class="o">-</span> <span class="n">query_start</span> <span class="k">as</span> <span class="n">runtime</span><span class="p">,</span> <span class="n">datname</span><span class="p">,</span> <span class="n">usename</span><span class="p">,</span> <span class="n">current_query</span> 
<span class="k">FROM</span> <span class="n">pg_stat_activity</span>
<span class="k">WHERE</span> <span class="n">current_query</span> <span class="o">!=</span> <span class="s1">&#39;&lt;IDLE&gt;&#39;</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="mf">1</span> <span class="k">DESC</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">datname</span><span class="p">,</span> <span class="n">usename</span><span class="p">,</span> <span class="n">current_query</span>
<span class="k">FROM</span> <span class="n">pg_stat_activity</span>
<span class="k">WHERE</span> <span class="n">waiting</span><span class="p">;</span>

<span class="go">-- check who is blocking the queries</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> 
    <span class="n">w</span><span class="mf">.</span><span class="n">current_query</span> <span class="k">as</span> <span class="n">waiting_query</span><span class="p">,</span>
    <span class="n">w</span><span class="mf">.</span><span class="n">procpid</span> <span class="k">as</span> <span class="n">w_pid</span><span class="p">,</span>
    <span class="n">w</span><span class="mf">.</span><span class="n">usename</span> <span class="k">as</span> <span class="n">w_user</span><span class="p">,</span>
    <span class="n">l</span><span class="mf">.</span><span class="n">current_query</span> <span class="k">as</span> <span class="n">locking_query</span><span class="p">,</span>
    <span class="n">l</span><span class="mf">.</span><span class="n">procpid</span> <span class="k">as</span> <span class="n">l_pid</span><span class="p">,</span>
    <span class="n">l</span><span class="mf">.</span><span class="n">usename</span> <span class="k">as</span> <span class="n">l_user</span><span class="p">,</span>
    <span class="n">t</span><span class="mf">.</span><span class="n">schemaname</span> <span class="o">||</span> <span class="s1">&#39;-&#39;</span> <span class="o">||</span> <span class="n">t</span><span class="mf">.</span><span class="n">relname</span> <span class="k">as</span> <span class="n">tablename</span>
<span class="k">FROM</span> <span class="n">pg_stat_activity</span> <span class="n">w</span>
<span class="k">JOIN</span> <span class="n">pg_locks</span> <span class="n">l1</span> <span class="k">ON</span> <span class="n">w</span><span class="mf">.</span><span class="n">procpid</span> <span class="o">=</span> <span class="n">l1</span><span class="mf">.</span><span class="n">pid</span> <span class="k">AND</span> <span class="k">NOT</span> <span class="n">l1</span><span class="mf">.</span><span class="k">granted</span>
<span class="k">JOIN</span> <span class="n">pg_locks</span> <span class="n">l2</span> <span class="k">ON</span> <span class="n">l1</span><span class="mf">.</span><span class="n">relation</span> <span class="o">=</span> <span class="n">l2</span><span class="mf">.</span><span class="n">relation</span> <span class="k">AND</span> <span class="n">l2</span><span class="mf">.</span><span class="k">granted</span>
<span class="k">JOIN</span> <span class="n">pg_stat_activity</span> <span class="n">l</span> <span class="k">on</span> <span class="n">l2</span><span class="mf">.</span><span class="n">pid</span> <span class="o">=</span> <span class="n">l</span><span class="mf">.</span><span class="n">procpid</span>
<span class="k">JOIN</span> <span class="n">pg_stat_user_tables</span> <span class="n">t</span> <span class="k">ON</span> <span class="n">l1</span><span class="mf">.</span><span class="n">relation</span> <span class="o">=</span> <span class="n">t</span><span class="mf">.</span><span class="n">relid</span>
<span class="k">WHERE</span> <span class="n">w</span><span class="mf">.</span><span class="n">waiting</span><span class="p">;</span>

<span class="go">-- cancel a query</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_cancel_backend</span><span class="p">(</span><span class="n">some_processid</span><span class="p">);</span>
<span class="go">-- killing a session</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_terminate_backend</span><span class="p">(</span><span class="n">some_processid</span><span class="p">);</span>
<span class="go">-- killing &quot;idle in transaction&quot;(e.g. leaving without ending the transaction) sessions</span>
<span class="go">-- (ps, you can schedule this script to be running every minute)</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_terminate_backend</span><span class="p">(</span><span class="n">procpid</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">pg_stat_activity</span>
<span class="k">WHERE</span> <span class="n">current_query</span> <span class="o">=</span> <span class="s1">&#39;&lt;IDLE&gt; in transaction&#39;</span>
    <span class="k">and</span> <span class="k">current_timestamp</span> <span class="o">-</span> <span class="n">query_start</span> <span class="o">&gt;</span> <span class="s1">&#39;10 min&#39;</span><span class="p">;</span>

<span class="go">-- collecting daily usage statistics</span>
<span class="gp">postgres=#</span> <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">backup_stat_user_tables</span> <span class="k">as</span> 
<span class="k">SELECT</span> <span class="k">current_timestamp</span> <span class="k">as</span> <span class="n">snaptime</span><span class="p">,</span>
<span class="k">FROM</span> <span class="n">pg_stat_user_tables</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">backup_stat_user_tablese</span>
<span class="k">SELECT</span>
</pre></div>

<h3 id="toc_3">3. Schema and Table</h3>
<div class="highlight"><pre><span class="c1">-- Show definition of a table(including References to this table)</span>
<span class="gp">postgres=#</span> <span class="kp">\d+</span> <span class="ss">some_table</span>
</pre></div>
<p>(to be continue)</p>
]]>
        </content>
    </entry>
</feed>