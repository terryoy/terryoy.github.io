<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Hello, World!</title>
    <link href="http://terryoy.github.io/feed.xml" rel="self" />
    <link href="http://terryoy.github.io/" />
    <updated>2017-05-27T23:47:55+08:00</updated>
    <id>http://terryoy.github.io/</id>
    <entry>
        <title type="html"><![CDATA[Python Function Decorators and The Use in Django]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2017/03/python-decorators-and-use-in-django.html"/>
        <published>2017-03-26T16:26:00+08:00</published>
        <updated>2017-03-30T21:35:51+08:00</updated>
        <id>http://terryoy.github.io/2017/03/python-decorators-and-use-in-django.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Basic of functions</h3>

<ul>
<li>Functions can be assign</li>
<li>Functions can be defined inside a function</li>
<li>Functions can be passed as a parameter and return as a returning value</li>
<li>Inner functions have access to the enclosing scope</li>
</ul>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;World&#39;</span><span class="p">):</span>
   <span class="k">print</span><span class="p">(</span><span class="s">&#39;Hello, {0}!&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">)))</span>

<span class="c"># assign</span>
<span class="n">bar</span> <span class="o">=</span> <span class="n">foo</span>
<span class="n">bar</span><span class="p">()</span>
<span class="c"># =&gt; Hello, world!</span>


<span class="c"># Use in parameter and return as result</span>
<span class="k">def</span> <span class="nf">greetings</span><span class="p">(</span><span class="n">call</span><span class="p">):</span>
    <span class="n">welcome</span> <span class="o">=</span> <span class="s">&#39;Welcome back!&#39;</span> <span class="c"># the enclosing scope to &quot;greeting_to&quot;</span>

    <span class="k">def</span> <span class="nf">greeting_to</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
        <span class="n">call</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">welcome</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">greeting_to</span>

<span class="n">greet</span> <span class="o">=</span> <span class="n">greetings</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span> <span class="c"># set bar as a greeting function</span>
<span class="n">greet</span><span class="p">(</span><span class="s">&#39;Terry&#39;</span><span class="p">)</span> <span class="c"># use the return function to generate greetings</span>
<span class="c"># =&gt; Hello, Terry!</span>
<span class="c"># =&gt; Welcome, back!</span>
</pre></div>

<h3 id="toc_1">2. Decorators</h3>
<p>A <strong>Function Decorator</strong> is a wrapper to an existing function, in which you can do some pre-process to the parameter or post-process to the returning value of the existing funciton.</p>
<p>The function decorator in Python must follows the below rules:</p>

<ul>
<li>It is a function that accept a function parameter(like saying <em>&ldquo;a decorator to which function&rdquo;</em>)</li>
<li>The decorator function must define and return a function as a result, so that the client gets something act similar to the existing function(act just like a function wrapper). </li>
<li>Do the customizing things inside the wrapper function, and call the existing function eventually</li>
</ul>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">greeting_decorator</span><span class="p">(</span><span class="n">call</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
        <span class="n">call</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Isn&#39;t it powerful?&quot;</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">wrapper</span>


<span class="c"># The decorator syntax</span>
<span class="nd">@greeting_decorator</span>
<span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Hello, {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>

<span class="n">greet</span><span class="p">(</span><span class="s">&#39;Terry&#39;</span><span class="p">)</span> <span class="c"># decorated function though the function name is the same as defined</span>
<span class="c"># =&gt; Hello, Terry </span>
<span class="c"># =&gt; Isn&#39;t it powerful?</span>
</pre></div>
<p>Decorators can be chained, and can also accept extra parameters when defining the customization to the function. However, decorators that accept parameters need to add another wrapper to the simple decorator.</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">room</span><span class="p">(</span><span class="n">room_name</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">decorator_wrapper</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="s">&quot;Enter room: {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">room_name</span><span class="p">))</span>
            <span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">wrapper</span>
    <span class="k">return</span> <span class="n">decorator_wrapper</span>

<span class="k">def</span> <span class="nf">leave_on_greet</span><span class="p">(</span><span class="n">greet_func</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">greeting_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
        <span class="n">greet_func</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Thanks, I&#39;m leaving&quot;</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">greeting_wrapper</span>


<span class="nd">@room</span><span class="p">(</span><span class="s">&#39;Matrix&#39;</span><span class="p">)</span>
<span class="nd">@leave_on_greet</span>
<span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Hello, {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>


<span class="n">greet</span><span class="p">(</span><span class="s">&#39;Terry&#39;</span><span class="p">)</span>
<span class="c"># =&gt; Enter room: Matrix</span>
<span class="c"># =&gt; Hello, Terry</span>
<span class="c"># =&gt; Thanks, I&#39;m leaving</span>
</pre></div>

<h3 id="toc_2">3. Example: using decorator in Django views</h3>
<p>It is very common that you want to write decorators for the request in views.py. For example, Django itself provides <a href="https://docs.djangoproject.com/en/1.10/topics/http/decorators/">a list of decorators</a> that you can use in certain scenarios, such as restricting HTTP methods, or cache controls. There are also other examples that could be consider: logging requests or checking auth tokens.</p>
<p>Here I write a very simple example that logs requests which a specified module name. We will have to use a new feature here that passes arguments between functions, because Django view methods can accept arguments defined in URL patterns.</p>
<div class="highlight"><pre><span class="c"># a request log decorator which you can define the module</span>
<span class="k">def</span> <span class="nf">log_request</span><span class="p">(</span><span class="n">module</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">decorator_wrapper</span><span class="p">(</span><span class="n">view_func</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="s">&#39;[{0}] {1} {2} {3}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">module</span><span class="p">,</span> <span class="n">request</span><span class="o">.</span><span class="n">get_host</span><span class="p">(),</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span><span class="p">,</span> <span class="n">request</span><span class="o">.</span><span class="n">get_full_path</span><span class="p">()))</span>
            <span class="k">return</span> <span class="n">view_func</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">func_wrapper</span>
    <span class="k">return</span> <span class="n">decorator_wrapper</span>


<span class="c"># use in views.py</span>
<span class="nd">@log_request</span><span class="p">(</span><span class="n">module</span><span class="o">=</span><span class="s">&quot;Book&quot;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">book_detail</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">book_id</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&#39;Book info: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">book_id</span><span class="p">))</span>


<span class="c"># URL patterns</span>
<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^book/(?P&lt;book_id&gt;\d+/info$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">book_detail</span><span class="p">),</span>
    <span class="c"># ...</span>
<span class="p">]</span>
</pre></div>
<p>Test in command line:</p>
<div class="highlight"><pre><span class="c"># test in shell, and see the book id correctly returned</span>
<span class="nv">$ </span>curl http://localhost/book/1/info
Book info: 1

<span class="c"># check the log in server console, everything is shown</span>
<span class="o">[</span>Book<span class="o">]</span> localhost:8000 GET /v1/book/1/info
</pre></div>

<h3 id="toc_3">Reference</h3>
<p>Reference: <a href="http://thecodeship.com/patterns/guide-to-python-function-decorators/">thecodeship.com/patterns/guide-to-python-function-decorators/</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Usage for Redis on Linux]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2017/03/linux-redis-usage.html"/>
        <published>2017-03-10T22:20:00+08:00</published>
        <updated>2017-03-10T22:22:41+08:00</updated>
        <id>http://terryoy.github.io/2017/03/linux-redis-usage.html</id>
        <category scheme="http://terryoy.github.io/tag/#database" term="database" label="database" />
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">0. Setup</h3>
<div class="highlight"><pre><span class="nv">$ </span>sudo apt-get install redis-server

<span class="c"># login redis</span>
<span class="nv">$ </span>redis-cli
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[How I fix my Ubuntu with iRST(Intel Rapid Start Technology) Raid]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/12/how-i-fix-ubuntu-boot-with-irst-raid.html"/>
        <published>2016-12-29T00:05:00+08:00</published>
        <updated>2016-12-29T01:24:58+08:00</updated>
        <id>http://terryoy.github.io/2016/12/how-i-fix-ubuntu-boot-with-irst-raid.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>I have bought a Haier X3 laptop with a 500GB hard disk and a 32GB SSD with which you could use to boot and cache disk rapidly for Windows via Intel&#39;s technology. However, I&#39;m a Linux fan, so I also need to install Ubuntu on my computer.</p>
<p>At first, the Windows 7 system was pre-installed. When I installed Ubuntu it failed at booting if the Windows 7 had enabled iRST. I cannot find any working solution to fix the Ubuntu problem at the time, so I just disabled Win 7&#39;s iRST, and then use the SSD as normal disk. Later I had a very good time with the Linux environment.</p>
<p>Recently, I&#39;m going to refresh the whole system and make both clean again. So I give a second try to enable Windows 7&#39;s iRST and make Ubuntu boot correctly, and I succeeded after two days hard work!</p>
<p>The root cause is that the raid management tool on Linux will assemble the partitions as RAID and then the <code>initramds</code> cannot find the partition with UUID. It fails like this:</p>
<div class="highlight"><pre>Gave up waiting <span class="k">for </span>root device. Common problems:
 - Boot args <span class="o">(</span>cat /proc/cmdline<span class="o">)</span>
   - Check <span class="nv">rootdelay</span><span class="o">=</span> <span class="o">(</span>did the system <span class="nb">wait </span>long enough?<span class="o">)</span>
   - Check <span class="nv">root</span><span class="o">=</span> <span class="o">(</span>did the system <span class="nb">wait </span><span class="k">for </span>the right device?<span class="o">)</span>
 - Missing modules <span class="o">(</span>cat /proc/modules; ls /dev<span class="o">)</span>
ALERT! /dev/disk/by-uuid/52152d36-9dc4-42a6-8be1-3966bf397b09 does not exist. Dropping to a shell!

BusyBox v1.22.1 <span class="o">(</span>Ubuntu 1:1.22.0-15ubuntu1<span class="o">)</span> built-in shell <span class="o">(</span>ash<span class="o">)</span>
Enter <span class="s1">&#39;help&#39;</span> <span class="k">for </span>a lost of built-in commands.
<span class="o">(</span>initramfs<span class="o">)</span>
</pre></div>
<p>I have searched on the internet about it, finding that it&#39;s related to the block id that generated for the partitions are missing:</p>
<div class="highlight"><pre><span class="o">(</span>initramfs<span class="o">)</span> blkid
/dev/sda: <span class="nv">TYPE</span><span class="o">=</span><span class="s2">&quot;isw_raid_member&quot;</span>
/dev/sdb: <span class="nv">TYPE</span><span class="o">=</span><span class="s2">&quot;isw_raid_member&quot;</span>

<span class="o">(</span>initramfs<span class="o">)</span> ls /dev/md*
md/  md126  md127
</pre></div>
<p>While the partitions of <code>/dev/sda/</code> are supposed to be recognized by UUIDs, but it is created as a software RAID device(md126), so the partitions of it cannot be accessed at boot time. I have tried to install Ubuntu via my usb disk again and again, also try to use <code>chroot</code> to update the grub record and the initramfs on the partiion, and I still don&#39;t have luck. After a long frustrating period, I suddenly come up the idea: why not just disable the raid array at boot time? </p>
<p>After I tried the below two commands in <code>initramfs</code>, it come back to normal boot after I exit the initramfs mode!</p>
<div class="highlight"><pre><span class="o">(</span>initramfs<span class="o">)</span> mdadm --stop --scan

<span class="o">(</span>initramfs<span class="o">)</span> blockdev --rereadpt /dev/sda
</pre></div>
<p>The first command scan all the RAID array entries and close them. The second command re-read the partitions with UUIDs so you get the UUID entries for initramfs to boot.</p>
<p>This time I have confident to make the solution permanent. First of all, I will need to use my Ubuntu usb boot disk to enter the shell(&#39;Go Back&#39; in the first step of the installation, then you find a choice for executing a shell) and mount the partition. (My target Ubuntu parition is /dev/sda3)</p>
<div class="highlight"><pre><span class="nv">$ </span>mount /dev/sda3 /mnt
<span class="nv">$ </span>mount -t proc /proc /mnt/proc
<span class="nv">$ </span>mount -t sysfs /sys /mnt/sys
<span class="nv">$ </span>mount -o <span class="nb">bind</span> /dev /mnt/dev
<span class="nv">$ </span>chroot /mnt /bin/bash
</pre></div>
<p>This allow me to mount the partition just as I&#39;ve booted into it. Then I will update it&#39;s boot process(e.g. grub &amp; initramfs).</p>
<div class="highlight"><pre><span class="nv">$ </span>grub-install /dev/sda
<span class="nv">$ </span>update-grub

<span class="nv">$ </span>vi /etc/initramfs-tools/script/local-top/mdadm
mdadm --stop --scan
blockdev --rereadpt /dev/sda

<span class="nv">$ </span>chmod +x /etc/initramfs-tools/script/local-top/mdadm
<span class="nv">$ </span>update-initramfs -u
</pre></div>
<p>Voilà! My Ubuntu&#39;s back!&hellip;wait, my Windows 7 has gone! It seems that GRUB has erase my Windows 7 boot entry. This doesn&#39;t stop me now. It&#39;s easy to get Windows back.</p>
<p>I tried to run <code>update-grub</code> again, but it doesn&#39;t recognize the Windows boot entry even though os-prober is enabled. So I need to add it manually:</p>
<div class="highlight"><pre><span class="c"># check the Windows partition UUID</span>
<span class="nv">$ </span>blkid

<span class="nv">$ </span>vi /boot/grub/grub.cfg
<span class="c"># (look for the section of &quot;/etc/grub.d/40_custom&quot; and add the content below)</span>
menuentry <span class="s2">&quot;Windows 7&quot;</span> <span class="o">{</span>
    insmod ntfs
    <span class="nb">set </span><span class="nv">root</span><span class="o">=</span><span class="s1">&#39;(hd0,1)&#39;</span>
    search --no-floppy --fs-uuid --set 76B0EE43B0EE0987
    chainloader +1
<span class="o">}</span>
</pre></div>
<p>Then reboot. It is finally OK.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Working with Grub2 in Linux]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/10/working-with-grub2-linux.html"/>
        <published>2016-10-21T10:21:00+08:00</published>
        <updated>2016-12-28T11:35:52+08:00</updated>
        <id>http://terryoy.github.io/2016/10/working-with-grub2-linux.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p><strong>Grub2</strong>(GRUB: the GRand Unified Bootloader) is the main bootloader in Debian/Ubuntu distribution. I have always wanted to know the details to change or fix the booting process. So I did a research and make a note here.</p>

<h3 id="toc_0">1. Overview</h3>
<p>Normally we should use the util <code>update-grub</code> to update the grub2 boot entries. In grub(the older, not grub2), we need to update the boot menu file <code>/boot/grub/menu.lst</code> carefully to manage the entries. In this case, it could be easy to make mistakes, or inconvenient while editing the file and get required information at the same time. </p>
<p>In grub2 with <code>update-grub</code>, this process can be managed in updating a general setting file and a list of scripts that generate entries. These files are:</p>

<ul>
<li><code>/etc/default/grub</code>, general grub settings,</li>
<li><code>/etc/grub.d/*</code>, this directory contains a list of executable scripts and will be processed in order. You can add the files according to the convention:

<ul>
<li>&ldquo;00_*&rdquo;: It is reserved for 00_header.</li>
<li>&ldquo;10_*&rdquo;: Native boot entries.</li>
<li>&ldquo;20_*&rdquo;: Third party apps (e.g. memtest86+).</li>
</ul></li>
</ul>
<p>The number namespace in-between is configuratble by system installer and/or administrator. The order of other number will be reflected in the menu if you set 01_otheros, 11_otheros, etc.</p>
<p>For example, I have below config files in <code>/etc/init.d/</code> for a ubuntu installation:</p>

<pre><code>00_header
05_debian_theme
10_linux
20_linux_gen
30_os-prober
30_uefi_firmware
40_custom
41_custom</code></pre>

<h3 id="toc_1">2. Clean up Grub2 Menu</h3>
<p>After a release or a kernel upgrade, you may usually find unuseful entries in the boot menu, which are mainly for previous state recovery. So here let&#39;s see how to remove the unuseful entries.</p>
<p>First are the unnecessary kernel entries. They exist because you install more older kernel versions lying around on your machine. So you can check if there are more than one <code>linux-headers-&lt;version&gt;</code> entry and <code>linux-image-&lt;version&gt;</code> entry, then remove the unnecessary package via package manager.</p>
<p>Second, unwanted entries in <code>/etc/init.d/</code> such as memtest86+. Disabling them is very easy, just make them not executable then it&#39;s done.</p>
<div class="highlight"><pre><span class="nv">$ </span><span class="nb">cd</span> /etc/init.d/
<span class="nv">$ </span>sudo chmod -x 20_memtest86+
</pre></div>
<p>And the last thing is to update grub:</p>
<div class="highlight"><pre><span class="nv">$ </span>sudo update-grub
</pre></div>
<p>Sometimes if you just want to edit some of the boot menu item, you could lookup the <code>menuentry</code> in the file and edit the content. For example, there is a <code>30_os-prober</code> file in <code>/etc/grub.d/</code>, which checks if there are other OS exists on local drives and create boot entries for them. You can see the similar content in each OS part and using <code>cat</code> and <code>menuentry</code> to add an entry to the grub config.</p>

<h3 id="toc_2">3. Grub2 Settings</h3>
<p>In the general setting file <code>/etc/default/grub</code>, there are some basic settings that you could change.</p>

<pre><code># (template of /etc/default/grub)
# 1. Default boot entry, can be the index or the title of the boot item; SAVEDEFAULT option let you save every last choice as next default
GRUB_DEFAULT=0
GRUB_SAVEDEFAULT=true

# 2. Go directly to the default boot entry unless you press 'shift' or 'esc' at startup. The &quot;QUIET&quot; option will display the count down of the hidden timeout before going to boot, which you can use a chance for a boot splash
GRUB_HIDDEN_TIMEOUT=0
GRUB_HIDDEN_TIMEOUT_QUIET=true

# 3. Grub background, just simply set the image path(supports '.png', '.tga', '.jpg' or '.jpeg')
GRUB_BACKGROUND='/path/to/image.jpg'</code></pre>
<p>Ref: (run as shell cmd) <code>info -f grub -s &#39;Simple configuration&#39;</code></p>

<h3 id="toc_3">4. Grub2 tools</h3>

<h4 id="toc_4">4.1 Grub Rescue</h4>
<p>Many times when grub boot failed, it will run into <code>grub-rescue</code> shell environment. It is expected that you fix something(usually try to recover the damaged boot record.) and set a bootable entry for grub to continue the boot process</p>
<p>Below is an example of a common process.</p>
<div class="highlight"><pre><span class="c"># check available parition</span>
grub rescue&gt; ls
<span class="o">(</span>hd0<span class="o">)</span>,<span class="o">(</span>hd0,msdos3<span class="o">)</span>,<span class="o">(</span>hd0,msdos2<span class="o">)</span>,<span class="o">(</span>hd0,msdos1<span class="o">)</span>

<span class="c"># check available grub boot record in a partition</span>
grub rescue&gt; ls <span class="o">(</span>hd0,msdosX<span class="o">)</span>/boot/grub

<span class="c"># set boot entry</span>
grub rescue&gt; <span class="nb">set </span><span class="nv">root</span><span class="o">=(</span>hd0,msdos3<span class="o">)</span>
grub rescue&gt; <span class="nb">set </span><span class="nv">prefix</span><span class="o">=(</span>hd0,msdos3<span class="o">)</span>/boot/grub
grub rescue&gt; insmod /boot/grub/normal.mod

<span class="c"># go to startup screen</span>
grub rescue&gt;normal

<span class="c"># (is this the alternative way?)</span>
rescue&gt;linux /boot/vmlinuz-xxx-xxx <span class="nv">root</span><span class="o">=</span>/dev/sdax
rescue&gt;initrd /boot/initrd.img-xxx-xxx
rescue&gt;boot
</pre></div>

<h3 id="toc_5">Reference</h3>

<h1 id="toc_6"></h1>
<p>The GRUB manual: (run in linux shell) <code>info grub</code></p>
<p>Clean up Grub2 entries: <a href="http://www.howtogeek.com/howto/17787/clean-up-the-new-ubuntu-grub2-boot-menu/">www.howtogeek.com/howto/17787/clean-up-the-new-ubuntu-grub2-boot-menu/</a>. (There is also a link to an article for the old <code>grub</code>)</p>
<p>How to Configure Grub2 boot loader settings: <a href="http://www.howtogeek.com/196655/how-to-configure-the-grub2-boot-loaders-settings/">www.howtogeek.com/196655/how-to-configure-the-grub2-boot-loaders-settings/</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Frontend Workflow Toolbox Summary]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/09/frontend-workflow-summary.html"/>
        <published>2016-09-18T23:45:00+08:00</published>
        <updated>2016-11-29T10:12:04+08:00</updated>
        <id>http://terryoy.github.io/2016/09/frontend-workflow-summary.html</id>
        <category scheme="http://terryoy.github.io/tag/#frontend" term="frontend" label="frontend" />
        <category scheme="http://terryoy.github.io/tag/#study" term="study" label="study" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>I&#39;m working my job as a frontend developer currently. So I will do some research and write about the tools I&#39;ve been using to develop Javasript frontend projects.</p>

<h3 id="toc_0">1. CSS</h3>

<h3 id="toc_1">2. Javascript</h3>

<h4 id="toc_2">2.1 Browserify</h4>
<p>Uses the same module system as nodejs that can compile, build, and pack javascript modules in node-flavoured CommonJS way for browser. You can manage front-end dependencies with npm, using <code>require()</code> method to import, and &ldquo;module.exports&rdquo; to export, just like the way nodejs does.</p>
<p>When compiling, browserify will start with an entry file(e.g. &#39;./app.js&#39;), then find the whole <code>abstract syntax tree</code> of the file by static analysis, and pack all the related content into one files.</p>
<p>In order to make node modules more compatible with browser side, browserify also provides many <a href="https://github.com/substack/browserify-handbook#builtins">builtins modules</a> such as <code>events</code>, <code>os</code>, <code>querystring</code>, etc.</p>
<p>The best part of browserify is that providing the static analysis and compiling platform, you can also have customized transformers for files other than the standard JS. This enables compiling coffee script or other favors, and also other plugins such as code coverage, in a pipe streaming way. </p>
<p>In bundling, browserify has two functions: </p>

<ol>
<li><code>ignore</code>, making a stub definition for some methods only available for node-specific modules</li>
<li><code>exclude</code>, to separate files in different bundle, so don&#39;t pack the specific files</li>
</ol>
<p>Reference: <a href="https://github.com/substack/browserify-handbook#introduction">github.com/substack/browserify-handbook#introduction</a></p>

<h4 id="toc_3">2.2 Gulp</h4>
<p>If you want to do something quick and dirty, just checkout the Gulp Recipes and copy the the code you want. The Recipes have prepare many examples of small tasks for you to reference.</p>
<p>References:</p>

<ul>
<li>Gulp:  <a href="https://github.com/gulpjs/gulp">github.com/gulpjs/gulp</a></li>
<li>Gulp + Browserify Guide: <a href="https://www.viget.com/articles/gulp-browserify-starter-faq">www.viget.com/articles/gulp-browserify-starter-faq</a></li>
<li>Gulp Recipes: <a href="https://github.com/gulpjs/gulp/tree/master/docs/recipes">github.com/gulpjs/gulp/tree/master/docs/recipes</a></li>
<li>Principles of Gulp Plugin: <a href="https://github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/README.md">github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/README.md</a></li>
</ul>

<h4 id="toc_4">2.3 Babel</h4>
<p>The language transfrm platform and the cutting edge of ES(ECMAScript/Javascript) standard. It can transform ES6(ES2015), ES7(ES2016) scripts to compatible ES5. So you can use it as a <code>transformer</code> in browserify and compile the files you have written in ES6, etc. The official web site says the main features about it:</p>

<ul>
<li>Babel Presets,</li>
<li>Babel Polyfill, new globals such as Promise or new native methods. </li>
<li>JSX and Flow support</li>
</ul>
<p>References:</p>

<ul>
<li>ES6: <a href="https://github.com/rse/es6-features">github.com/rse/es6-features</a></li>
<li>Babel: <a href="http://babeljs.io/">babeljs.io/</a></li>
<li>Babel Plugins(Presets, Stage-X, and Transform Plugins): <a href="http://babeljs.io/docs/plugins/">babeljs.io/docs/plugins/</a> </li>
</ul>

<h4 id="toc_5">2.4  Webpack</h4>

<h3 id="toc_6">3. Others</h3>

<h4 id="toc_7">3.1 Coffee Script</h4>

<h4 id="toc_8">3,2 Type Script</h4>

<h3 id="toc_9">4. Vocabulary</h3>
<p>There are some terms in web front-end development that is not meaning obviously, so I collect some of them here.</p>

<ul>
<li><p><a href="https://en.wikipedia.org/wiki/Polyfill"><strong>Polyfill</strong></a> - a polyfill is cod e that implements a feature on web browsers that do <em>not</em> support it. It is a <em>shim</em> for a browser API.</p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Shim_(computing)"><strong>Shim</strong></a> - A small library that transparently intercepts API calls. This term can be  commonly used to support an old API in a newer environment, or a new API in an older environment, or running programs on a different platform than they were developed for.</p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Glob_(programming"><strong>glob</strong></a>) - A pattern that specifies a set of files with wildcard characters. It is originally a program <code>/etc/glob</code> that look for files by patterns, then it is used in a lof of libraries in many language. The original word is short for &#39;global command&#39;.</p></li>
</ul>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Put Linux into Old PC - (3) Localize the Language Environment]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/06/put-linux-into-old-pc-3-localization.html"/>
        <published>2016-06-28T21:03:00+08:00</published>
        <updated>2016-09-18T23:43:37+08:00</updated>
        <id>http://terryoy.github.io/2016/06/put-linux-into-old-pc-3-localization.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#study" term="study" label="study" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">Part 3. Localize the language environment</h3>
<p>It is very easy to support the multi-language environment if you&#39;re installing the normal Linux desktop. However, it takes a few steps if you want to try the manual way. To make it more challenging, I would like to add Japanese support(the second foreign language I&#39;m going to learn) together with Chinese support which is my mother language.</p>
<p>The job to enable this multi-language environment includes three parts:</p>

<ul>
<li>Able to view the Asian characters,</li>
<li>Able to input the Asian characters,</li>
<li>The user interface are translated into the familiar language. (However, I might prefer an English environment just for working~)</li>
</ul>

<h4 id="toc_1">3.1 Enabling the Input Method</h4>
<p>Now I want to enable the input method at first, because it enable me to try enter other characters. There are several approaches to support multi-language input method, such as <code>SCIM</code>, <code>ibus</code>, and <code>uim</code>. The currently recommendation is <strong>ibus</strong>. There are several popular alternatives for both Japanese and Chinese input methods. <code>Anthy</code> and <code>mozc</code> are for Japanese, and <code>pinyin</code>, <code>sunpinyin</code> and <code>google-pinyin</code> are for Chinese(let&#39;s hope that Sogou Pinyin is joining this competition~). You can choose as you prefer, but I will first install only two basic choices.</p>
<div class="highlight"><pre><span class="c"># Install Anthy and Pinyin</span>
<span class="nv">$ </span>sudo apt-get install ibus-anthy ibus-pinyin

<span class="c"># Setup the configurations for the first time (you may need to manually add the input method in the enabled list)</span>
<span class="c"># (for input method config)</span>
<span class="nv">$ </span>im-config
<span class="c"># (for ibus config)</span>
<span class="nv">$ </span>ibus-setup
</pre></div>
<p>Be sure to change the method switching keyboard shortcuts to &ldquo;Ctrl+Space&rdquo;, otherwise you may not correctly enable it(by default, it uses &ldquo;Super+Space&rdquo; to switch between but I have no &ldquo;Super&rdquo; key on my keyboard).</p>
<p>After all the steps above, the ibus input method is still not enabled at start up, which means you need to manually start the daemon by executing &ldquo;ibus-setup&rdquo;. However, no doubt that I will fix this soon.</p>
<p>To enable things at X start up, you need to put commands in <code>~/.xprofile</code> or <code>~/.xinitrc</code>, depends on the windows manager requirements. <code>~/.xprofile</code> is often used before windows manager start up, while <code>~/.xinitrc</code> is used by &ldquo;initx&rdquo; and its frontend &ldquo;startx&rdquo; to initialize the X window manager(remember we put &ldquo;exec openbox-session&rdquo; in this file previously?). The <code>ibus-daemon</code> program starts the ibus daemon server, so if I want to start ibus when X starts, I will put it in the ~/.xinitrc file. <a href="#ref">[2]</a></p>
<div class="highlight"><pre><span class="nv">$ </span>vi ~/.xinitrc
<span class="c"># (add at the end of the file)</span>
ibus-daemon -drx
</pre></div>
<p>You can check out what the part of &ldquo;-drx&rdquo; means by <code>man ibus-daemon</code>. It&#39;s easy.</p>

<h4 id="toc_2">3.2 Testing the Input method</h4>
<p>There are a lot of applications that supports input method. Two I have tried, the browser and the terminal. Not every termimal emulator supports ibus input. Luckily, I have chosen <code>lxterminal</code> and it does the job.</p>
<p>The first and easy test is on the browser. I changed the keyboard shortcut for &ldquo;switching to next input method&rdquo; to Ctrl+Space, because the default one is Super+Space but my <code>Super</code> key isn&#39;t available at the time and <code>Ctrl</code> is more like my preference. </p>
<p>The Japanese font seems to be already available with the installation above, but the Chinese font isn&#39;t. So, by installing some extra Chinese fonts, you should be able to see most of the east asian characters.</p>
<div class="highlight"><pre><span class="c"># Chinese Font</span>
<span class="nv">$ </span>sudo apt-get install fonts-wqy-microhei fonts-wqy-zenhei
</pre></div>
<p>The &ldquo;Typing Method&rdquo; in the Japanese input method is more like a switch from Pinyin to Wubi in Chinese. My Japanese keyboard has Hiragana characters written on the keys, so I can choose &ldquo;Kana&rdquo; as typing method(a little bit like Wubi, typing words in characters). If you choose &ldquo;Romanji&rdquo; as the typing method, then you should input the characters in a phonetic way.</p>

<h4 id="toc_3">3.3 Localizing the UI</h4>
<p>The English UI is good enough for me in the most circumstances. But still, I want to look into the details for changing the language of applicatoin interfaces.</p>

<h5 id="toc_4">Basic Locale Settings</h5>
<p>The system variable &ldquo;LANG=xx_YY.ZZZZ&rdquo; has defined the language settings in three ways: <code>language code</code>, <code>country code</code>, and <code>encoding</code>. (Notice the upper cases and the lower cases.) This variable affects the language interface of most of the applications. To do an experiement, try to set the variable as below, before entering the X window environment. You will see the menu of applications are changed to a different font, but the language is possibly still in English. This is because the application has no Chinese locale interface installed.</p>
<div class="highlight"><pre><span class="nv">$ </span><span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span>zh_CN.UTF-8
</pre></div>

<h3 id="toc_5">Reference</h3>
<p><a name="ref"></a>
[1] Debian i18n: <a href="https://www.debian.org/doc/manuals/debian-reference/ch08.en.html">www.debian.org/doc/manuals/debian-reference/ch08.en.html</a> <br/>
[2] IBus: <a href="https://wiki.archlinux.org/index.php/IBus">wiki.archlinux.org/index.php/IBus</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[A Short Reference of Python Logging]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/05/short-ref-python-logging.html"/>
        <published>2016-05-26T19:55:00+08:00</published>
        <updated>2017-05-27T23:47:55+08:00</updated>
        <id>http://terryoy.github.io/2016/05/short-ref-python-logging.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>I have for many times use the logging function, but never understand it completely. So I go through the document and make some notes, hoping it will help me use it more quickly in the future. </p>

<h3 id="toc_0">1. Basic Config</h3>
<p>If you want to use a programmable method other than a configuration file, the basicConfig() method is the general initializing method.</p>
<p>The most basic form is default log, which you don&#39;t need basicConfig(). It is using console output with WARNING level.</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">logging</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">logging</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&#39;hello&#39;</span><span class="p">)</span> <span class="c"># no output</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">logging</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s">&#39;world&#39;</span><span class="p">)</span>
<span class="n">world</span>
</pre></div>
<p>The basic config contains a list of below elements:</p>

<ul>
<li>  filename    - Using a <em>FileHandler</em> to output the log</li>
<li>  filemode    - file open mode(&#39;r&#39;, &#39;w&#39;, &#39;a&#39;), mainly used to choose append or write a new log file</li>
<li>  format      - A string for specifying the log output template, If you want to lookup a list of supported keywords, look for section &#39;LogRecord attributes&#39; in the python official document</li>
<li>  datefmt     - A specified date/time format.</li>
<li>  level       - set the <em>root</em> loglevel for the logger</li>
<li>  stream      - Specify a stream for the StreamHandler, for example, a buffer output stream or stdout. It will be ignored if &ldquo;filename&rdquo; is present.</li>
</ul>
<p>The logger can be initialized only once when basicConfig() is called. Then </p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">logging</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="s">&#39;program.log&#39;</span><span class="p">,</span> 
        <span class="n">filemode</span><span class="o">=</span><span class="s">&#39;a&#39;</span><span class="p">,</span>
        <span class="n">format</span><span class="o">=</span><span class="s">&quot;</span><span class="si">%(asctime)-15s</span><span class="s"> </span><span class="si">%(levelname)s</span><span class="s"> [</span><span class="si">%(module)s</span><span class="s">] </span><span class="si">%(message)s</span><span class="s">&quot;</span><span class="p">,</span>
        <span class="n">datefmt</span><span class="o">=</span><span class="s">&quot;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S.</span><span class="si">%f</span><span class="s">&quot;</span><span class="p">,</span>
        <span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">)</span>
</pre></div>

<h3 id="toc_1">2. Configuration Object and the Modular Approach</h3>
<p>When choosing the Modular Approach of logging, you need to deal with 4 elements:</p>

<ul>
<li>  loggers     - the interface that application modules used to log things</li>
<li>  handlers    - send the log records (that loggers created) to the appropriate destinations</li>
<li>  filters     - provide a finer grained facility for determining which log records should be output</li>
<li>  formatters  - specify the layout of the log records in the final output</li>
</ul>

<h4 id="toc_2">2.1 Logger hierarchy</h4>
<p>The loggers used by all the modules are formed in a conceptual hierarchy by the naming with a separator(&#39;.&#39;). For example: &#39;abc.text&#39;, is the descendant of logger &#39;abc&#39;, while &#39;abc&#39; can be the parent of &#39;abc.text&#39;, &#39;abc.pdf&#39;, &#39;abc.image&#39;, etc. A good convention is to use loggers in a module sense, using in each <code>.py</code> as below:</p>
<div class="highlight"><pre><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</pre></div>
<p>The root of all loggers is called the &ldquo;root&rdquo; logger, which prints the logger name as &ldquo;ROOT&rdquo; in output.
</p>

<h4 id="toc_3">2.2 Useful handlers</h4>
<p>There are some useful handlers in the section of python <em>Logging Howto</em> document. Some of them are listed as here:</p>

<ul>
<li>  StreamHandler   - to stream object (default stdin?)</li>
<li>  FileHandler     - to a disk file</li>
<li>  <strong>RotatingFileHandler</strong>         - from <em>BaseRotatingHandler</em>, send logs to files, rotating log file with a maximum file size.</li>
<li>  <strong>TimedRotatingFileHandler</strong>    - from <em>BaseRotatingHandler</em>, send logs to files, rotating log file at a certain timed intervals.</li>
<li>  SocketHandler/DatagramHandler   - send log messages to TCP/IP and UDP sockets</li>
<li>  SMTPHandler     - Send to a designated email address</li>
<li>  NullHandler     - Do nothing, it&#39;s used in development that supports logging with this mock</li>
</ul>
<p>This shows the variety of logging output scenarios, which you could look them up in the python doc.</p>

<h4 id="toc_4">2.3 The propagation of loggers</h4>
<p>Look at the flow of logging in the below diagram from <a href="https://docs.python.org/2/howto/logging.html#logging-advanced-tutorial">python&#39;s tutorial</a>,</p>
<p><img src="https://docs.python.org/2/_images/logging_flow.png" alt="logging flow"/></p>
<p>When a log record is send to the logger in the module, it will first check if its own filter(the filter of a logger) reject it, then pass to its handler; if propagation is set to true(by default), it will pass the log record to it&#39;s parent too, so the log record will bubble up till the root logger, and each logger will judge by their handler and filter to decide whether to output the log record. So we often setup a top level logger, and then configure a child logger only if needed.</p>

<h4 id="toc_5">2.4 Configuring Logging</h4>
<p>The most usual approaches are using <code>fileConfig()</code> and <code>dictConfig()</code>. With fileConfig() you can use a <strong>.conf</strong> file to load the settings (this approach is deprecated), and with dictConfig() you can use even wider range of persistence choices, such as JSON, python file, yaml, etc.</p>
<p>For example, I have written a small utils for command line interaction and also want to log the HTTP request details. So I defined two handlers: one for console output, another for file output so that I can review the details. The console output must be simple without unneccessary information, and the file output should contains all the time, module details for investigation. Here is my configuration using a python file. (The advantages for a python configuration is that you can also use expressions and comments.)</p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">logging</span><span class="o">,</span> <span class="nn">logging.config</span>

<span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">&quot;log_config&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">&quot;version&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="s">&quot;formatters&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">&quot;brief&quot;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s">&quot;format&quot;</span><span class="p">:</span> <span class="s">&quot;</span><span class="si">%(message)s</span><span class="s">&quot;</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="s">&quot;detail&quot;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s">&quot;format&quot;</span><span class="p">:</span> <span class="s">&quot;</span><span class="si">%(asctime)-15s</span><span class="s"> </span><span class="si">%(levelname)s</span><span class="s"> [</span><span class="si">%(name)s</span><span class="s">.</span><span class="si">%(funcName)s</span><span class="s">] </span><span class="si">%(message)s</span><span class="s">&quot;</span><span class="p">,</span>
                <span class="s">&quot;datefmt&quot;</span><span class="p">:</span> <span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S&#39;</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
        <span class="s">&quot;handlers&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">&quot;console&quot;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s">&quot;class&quot;</span><span class="p">:</span> <span class="s">&quot;logging.StreamHandler&quot;</span><span class="p">,</span>
                <span class="s">&quot;level&quot;</span><span class="p">:</span> <span class="s">&quot;INFO&quot;</span><span class="p">,</span>
                <span class="s">&quot;formatter&quot;</span><span class="p">:</span> <span class="s">&quot;brief&quot;</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="s">&quot;file&quot;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s">&quot;class&quot;</span><span class="p">:</span> <span class="s">&quot;logging.handlers.RotatingFileHandler&quot;</span><span class="p">,</span>
                <span class="s">&quot;filename&quot;</span><span class="p">:</span> <span class="s">&quot;dev.log&quot;</span><span class="p">,</span>
                <span class="s">&quot;level&quot;</span><span class="p">:</span> <span class="s">&quot;DEBUG&quot;</span><span class="p">,</span>
                <span class="s">&quot;formatter&quot;</span><span class="p">:</span> <span class="s">&quot;detail&quot;</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
        <span class="s">&quot;root&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">&quot;handlers&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;console&quot;</span><span class="p">,</span> <span class="s">&quot;file&quot;</span><span class="p">],</span>
            <span class="s">&quot;level&quot;</span><span class="p">:</span> <span class="s">&quot;DEBUG&quot;</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="s">&quot;loggers&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">&quot;requests&quot;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s">&quot;handlers&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;file&quot;</span><span class="p">],</span>
                <span class="s">&quot;level&quot;</span><span class="p">:</span> <span class="s">&quot;DEBUG&quot;</span><span class="p">,</span>
                <span class="s">&quot;propagate&quot;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">}</span>

<span class="n">logging</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">dictConfig</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">&quot;log_config&quot;</span><span class="p">])</span>
</pre></div>
<p>There are two formatters: &ldquo;brief&rdquo; for simply output the message body, the root loggers is default logger for all the modules I write, and also the 3rd party libraries like python <code>requests</code>. Since all the info log should appear in both <strong>console</strong> and the <strong>file</strong>, I need to put both inthe root logger. However, to avoid the unneccssary debug log showing in console, I set the level <strong>INFO</strong> in the <strong>console</strong> handler. This enables the file logger logs everything while the console doesn&#39;t. </p>
<p>Next I discover that the library &ldquo;requests&rdquo; also have some &ldquo;INFO&rdquo; log which is unneccessary in console, so I will specificially make it disappear using the <strong>loggers</strong> config. The important thing here is to use the <strong>propagate</strong> feature. </p>
<p>The &ldquo;file&rdquo; logger wants the requests&#39; debug log, so I need to set the level to DEBUG. By default, it will propagate the log record to the &ldquo;root&rdquo; logger which make it appear to console. So I will use <code>propagate: False</code> to disable the propagation. Then the log records  will stay in the &ldquo;requests&rdquo; logger and will be invisible to the &ldquo;root&rdquo; logger.</p>
<p>If you&#39;re not sure what to config with, write a small example project to experiment the result.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Put Linux into Old PC - (2) Desktop Environment]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/05/put-linux-into-old-pc-2-desktop.html"/>
        <published>2016-05-18T09:47:00+08:00</published>
        <updated>2016-08-31T10:42:42+08:00</updated>
        <id>http://terryoy.github.io/2016/05/put-linux-into-old-pc-2-desktop.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#study" term="study" label="study" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">Part 2. Setup a minimal desktop environment</h3>

<h4 id="toc_1">2.1 Xorg and Openbox</h4>
<p>To use a desktop environment, <strong>Xorg</strong> is the package you won&#39;t miss(for more information you can also check the <a href="htts://www.x.org/">x.org</a> and <a href="https://www.freedesktop.org/">freedesktop.org</a> web-sites. I choose <strong>Openbox</strong> as the window manager, which is one of the most lightweight window manager. It is the best showcase of minimalism, yet the functions shall be simple enough for customization. The window manager is not a desktop environment, it is just simply a manager to windows, their styles and behaviors. A complete desktop environment is not necessary, or maybe it&#39;s the chance that I could design my own.</p>
<div class="highlight"><pre><span class="nv">$ </span>sudo apt-get install xorg
<span class="c"># now you can enter the GUI environment by command &quot;startx&quot;, but you still need a window manager to do further things</span>
<span class="nv">$ </span>sudo apt-get install openbox obconf openbox-themes
<span class="c"># the above packages and their dependencies will allow you to build and configure an Openbox system, along with choices of themes.</span>
</pre></div>
<p>What&#39;s interesting about &ldquo;startx&rdquo; is that, if you try it after you install xorg and before any Window Manager, you&#39;ll get a graphical shell environment with mouse available. The font is definitly different from what you had in the normal console. It is I think the essential GUI environment possible. And if you press Ctrl+D to exit the session, you get back to your original console environment, so the <strong>xorg-session</strong> is exited.</p>
<p>After installing the openbox package, it&#39;s not yet completed. You also need to add the a <code>~/.xinitrc</code> configuration so that it calls the openbox when you execute &ldquo;startx&rdquo;.</p>
<div class="highlight"><pre><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;exec openbox-session&quot;</span> &gt; ~/.xinitrc
<span class="nv">$ </span>startx
</pre></div>
<p>Now you can see GUI environment by Openbox. Right click on the desktop and you get a start menu, you can start a terminal emulator or configure the openbox using <em>Obconf</em>.</p>
<p>If you see an error says cannot get access to ~/.Xauthority, it&#39;s possibly you ran it in root user. It doesn&#39;t need to be root user, and you should chown the file to yourself.</p>
<p>Before going to the next step, let&#39;s look for a better console terminal than the system default one(xterm), otherwise it&#39;s inconvenient to work on multiple sessions and copy&amp;paste text. The <code>lxterminal</code> is lightweight and good enough.</p>
<div class="highlight"><pre><span class="nv">$ </span>sudo apt-get install lxterminal
</pre></div>
<p>Then you can try it out with the right-click menu and select &ldquo;Terminal emulator&rdquo;. You can check the key-bindings in LXterminal&#39;s Preferences menu.</p>
<p>Next we try to do more about the customization.</p>

<h4 id="toc_2">2.2 Openbox Configuration (menu.xml and rc.xml)</h4>
<p>Openbox has two main configuration files:</p>

<ul>
<li>rc.xml, which sets keybindings, desktop names and window behavior</li>
<li>menu.xml, which contains the instructions for the right-click menu.</li>
</ul>
<p>The configuration files can be found in <code>/etc/xdg/openbox/</code>, while you can have your user-specific version in <code>~/.config/openbox/</code>.</p>
<p>Reference for OpenBox: <a href="http://openbox.org/wiki/Help:Configuration">http://openbox.org/wiki/Help:Configuration</a></p>

<h5 id="toc_3">2.2.1 Desktop behaviors</h5>
<p>First we look into some settings in <strong>rc.xml</strong>. Most of the configuration items you can found them in the <code>Obconf</code> program, which is right in the desktop&#39;s right-click menu.</p>
<p>The configurations are mainly in below categories:</p>

<ul>
<li>Resistance, distances for handling window moving behavior, such as overlap and moving towards different desktops.</li>
<li>Focus, behaviors for switching window focus with mouse.</li>
<li>Placement, decides the position when a new window is displayed</li>
<li>Theme, this is where you can customize the visual design of the environment. (I will cover the Theme customization in the following section.)</li>
<li>Desktops, desktop behaviors</li>
<li>Resize, resizing and moving windows</li>
<li>Margins, the desktop margin settings(the boundaries where windows will not resize to&hellip;)</li>
<li>Applications, customize settings per application. You can also configure this with an GUI app <code>ObApp</code> <em>(will cover later)</em></li>
<li>Keyboard, keyboard shortcuts and behaviours</li>
<li>Mouse, mouse shortcuts and behaviours</li>
<li>Menu, right-click(system) menu behaviours. </li>
<li>Dock, dock-apps settings, it&#39;s kind of apps that will have docking behaviours</li>
</ul>
<p>The other configuration files is <strong>menu.xml</strong>. It defines the system menu content and is referred by the <em>rc.xml</em>. Since the content are quite obvious, I don&#39;t need to tell more about it. Check out the <a href="http://openbox.org/wiki/Help:Menus">wiki page</a> for customizing menus, notice it can also has &ldquo;Pipe menus&rdquo; where the menu content is genereted from the pipe of the command line results, which means you can programs to hack. ;-)</p>
<p>There are also two files under <code>/etc/xdg/openbox</code>. One is <strong>autostart</strong>, you can include some initializing scripts here when an Openbox X Session is started; the other file is <strong>environment</strong>, where you can set system wide variables for the Openbox session. Both of them can be user specific by creating files with the same name under <code>~/.config/openbox/</code>.</p>

<h5 id="toc_4">2.2.2 Openbox Themes</h5>
<p>You can create your own themes for better looking of the desktop environment. The file structure is like below:</p>

<pre><code>ThemesDirectory  (such as /usr/share/themes, ~/.local/share/themes or ~/.themes)
 |
 +-&gt; ThemeName  (This is the name of the theme, such as Clearlooks)
      |
      +-&gt; openbox-3  (This the type of the theme - it's for Openbox 3!)
           |
           |-&gt; themerc  (This is the main theme file, documented in this page)
           |
           |-&gt; max.xbm  (These are optional xbm masks for the titlebar buttons)
           |-&gt; close.xbm
           ...
           +-&gt; shade.xbm</code></pre>
<p>I have created a theme called &ldquo;LinuxInOldPC&rdquo; under &ldquo;~/.themes/&rdquo;, with the <code>openbox-3</code> folder and the default <code>themerc</code> file inside. The content template can be copied from the wiki page at the end of this section.</p>
<p>Wiki of Openbox Themes: <a href="http://openbox.org/wiki/Help:Themes">http://openbox.org/wiki/Help:Themes</a></p>

<h5 id="toc_5">2.2.3 Key-bindings</h5>
<p>Here is a small trick where I would love to have, to conveniently dock the active window to part of the screen.</p>
<p>Reference for Windows docking: <a href="https://gist.github.com/terryoy/5486156">https://gist.github.com/terryoy/5486156</a></p>
<p>Another OpenBox Guide: <a href="https://urukrama.wordpress.com/openbox-guide/](https://urukrama.wordpress.com/openbox-guide/)">urukrama.wordpress.com/openbox-guide/](urukrama.wordpress.com/openbox-guide/)</a></p>

<h4 id="toc_6">2.3 A simple web browser that do the trick</h4>
<p>After searching the apt-cache library for web browser, I discover there is a simple browser called <code>surf</code>, which uses WebKit/Gtk to render. I think this tool is well enough for browsing modern web sites, and also friendly to command line. So I pick it for the initial choice of a browser for me to search information online on this computer.</p>
<div class="highlight"><pre><span class="nv">$ </span>sudo apt-get install surf
</pre></div>
<p><strong>Surf</strong> has no tab support, no menu no any distractions. If you want to navigate to urls, hit <strong>Ctrl-g</strong> to enter a new URL.</p>
<p>Reference for &ldquo;surf&rdquo;: <a href="http://surf.suckless.org/">http://surf.suckless.org/</a></p>
<p>Next I also give a try to Chromium, the open source version of Chrome. It seems this more sophisticated version of webkit browser also works fine under linux. The performance on loading static web site is quick. So I decided to use Chromium as my default currently.</p>
<p>But now we have a problem here, what if I want to change the default browser in OpenBox? Debian provides a program call <strong>update-alternatives</strong> so that you could set default program for specific purpose.</p>
<div class="highlight"><pre><span class="c"># list current default program settings</span>
<span class="nv">$ </span>update-alternatives --get-selections

<span class="c"># update a default program</span>
<span class="nv">$ </span>sudo update-alternatives --config x-www-browser
</pre></div>
<p>It will prompt you an option list of possible programs, so that you can easily decide which program to use.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Put Linux into Old PC - (1) Installation and Hardware]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/05/put-linux-into-old-pc-1-hardware.html"/>
        <published>2016-05-15T21:04:00+08:00</published>
        <updated>2016-09-18T23:43:37+08:00</updated>
        <id>http://terryoy.github.io/2016/05/put-linux-into-old-pc-1-hardware.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#study" term="study" label="study" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">0. How this series begin?</h3>
<p>I bought from Taobao a used Japanese IBM G40 PC, which has Pentium 4 (2.5GHz) processor, 512MB RAM and a 140GB hard disk (I believe the hardware spec has been changed by the used PC seller). Since the power consumption and the speed are not suitable for very modern applications, I decided to use it as an experiment machine for creating a minimal linux workspace. This series of blog posts will be the progress showing how I work on this machine to make it very friendly and efficient for daily used.</p>

<h3 id="toc_1">Part 1. System Setup</h3>
<p>I started to boot with the Ubuntu 16.04 LTS server image(flashed on a USB stick), the booting is a bit strange than previous versions, it shows a &ldquo;boot:&rdquo; prompt which need you to tells what to boot, but it&#39;s not difficult to find out how to boot into the installation mode.</p>
<p>The reason using Ubuntu latest version is because I want to keep up with the development of the software packages, Debian is in a very stable status, while the Ubuntu packages are active enough to try out new things. I format the whole disk and install Ubuntu on it. This is the starting point.</p>

<h4 id="toc_2">1.1 Problem 1: hibernation on lid close</h4>
<p>I&#39;m so exciting at the moment when I finish all the installation and reboot, because I finally get this project started! But the first problem come very quickly - <strong>when I try to lower the lid, the screen just go dark, and when I reopen it, the going hibernate process sticks in every few seconds</strong>. I think there is some problem with the led sensor, because it automatically goes into hibernate a few seconds later when I activate again. So I think it is related to the power options in system settings.</p>
<p>This problem leads me to know about the <strong>&ldquo;systemd&rdquo;</strong> program. Searching solutions on the internet, I find out the settings in systemd will handle the power related key event. It sets how system react when user press Power key, Hibernate Key, Lid close/open, etc.</p>
<div class="highlight"><pre><span class="nv">$ </span>sudo vi /etc/systemd/logind.conf
<span class="c"># --in the file, change below line</span>
<span class="c">#HandleLidSwitch=suspend</span>
<span class="c"># --to</span>
<span class="nv">HandleLidSwitch</span><span class="o">=</span>ignore

<span class="nv">$ </span>sudo service systemd-logind restart
</pre></div>
<p>This helps me to get over the hibernation problem at once. <strong>Systemd</strong> is a Linux system and service manager. There is similar programs like ubuntu&#39;s &ldquo;upstart&rdquo;, or Mac OS&#39;s &ldquo;launchd&rdquo;. You can search for more info about it. <strong>The man page of systemd(init) is definitely worth reading to understand the first process of the system.</strong></p>
<p>There are two other power related packages <code>acpi</code> and <code>acpid</code>. The Ubuntu document recommends that you can remove the packages if you do not have a laptop. Might read that later.</p>

<h4 id="toc_3">1.2 Problem 2: Japanese keyboard layout</h4>
<p>Although I set some Japanese keyboard layout in the installation, but it doesn&#39;t match all the keys with my Japanese IBM G40 keyboard. Apparently I need to switch the keyboard layout and do a few tests. The configuration program I used here is <code>dpkg-reconfigure</code>, which allows you to configure a package again after they&#39;re installed. The package will be &ldquo;keyboard-configuration&rdquo;.</p>
<div class="highlight"><pre><span class="c"># choose a different keyboard mapping</span>
<span class="nv">$ </span>sudo dpkg-reconfigure keyboard-configuration
</pre></div>
<p>The above one already solved the problem. I changed the keyboard model to IBM ThinkPad T60/R60/T61/R61, then it says the layout of this keyboard varies in different country, so I&#39;m able to choose the &ldquo;Japanese&rdquo; as the country of the origin layout. </p>
<p>Some threads mentioned about the <code>console-setup</code> as I found out it is mainly for the encoding and the font set in the console, it might be related to the problem but not at this point. I may referred back if I try to work with Chinese character in the console.</p>
<div class="highlight"><pre><span class="c"># This change some console character set options</span>
<span class="nv">$ </span>sudo dpkg-reconfigure console-setup
</pre></div>
<p>A little more on dpkg-reconfigure, if you use <code>man dpkg-recongure</code> to check its manual, you will find another related command called <code>debconf-show</code>. It shows you all the current configurations of the package. So before you go with &ldquo;dpkg-reconfigure&rdquo;, you can check the configuration first.</p>
<div class="highlight"><pre><span class="nv">$ </span>sudo debconf-show keyboard-configuration
</pre></div>
<p>It shows how many configuration items of the package and their values. Check out the man page for &ldquo;keyboard-configuration&rdquo;, &ldquo;console-setup&rdquo;, &ldquo;dpkg-reconfigure&rdquo; and &ldquo;debconf-show&rdquo; to explore more.</p>

<h4 id="toc_4">1.3 Remapping the unused keys</h4>
<p>The Japanese keyboard on my laptop doesn&#39;t have a Win(or Super) key, but have some abandoned key for old Japanese input. So I kind of like to remap the key to be more useful, such as using one as Super key.</p>
<p>Reference for <strong>key remapping</strong>: <a href="http://askubuntu.com/questions/24916/how-do-i-remap-certain-keys-or-devices">askubuntu.com/questions/24916/how-do-i-remap-certain-keys-or-devices</a></p>

<h4 id="toc_5">1.4 Problem 3: WiFi Connection</h4>
<p>The original G40 doesn&#39;t have wireless network connection. Fortunately I have a spare USB wifi adapter, but I need to configure the WiFi manually via command line. The adapter I used is Ralink RT5370, which is already supported in the kernel, so I don&#39;t need to explicitly install a driver for it.</p>
<p>First I could use <code>lsusb</code> to check that device is recognized. Then I move on to updating the configuration in <code>/etc/network/interfaces</code>. Check out the man page of <strong>interfaces</strong>, and you will find the information of the keywords and syntax for configuring the network interface. For example:</p>

<ul>
<li>  <em>auto</em>, telling <code>ifup</code> to get this interface up automatically</li>
<li>  <em>iface</em>, define an interface (template) using different methods(inet, inet6, etc.)</li>
<li>  <em>allow-\</em>, allow the interface to be brought up by various sub-system(e.g. allow-hotplug, allow-auto, etc.)</li>
<li>  <em>pre-up</em>, <em>post-down</em>, commands to be execute before the interface is up or after it is down</li>
</ul>
<p>The configuration syntax is not difficult, so I added the below lines to enable the wifi adapter at system startup:</p>

<pre><code>auto wlan0
iface wlan0 inet dhcp
iface wlan0 inet6 auto</code></pre>
<p>Next I discover that my WiFi adapter is not called &ldquo;wlan0&rdquo;(you can check that by command <code>iwconfig</code>). Instead, it is called &ldquo;wlx5c63bf2a8b28&rdquo;, no wonder why I cannot bring it up when execute ifup. So now I need to change the name for it to make it more readable using <strong>udev</strong>. udev is responsible for which device gets which name. By the Systemd v197 standard of &ldquo;Predictable Network Interface Names&rdquo;, interfaces are prefixed with &ldquo;en&rdquo; for ethernet, &ldquo;wl&rdquo; for WLAN, and &ldquo;WW&rdquo; for WWAN. </p>
<div class="highlight"><pre><span class="c"># you check the interface entires list first, and fine the MAC address we&#39;ll need in udev</span>
<span class="nv">$ </span>ip link
<span class="c"># (or alternatively for wireless interfaces)</span>
<span class="nv">$ </span>iw dev

<span class="c"># update udev configuration</span>
<span class="nv">$ </span>sudo vi /etc/udev/rules.d/10-network.rules
<span class="c"># add below line and save</span>
<span class="nv">SUBSYSTEM</span><span class="o">==</span><span class="s2">&quot;net&quot;</span>, <span class="nv">ACTION</span><span class="o">==</span><span class="s2">&quot;add&quot;</span>, ATTR<span class="o">{</span>address<span class="o">}==</span><span class="s2">&quot;5c:63:bf:2a:8b:28&quot;</span>, <span class="nv">NAME</span><span class="o">=</span><span class="s2">&quot;wlan0&quot;</span>
</pre></div>
<p>The <strong>udev</strong> program is a dynamic device management software, it supplies the system softwares with device events, manage permissions of device nodes and may create additional symlinks in the &ldquo;/dev&rdquo; directory, or provide names to unpredictable device names from the kernel. The man page for <code>udev</code> is worth reading.</p>
<p>Reboot to test out if the device is named correctly. The device can be found in <code>/sys/class/net/</code>, with a symbolic link to the device&#39;s DEVPATH.</p>
<p>Next step is to setup the WPA2 authentication of the WiFi with my SSID and password. We&#39;ll need <code>wpasupplicant</code> package for that.</p>
<div class="highlight"><pre><span class="nv">$ </span>sudo apt-get install wpasupplicant
<span class="nv">$ </span>sudo vi /etc/wpa_supplicant/example.conf
<span class="c"># add the following contents:</span>
<span class="c">#   ctrl_interface=/run/wpa_supplicant</span>
<span class="c">#   update_config=1</span>
<span class="nv">$ </span>sudo wpa_passphrase &lt;SSID&gt; &lt;password&gt; &gt;&gt; /etc/wpa_supplicant/example.conf

<span class="c"># to test the configuration: 1. start wpa_supplicant in the background, 2. use wpa_cli to interactive with the interface</span>
<span class="nv">$ </span>wpa_supplicant -i wlan0 -c /etc/wpa_supplicant/example.conf
<span class="c"># (or alternatively, add &quot;-B&quot; parameter to the wpa_supplicant command to make it run as a daemon in the background, then use &quot;wpa_cli&quot; to work interactively)</span>
<span class="nv">$ </span>wpa_cli
&gt;scan
&gt;scan_results
<span class="c"># now you see the hotspot scan result, which means the configuration work</span>

<span class="c"># Go back to our network interface setup, we will add wpa_supplicant to it(the &quot;-D&quot; is to specify the driver to use)</span>
<span class="nv">$ </span>sudo vi /etc/network/interfaces
auto wlan0
iface wlan0 inet dhcp
  pre-up wpa_supplicant -B -Dwext -i wlan0 -c /etc/wpa_supplicant/example.conf
<span class="c"># save and test the interface</span>
<span class="c"># (PS, sometimes I forgot the &quot;-B&quot; parameter in the wpa_supplicant command, it will make the ifup job hang because it will run as a daemon in the foreground.)</span>
<span class="nv">$ </span>sudo ifdown wlan0
<span class="nv">$ </span>sudo ifup wlan0
<span class="c"># make sure the DHCP client can get an IP, otherwise the network auto start process in boot up might hang for 5 minutes to get the network...</span>
</pre></div>
<p>Hard-coding the WiFi SSID and password in the configuration is not convenience in real environment, but so far in my experiement environment, it is OK to use it first. We will get back to the network manager later to make it more convenience to connect different WiFi network.</p>

<h4 id="toc_6">Problem 1.5 WiFi Connection Revisited</h4>
<p>Last night I has successfully connect the wifi adapter to my home&#39;s network, howvever some new issues come up:</p>

<ul>
<li>  The bandwidth is only 1Mb/s</li>
<li>  Not convenient to configure SSID and passphrase</li>
</ul>
<p>After checking the <a href="https://www.debian.org/doc/manuals/debian-reference/ch05.en.html">Debian&#39;s document</a>, the network setup using <em>ifupdown</em> approach is a bit outdate, and the modern way is to use NetworkManager(NM) or Wicd(wicd and associated packages). </p>
<p>(BTW, it is good to have the <em>debian-handbook</em> and <em>debian-reference</em> package installed in your local machine for any reference needed.)</p>
<p>At first, I try to look up a proper driver for the adapter. There is a package <a href="https://wiki.debian.org/rt2800usb">rt2800usb</a> to support Ralink 802.11n usb devices on Linux. However, I found out that Ubuntu has already installed the <code>linux-firmware</code> which includes the rt28xx driver, so I decided to check it later.</p>
<p>Now I try to install the <strong>network-manager</strong> first. It is a program in two parts: a root daemon handling activation and configuration of network interfaces, and a user interface that controls it. It is provided by gnome project so the GUI is by default for gnome environment. However, it also provides a command line tool call <code>nmcli</code> in the package, so I will try it first.</p>
<div class="highlight"><pre><span class="nv">$ </span>sudo apt-get install network-manager
<span class="nv">$ </span>sudo service network-manager start
<span class="nv">$ </span>nmcli <span class="nb">help</span>
</pre></div>
<p>It will ignores the interfaces(except <em>lo</em>) in /etc/network/interfaces and use its own configuration, so comment out all leaving only <em>lo</em> in /etc/network/interfaces. Next. try a few commands for nmcli to check the network status.</p>
<div class="highlight"><pre><span class="c"># list network devices</span>
<span class="nv">$ </span>nmcli device

<span class="c"># list connections</span>
<span class="nv">$ </span>nmcli connection
</pre></div>
<p>now we can try to connect the wifi with the WiFi adapter</p>
<div class="highlight"><pre><span class="c"># list the wifi hot spots</span>
<span class="nv">$ </span>nmcli device wifi list
<span class="c"># or refresh the list if you don&#39;t get it</span>
<span class="nv">$ </span>nmcli device wifi rescan

<span class="c"># connect your hot spot</span>
<span class="nv">$ </span>nmcli device wifi connect &lt;SSID|BSSID&gt; password &lt;password&gt;
</pre></div>
<p>It&#39;s as simple as just one command line, and yet so powerful than what I expected. The network manager auto saves the WiFi connection in its database, and it can also be activated automatically when system starts up. Save my day!</p>
<p>Reference for <strong>nmcli</strong>: <a href="https://fedoraproject.org/wiki/Networking/CLI">https://fedoraproject.org/wiki/Networking/CLI</a></p>
<p>After checking the connection, the bandwidth, everything goes well. So I can stop my researching for the network solution now. Next let&#39;s work on the desktop environment.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Config your git repository to use SSH Key]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/04/git-ssh-config.html"/>
        <published>2016-04-17T16:11:00+08:00</published>
        <updated>2016-08-31T10:42:42+08:00</updated>
        <id>http://terryoy.github.io/2016/04/git-ssh-config.html</id>
        <category scheme="http://terryoy.github.io/tag/#shell" term="shell" label="shell" />
        <category scheme="http://terryoy.github.io/tag/#virtualbox" term="virtualbox" label="virtualbox" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>It is very time-consuming typing user and password every time when you do git pull/push to sync your code. Using the rsa ssh key for the authentication will save you a lot of time.</p>

<h3 id="toc_0">1. Generate SSH Key</h3>
<p>Just use the method I mentioned before in <a href="/2014/01/ssh-key-based-auth-server.html#toc_1">this article</a>, you will get a public/private key pair. Upload the public key to your github or other git hosting service.</p>

<h3 id="toc_1">2. Config your local SSH</h3>
<p>Create or open the file <code>~/.ssh/config</code> for ssh key config. The content will be similar as below:</p>

<pre><code>Host dev
 HostName dev.local
 IdentityFile ~/.ssh/dev_rsa
Host github.com
 HostName github.com
 IdentityFile ~/.ssh/github_rsa</code></pre>
<p>You can use a &ldquo;host&rdquo; alias for ssh connect instead of the full host name, this would be convenient if you might switch server host.</p>

<h3 id="toc_2">3. Choose the correct git url</h3>
<p>Usually public git hosting services use HTTPS or GIT protocol, and your private repository can use SSH protocol like in <a href="/2014/10/common-git-commands.html#toc_3">this article</a>.</p>

<pre><code>* Git URL: git@bitbucket.org:&lt;accountname&gt;/&lt;reponame&gt;.git  
* Use with alias: git@bitbucket:&lt;accountname&gt;/&lt;reponame&gt;.git</code></pre>

<h3 id="toc_3">4. No more ask of  the passphrase</h3>
<p>Initially if you use a ssh key with passphrase, you might need to enter the passphrase every time you use it. It will be kind of annoying although provide better security. However, sometimes I don&#39;t want it to be entered every time in my private trusted computer. So we need <code>ssh-agent</code> to handle that.</p>
<div class="highlight"><pre><span class="c"># install the openssh-client package if you&#39;re on Debian/Ubuntu</span>
<span class="nv">$ </span>sudo apt-get install openssh-client

<span class="c"># the ssh-add and ssh-agent tools will be available after the installation, but you need to start ssh-agent in your .bashrc script</span>
<span class="nv">$ </span>vi ~/.bashrc
<span class="nb">eval</span> <span class="k">$(</span>ssh-agent<span class="k">)</span>

<span class="c"># add the ssh key to ssh-agent (the passphrase will be asked once)</span>
<span class="nv">$ </span><span class="nb">cd</span> ~/.ssh
<span class="nv">$ </span>ssh-add -k gitub_rsa
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Ubuntu Desktop Sharing to Mac OSX]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/02/ubuntu-desktop-sharing-to-osx.html"/>
        <published>2016-02-26T10:52:00+08:00</published>
        <updated>2016-02-26T11:11:36+08:00</updated>
        <id>http://terryoy.github.io/2016/02/ubuntu-desktop-sharing-to-osx.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#osx" term="osx" label="osx" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>I have a spare laptop rest in my house which I seldom use(I major use my macbook pro for work), but it&#39;s still good for developing projects and runs Linuxi Mint. So I want it to be available any time when I&#39;m at home so I could use it to continue my side project works. With ssh and VNC, I can setup both the command line and desktop environment online so I don&#39;t need to open the laptop, but use my macbook to access the environment. Then I have the convenience that the laptop can put anywhere in the house and clear my desktop.</p>
<p>I found <a href="http://www.fiz-ix.com/2012/12/ubuntu-to-mac-os-x-screen-sharing-with-vinagre/">this post</a> very useful to do the trick. It uses &ldquo;vino&rdquo; with easily setup steps, and you can get &ldquo;Vinagre&rdquo; VNC client on Linux ox,  but you need some notices about the access on OSX. So I write my process here.</p>

<h3 id="toc_0">1. Setup Vino(VNC for gnome)</h3>
<p>Just reference the post. </p>
<div class="highlight"><pre><span class="nv">$ </span>sudo apt-get vino
<span class="c"># the preferences is the same as &quot;Desktop Sharing&quot; preference panel in Linux Mint</span>
<span class="nv">$ </span>vino-preferences
</pre></div>
<p>You can set up the items just as the post said in vino-preferences, but on Linux Mint it lacks out the &ldquo;Advanced settings&rdquo; mentioned in the post. So you need &ldquo;dconf-editor&rdquo; to manually set it.</p>
<div class="highlight"><pre><span class="nv">$ </span>sudo apt-get install dconf-editor
<span class="nv">$ </span>dconf-editor
</pre></div>
<p>Find the config item in dconf-editor with path <strong>&ldquo;desktop.gnome.remote-access&rdquo;</strong>. You need to uncheck the &ldquo;require encryption&rdquo; to support OSX, otherwise the authentication is unsupported on OSX.</p>

<h3 id="toc_1">2. Using Screen Sharing on Mac OSX</h3>
<p>Turn on the &ldquo;Spotlight&rdquo; with keyboard shortcut <code>cmd+K</code>, enter &ldquo;screen sharing&rdquo; and you can find the default desktop sharing client app on Mac OSX.</p>
<p>Type &ldquo;vnc://your_server_ip:5900&rdquo; and then you get the prompt to enter password for the access. That&#39;s it!</p>

<h3 id="toc_2">3. More</h3>
<p>The post also talked about using the <code>avahi</code> service to broadcast the desktop sharing service to OSX. It is an advanced option to try, I will update it if I have tried.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[VirtualBox Command Line Tricks]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/02/vbox-cmd-tools-tricks.html"/>
        <published>2016-02-17T11:01:00+08:00</published>
        <updated>2017-01-10T17:41:18+08:00</updated>
        <id>http://terryoy.github.io/2016/02/vbox-cmd-tools-tricks.html</id>
        <category scheme="http://terryoy.github.io/tag/#shell" term="shell" label="shell" />
        <category scheme="http://terryoy.github.io/tag/#virtualbox" term="virtualbox" label="virtualbox" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Sometimes we need to work with VirtualBox&#39;s command line tools to make things done. Here are a collections of tasks I encountered.</p>

<h3 id="toc_0">1. Converting an Linux .img format to a .vdi (VirtualBox disk)</h3>
<div class="highlight"><pre><span class="nv">$ </span>VBoxManage convertfromraw mydisk.img mydisk.vdi --format vdi
</pre></div>

<h3 id="toc_1">2. Mount virtual disk on your ubuntu system</h3>
<p>In linux, we can use a the <code>qemu-nbd</code> and <code>kpartx</code> to mount a .vdi file on a path. The <em>qemu-nbd</em> tool can create a block device to enable it to be share via NBD(Network Block Device) protocol. Then, we will use <code>kpartx</code> to create device maps from the partition tables of the device, which makes the partition of the image mountable.</p>
<div class="highlight"><pre><span class="c"># (prerequisites] install the dependencies</span>
<span class="nv">$ </span>sudo apt-get install qemu-utils kpartx

<span class="c"># to mount the device</span>
<span class="nv">$ </span>sudo modprobe -nbd
<span class="nv">$ </span>sudo qemu-nbd -c /dev/nbd0 &lt;vdi_file&gt;
<span class="nv">$ </span>sudo kpartx -a /dev/nbd0
<span class="nv">$ </span>sudo mount /dev/mapper/nbd0p1 /mnt/&lt;mount_point&gt;

<span class="c"># delete the device when no longer needed</span>
<span class="nv">$ </span>sudo umount /mnt/&lt;mount_point&gt;
<span class="nv">$ </span>sudo qemu-nbd -d /dev/nbd0
</pre></div>
<p>(&hellip;to be continued)</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Multiple Arguments in Python]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/02/args-kwargs-python.html"/>
        <published>2016-02-03T16:05:00+08:00</published>
        <updated>2016-02-03T16:57:01+08:00</updated>
        <id>http://terryoy.github.io/2016/02/args-kwargs-python.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>This article tells about how to use variable number of arguments in Python functions.</p>

<h3 id="toc_0">1. Passing Multiple Arguments</h3>
<p>The meaning of &ldquo;args&rdquo; and &ldquo;kwargs&rdquo; we often used as the multiple arguments are &ldquo;normal(unnamed) arguments&rdquo; and &ldquo;keyword(named) arguments&rdquo;. Try the below in python and you can see it&#39;s actually the difference of a tuple and a dictionary.</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span><span class="k">def</span> <span class="nf">play</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">kwargs</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span><span class="n">play</span><span class="p">()</span>
<span class="p">()</span>
<span class="p">{}</span>
</pre></div>
<p>You should use the order of specific arguments, unnamed arguments, and named arguments when defining a function:</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">arg_order</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</pre></div>

<h3 id="toc_1">2. How to pass arguments from one function to another</h3>
<p>Below are a list of examples to show you the result of different methods of multiple arguments:</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">a</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
<span class="o">...</span>   <span class="k">print</span><span class="p">(</span><span class="s">&quot;unnamed: {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">args</span><span class="p">))</span>
<span class="o">...</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
<span class="n">unnamed</span><span class="p">:</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">b</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<span class="o">...</span>   <span class="k">print</span><span class="p">(</span><span class="s">&quot;named: {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">kwargs</span><span class="p">))</span>
<span class="o">...</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">named</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>

<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">c</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<span class="o">...</span>   <span class="k">print</span><span class="p">(</span><span class="s">&quot;full:&quot;</span><span class="p">)</span>
<span class="o">...</span>   <span class="k">print</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
<span class="o">...</span>   <span class="n">a</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
<span class="o">...</span>   <span class="n">b</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
<span class="o">...</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<span class="o">...</span>   <span class="n">c</span><span class="p">(</span><span class="mi">123</span><span class="p">,</span> <span class="mi">456</span><span class="p">,</span> <span class="mi">789</span><span class="p">,</span> <span class="n">we</span><span class="o">=</span><span class="s">&quot;we&quot;</span><span class="p">,</span> <span class="n">love</span><span class="o">=</span><span class="s">&quot;love&quot;</span><span class="p">,</span> <span class="n">it</span><span class="o">=</span><span class="s">&quot;it&quot;</span><span class="p">)</span>
<span class="o">...</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">test</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span> <span class="n">we</span><span class="o">=</span><span class="s">&quot;we&quot;</span><span class="p">,</span> <span class="n">love</span><span class="o">=</span><span class="s">&quot;love&quot;</span><span class="p">,</span> <span class="n">it</span><span class="o">=</span><span class="s">&quot;it&quot;</span><span class="p">)</span>
<span class="n">full</span><span class="p">:</span>
<span class="mi">123</span>
<span class="n">unnamed</span><span class="p">:</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
<span class="n">named</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;we&#39;</span><span class="p">:</span> <span class="s">&#39;we&#39;</span><span class="p">,</span> <span class="s">&#39;love&#39;</span><span class="p">:</span> <span class="s">&#39;love&#39;</span><span class="p">,</span> <span class="s">&#39;it&#39;</span><span class="p">:</span> <span class="s">&#39;it&#39;</span><span class="p">}</span>
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Raspberry Pi Hardware GPIO with Python]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/09/rpi-hardware-begin-gpio-python.html"/>
        <published>2015-09-06T20:02:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2015/09/rpi-hardware-begin-gpio-python.html</id>
        <category scheme="http://terryoy.github.io/tag/#rpi" term="rpi" label="rpi" />
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#hardware" term="hardware" label="hardware" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>This article is for beginner to learn how to work with RPi.GPIO. It collects a bunch of useful information and examples of GPIO/SPI/I2C programs.</p>

<h3 id="toc_0">1. Raspberry Pi Hardware Documentation</h3>
<p>First of all, the hardware documentation for rpi is here:
<a href="https://www.raspberrypi.org/documentation/hardware/README.md">https://www.raspberrypi.org/documentation/hardware/README.md</a></p>
<p>GPIO Pin out: <a href="http://pi.gadgetoid.com/pinout">http://pi.gadgetoid.com/pinout</a>. Now here&#39;s a screenshot of the pinouts.</p>
<p><img src="http://terryoy-github.u.qiniudn.com/blog/2015/rpi-gpio-pinout.png" alt="http://terryoy-github.u.qiniudn.com/blog/2015/rpi-gpio-pinout.png"/></p>
<p>SPI: <a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/spi/README.md">https://www.raspberrypi.org/documentation/hardware/raspberrypi/spi/README.md</a></p>
<p>Low level Peripherals: <a href="http://elinux.org/RPi_Low-level_peripherals">http://elinux.org/RPi_Low-level_peripherals</a></p>

<h3 id="toc_1">2. Basic GPIO</h3>
<p>(to be continued)</p>

<h3 id="toc_2">References:</h3>
<p>Sparkfun&#39;s tutorials:
<a href="https://learn.sparkfun.com/tutorials/raspberry-gpio/hardware-setup">learn.sparkfun.com/tutorials/raspberry-gpio/hardware-setup</a>
<a href="https://learn.sparkfun.com/tutorials/raspberry-gpio/python-rpigpio-example">learn.sparkfun.com/tutorials/raspberry-gpio/python-rpigpio-example</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Linux Server Security Useful Commands]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/06/some-useful-linux-server-security-commands.html"/>
        <published>2015-06-27T22:31:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2015/06/some-useful-linux-server-security-commands.html</id>
        <category scheme="http://terryoy.github.io/tag/#server" term="server" label="server" />
        <category scheme="http://terryoy.github.io/tag/#security" term="security" label="security" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>When suspecting your server is broken into, below is some tricks to do the server audit.</p>

<h3 id="toc_0">1. Use &ldquo;last&rdquo; command to check login sessions</h3>
<div class="highlight"><pre><span class="nv">$ </span>last
terryoy  pts/0        58.251.197.153   Sat Jun 27 21:42   still logged in   
terryoy  pts/2        113.116.1.68     Tue Jun 23 14:40 - 16:14  <span class="o">(</span>01:34<span class="o">)</span>    
terryoy  pts/0        113.116.1.68     Tue Jun 23 14:38 - 16:14  <span class="o">(</span>01:35<span class="o">)</span>    
terryoy  pts/0        183.16.85.159    Tue Jun 23 09:37 - 14:02  <span class="o">(</span>04:24<span class="o">)</span>    
terryoy  pts/0        183.16.197.223   Mon Jun 22 17:47 - 20:10  <span class="o">(</span>02:22<span class="o">)</span>    
terryoy  pts/6        183.16.195.96    Thu Jun 18 11:08 - 15:23  <span class="o">(</span>04:14<span class="o">)</span>    
terryoy  pts/5        183.16.195.96    Thu Jun 18 11:08 - 15:23  <span class="o">(</span>04:14<span class="o">)</span>    
terryoy  pts/2        183.16.190.37    Thu Jun 18 10:37 - 13:06  <span class="o">(</span>02:29<span class="o">)</span>    
terryoy  pts/0        183.16.190.37    Thu Jun 18 10:01 - 13:01  <span class="o">(</span>02:59<span class="o">)</span>
</pre></div>

<h3 id="toc_1">2. Use &ldquo;lastlog&rdquo; to check all user&#39;s last login time</h3>
<div class="highlight"><pre><span class="nv">$ </span>lastlog
Username         Port     From             Latest
root             pts/2    27.45.56.68      Sat Feb 21 15:21:40 +0800 2015
daemon                                     **Never logged in**
bin                                        **Never logged in**
sys                                        **Never logged in**
sync                                       **Never logged in**
games                                      **Never logged in**
man                                        **Never logged in**
lp                                         **Never logged in**
mail                                       **Never logged in**
news                                       **Never logged in**
uucp                                       **Never logged in**
proxy                                      **Never logged in**
</pre></div>

<h3 id="toc_2">3. Check &ldquo;/var/log/auth.log&rdquo;</h3>
<div class="highlight"><pre><span class="nv">$ </span>sudo less /var/log/auth.log
...
Jun 27 21:35:01 iZ940ou5p7nZ CRON<span class="o">[</span>14089<span class="o">]</span>: pam_unix<span class="o">(</span>cron:session<span class="o">)</span>: session closed <span class="k">for </span>user root
Jun 27 21:42:55 iZ940ou5p7nZ sshd<span class="o">[</span>14108<span class="o">]</span>: Accepted password <span class="k">for </span>terryoy from 58.251.197.153 port 62430 ssh2
Jun 27 21:42:55 iZ940ou5p7nZ sshd<span class="o">[</span>14108<span class="o">]</span>: pam_unix<span class="o">(</span>sshd:session<span class="o">)</span>: session opened <span class="k">for </span>user terryoy by <span class="o">(</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">)</span>
Jun 27 21:45:01 iZ940ou5p7nZ CRON<span class="o">[</span>14187<span class="o">]</span>: pam_unix<span class="o">(</span>cron:session<span class="o">)</span>: session opened <span class="k">for </span>user root by <span class="o">(</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">)</span>
Jun 27 21:45:01 iZ940ou5p7nZ CRON<span class="o">[</span>14187<span class="o">]</span>: pam_unix<span class="o">(</span>cron:session<span class="o">)</span>: session closed <span class="k">for </span>user root
Jun 27 21:53:30 iZ940ou5p7nZ sudo:  terryoy : <span class="nv">TTY</span><span class="o">=</span>pts/0 ; <span class="nv">PWD</span><span class="o">=</span>/home/terryoy ; <span class="nv">USER</span><span class="o">=</span>root ; <span class="nv">COMMAND</span><span class="o">=</span>/usr/bin/apt-get install acct
Jun 27 21:53:30 iZ940ou5p7nZ sudo: pam_unix<span class="o">(</span>sudo:session<span class="o">)</span>: session opened <span class="k">for </span>user root by terryoy<span class="o">(</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">)</span>
Jun 27 21:53:39 iZ940ou5p7nZ sudo: pam_unix<span class="o">(</span>sudo:session<span class="o">)</span>: session closed <span class="k">for </span>user root
...
</pre></div>

<h3 id="toc_3">4. Use &ldquo;acct&rdquo; for system accounting</h3>
<p>The &ldquo;acct&rdquo; package is a set of utilities for system accounting. </p>

<pre><code>* ac, print stats about user's connect time
* accton, turn process accounting on or off
* last, listing of last logged in users
* lastcomm, print info about previous executed commands
* sa, summarize accounting info
* dump-utmp, print an utmp file in human readable format
* dump-acct, print an acct file in human readable format</code></pre>
<div class="highlight"><pre><span class="c"># list user&#39;s login session time by date</span>
<span class="nv">$ </span>ac -p -d

<span class="c"># display user&#39;s last commands</span>
<span class="nv">$ </span>lastcomm &lt;user_name&gt;
</pre></div>

<h3 id="toc_4">Reference to secure ubuntu server</h3>
<p><a href="https://www.ftmon.org/blog/secure-ubuntu-server/">www.ftmon.org/blog/secure-ubuntu-server/</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Intel Edison Get Started]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/06/edison-get-started.html"/>
        <published>2015-06-03T16:15:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2015/06/edison-get-started.html</id>
        <category scheme="http://terryoy.github.io/tag/#programming" term="programming" label="programming" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>This guide is about the initial steps for me starting development on Intel Edison platform.</p>

<h3 id="toc_0">1. The Board and Setting Up Serial Communication</h3>
<p>The board I use to develop with Edison is the <a href="http://www.seeedstudio.com/depot/Intel-Edison-for-Arduino-p-2149.html">Intel Edison for Arduino</a> board. So first plug the Edison module on the board; secondary, I have the 6.5V 2A DC connected to supply the power to the board (or you could power up the board with the micro-USB in the middle); third, a micro-USB wire connect to the board for serial communication.</p>
<p>I&#39;m using minicom on Mac OSX for the serial connection, but you can also use <code>screen</code> on Mac OSX and Linux(see the reference at the end of this section).</p>
<p>If you forgot the root password, here&#39;s the way to recover it: </p>

<pre><code>* on booting, press any key to stop the process
* on the &quot;boot&gt;&quot; command line prompt, type ```run do_ota``` to redo the flashing process.</code></pre>
<p>Then you end up with a login using &ldquo;root&rdquo; as user name and no password.</p>

<ul>
<li><a href="https://software.intel.com/zh-cn/assembling-intel-edison-board-with-arduino-expansion-board">Reference for assembling</a></li>
<li><a href="https://software.intel.com/zh-cn/setting-up-serial-terminal-on-system-with-linux">Reference for setting up serial on Linux</a></li>
<li><a href="https://software.intel.com/zh-cn/setting-up-serial-terminal-on-system-with-mac-os-x">Reference for setting up serial on Mac</a></li>
</ul>

<h3 id="toc_1">2. Setting up WiFi</h3>
<p>The next thing to do is to setup the WiFi on Edison, because a large part of the development process happens on WiFi.</p>
<div class="highlight"><pre><span class="nv">$ </span>configure_edison --wifi

<span class="c"># check the wifi status</span>
<span class="nv">$ </span>wpa_cli status
</pre></div>
<p>Follow the instructions of this program to complete the scanning, choosing hotspot, and reboot with WiFi.</p>
<p>By default, <code>ssh</code> is restricted to usb, so you need to disable the restriction by using <code>configure_edison --setup</code> to setup the device name and password. It will automatically update the file &#39;/lib/systemd/system/sshd.socket&#39; and comment out this line &ldquo;BindToDevice=usb0&rdquo;. (need reboot to take effect)</p>

<ul>
<li><a href="https://software.intel.com/zh-cn/connecting-your-intel-edison-board-using-wifi">Reference for setting up WiFi</a></li>
</ul>

<h3 id="toc_2">3. Blink the LED</h3>
<p>(to be continued when I get the board&hellip;)</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[A Template for Program Readme on Github]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/06/program-readme-template.html"/>
        <published>2015-06-03T16:15:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2015/06/program-readme-template.html</id>
        <category scheme="http://terryoy.github.io/tag/#programming" term="programming" label="programming" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>When writing a Program, the developer should be clear about the purpose, to eliminate time wasted. Refering to the <a href="http://textfiles.com/programming/writprog.pro">How to Program</a>, I propose a documatation template companied with a Software Development Life Cycle to ensure this.</p>

<pre><code>1. SPECIFICATION
2. PROGRAM DESIGN
3. CODE DESIGN
4. CONSTRUCTION AND DESIGN</code></pre>
<p>So, starting a project on github, I think we should follow a basic documentation structure to answer each questions, to ensure that your purpose is clear enough.</p>

<h3 id="toc_0">1. Speficication</h3>
<p>In this stage, four things matter.</p>

<ul>
<li><p>User Interface</p>
<p>in what approach does user interact with the program?
what input/output?
command line? menus? how much freedom allowed?</p></li>
<li><p>Algorithm</p>
<p>what specific computation behind the program?
what method do we use?</p></li>
<li><p>Data Structures</p>
<p>how should the data of the problem be organized?</p></li>
<li><p>[Generality]</p>
<p>is it used only in a small number of situations? or is it general purpose of wide variety of circumstances?
you need fewer choices if made for a small number of situations, and more choices and more commands for large number of situations</p></li>
<li><p>[Robustness]
how gracefully does the program respond to bad data or bad commands?</p></li>
</ul>

<h3 id="toc_1">2. Program Design</h3>
<p>A design of the program may be often represented by a structure chart, but it&#39;s not the most important thing. Instead, you should divied the large program into <strong>subroutines</strong>.</p>

<ul>
<li>Design Structure
top level routines
    sub routines</li>
</ul>
<p>There&#39;re a few ideas for evaluating the desgin:</p>

<pre><code>1. Keep subroutines short
2. Keep subroutines single-purpose
3. Keep calling sequence short
4. Communicate data through calling sequences
5. Limit use of flag variables
6. Make design hierarchical</code></pre>

<h3 id="toc_2">[3. Setup and Testing]</h3>

<h3 id="toc_3">[4. About and License]</h3>
<p><em>(Since the original post discontinued, I have to complete the rest of the template myself.)</em></p>
<p>Following is a template in markdown:</p>

<pre><code>### 1. Specification

##### User Interface

##### Algorithms

##### Data Structures

##### [Generality]

##### [Robustness]

### 2. Program Design

##### Design Structure

##### Public Interface

### 3. Setup and Testing

### 4. About

### 5. License</code></pre>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Create a Root CA and Self-Sign Certificate for SSL]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/02/create-ssl-ca-root-and-self-sign.html"/>
        <published>2015-02-23T11:03:00+08:00</published>
        <updated>2017-04-27T16:20:42+08:00</updated>
        <id>http://terryoy.github.io/2015/02/create-ssl-ca-root-and-self-sign.html</id>
        <category scheme="http://terryoy.github.io/tag/#server" term="server" label="server" />
        <category scheme="http://terryoy.github.io/tag/#security" term="security" label="security" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Concepts</h3>
<p>Nowadays we often have HTTPS protected web access scenario, however it&#39;s expensive to purchase a certificates from authority if you&#39;re just running a small site. So it&#39;s better to create your own certificates and use your own SSL protection.</p>
<p>The steps can be roughly described as below:</p>

<pre><code>1. Create a private key (as Root CA Key), keep this very private
2. Self-sign a root certificate
3. Install root CA on your various workstations
4. Create a CSR(Certificate Signing Request) for each of your authorized needed circumstances(device, server, client, etc.)
5. Sign CA with root CA Key</code></pre>

<h3 id="toc_1">2. Generate Root CA(Certificate Authority)</h3>
<p>The first part is to create a private key and the CA, which will be used as the root CA to sign certificates.</p>
<div class="highlight"><pre><span class="c">## Step 1: Create a private key</span>

<span class="c"># generate a private root key</span>
<span class="nv">$ </span>openssl genrsa -out rootCA.key 2048
<span class="c"># (or) generate a private root key with passphrase protection; and if you forgot the password, you need to do everything again</span>
<span class="nv">$ </span>openssl genrsa -out rootCA.key 2048 -des3


<span class="c">## Step 2: Self-sign a certificate</span>

<span class="nv">$ </span>openssl req -x509 -new -nodes -key rootCA.key -days 3650 -out rootCA.pem
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter <span class="s1">&#39;.&#39;</span>, the field will be left blank.
-----
Country Name <span class="o">(</span>2 letter code<span class="o">)</span> <span class="o">[</span>AU<span class="o">]</span>:CN
State or Province Name <span class="o">(</span>full name<span class="o">)</span> <span class="o">[</span>Some-State<span class="o">]</span>:Guangdong
Locality Name <span class="o">(</span>eg, city<span class="o">)</span> <span class="o">[]</span>:Shenzhen
Organization Name <span class="o">(</span>eg, company<span class="o">)</span> <span class="o">[</span>Internet Widgits Pty Ltd<span class="o">]</span>:TeaTime Production.
Organizational Unit Name <span class="o">(</span>eg, section<span class="o">)</span> <span class="o">[]</span>:IT   
Common Name <span class="o">(</span>e.g. server FQDN or YOUR name<span class="o">)</span> <span class="o">[]</span>:Terry Ouyang    
Email Address <span class="o">[]</span>:terry.ouyang@gmail.com
</pre></div>
<p>Now we have a private root key(rootCA.key), and a root CA(rootCA.pem). If you want all the clients/PC/browsers accept your authorized certificate, you need to put your root CA in their local trusted stores(e.g. OS&#39;s trusted certificates repositories).</p>

<h3 id="toc_2">3. Create Certificates and Sign with Root CA</h3>
<p>For every device you want to authorize, you need to create their own private key, then complete the signed certificate with a certificate signing request(CSR).</p>
<div class="highlight"><pre><span class="c">## Step 1: Create the private key</span>

<span class="nv">$ </span>openssl genrsa -out device.key 2048

<span class="c">## Step 2: Create the CSR (In this step you must set &quot;Common Name&quot; to your desire host if you&#39;re planning to use it as a server&#39;s certificate)</span>

<span class="nv">$ </span>openssl req -new -key device.key -out device.csr
...
Common Name <span class="o">(</span>e.g. server FQDN or YOUR name<span class="o">)</span> <span class="o">[]</span>:terryoy.github.io
...

<span class="c">## Step 3: Create the signed certificate </span>

<span class="nv">$ </span>openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 3650
</pre></div>
<p>Now you have the certificate private key(device.key) and the self CA signed certificate(device.crt). You can now use them for SSL communications.</p>

<h3 id="toc_3">4. Congifuration for Nginx</h3>
<p>Below is an example of enabling the SSL function for the service configuration.</p>
<div class="highlight"><pre>server <span class="o">{</span>
    listen 443;
    ssl on;
    ssl_certificate /etc/nginx/ssl/service.crt;
    ssl_certificate_key /etc/nginx/ssl/service.key;

    ...
<span class="o">}</span>
</pre></div>
<p>You can also check your server&#39;s certificate by the command below:</p>
<div class="highlight"><pre><span class="nv">$ </span>openssl s_client -connect www.yourexample.com:443
</pre></div>

<h3 id="toc_4">5. Setup SSL Factory on Android App</h3>
<p>There is a good reference on <a href="http://stackoverflow.com/a/6378872">stackoverflow.com</a> for this problem.</p>
<p>If you&#39;re using cocos2d-x 3.3+, it supports that you set a certificate for the HttpClient(globally), which allows you use your own certificate for SSL verification.</p>
<div class="highlight"><pre><span class="k">auto</span> <span class="n">path</span> <span class="o">=</span> <span class="n">FileUtils</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">fullPathForFilename</span><span class="p">(</span><span class="s">&quot;my_cacert.pem&quot;</span><span class="p">);</span>
<span class="n">HttpClient</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">setSSLVerification</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
</pre></div>

<h3 id="toc_5">6. ACME Client</h3>
<p><em>Update@2017: now you can use ACME clients and some free certificate service for personal HTTPS web sites.</em></p>
<p>AMCE is short for Automatic Certificate Management Environment, which requires you to run a client on your server to provide checking of the ownership of your server and domain name, and provide signed certificates based on the result.</p>
<p>Check out more information for the Free SSL/TLS Certificates: <a href="https://letsencrypt.org">letsencrypt.org</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[PostgesSQL 9 Administration QuickRef(2) - Managing Database]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/02/postgresql-admin-quickref-part2-initiating-database.html"/>
        <published>2015-02-21T16:40:00+08:00</published>
        <updated>2017-03-26T17:21:53+08:00</updated>
        <id>http://terryoy.github.io/2015/02/postgresql-admin-quickref-part2-initiating-database.html</id>
        <category scheme="http://terryoy.github.io/tag/#postgresql" term="postgresql" label="postgresql" />
        <category scheme="http://terryoy.github.io/tag/#database" term="database" label="database" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Creating a Database</h3>
<p>It&#39;s a common task to create a database and assign an access user for it. This can be done by command line or by psql queries.</p>
<div class="highlight"><pre><span class="c"># by command line</span>
<span class="nv">$ </span>su postgres
<span class="nv">$ </span>createuser -D -A -P myuser
<span class="nv">$ </span>createdb -O myuser mydb

<span class="c"># (or) a longer version for the createdb command</span>
<span class="nv">$ </span>createdb -h localhost -p 5432 -U postgres -O myuser -E UTF8 mydb
</pre></div>
<div class="highlight"><pre><span class="c1">--create database by psql client </span>
<span class="gp">postgres=#</span> <span class="k">CREATE</span> <span class="k">USER</span> <span class="n">myuser</span> <span class="k">WITH</span> <span class="k">PASSWORD</span> <span class="s1">&#39;my_password&#39;</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">mydb</span> <span class="k">WITH</span> <span class="k">OWNER</span> <span class="n">myuser</span> <span class="k">ENCODING</span> <span class="s1">&#39;UTF8&#39;</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">GRANT</span> <span class="k">ALL</span> <span class="k">PRIVILEGES</span> <span class="k">ON</span> <span class="k">DATABASE</span> <span class="s-Name">&quot;mydb&quot;</span> <span class="k">to</span> <span class="n">myuser</span><span class="p">;</span>
</pre></div>

<h3 id="toc_1">2. Configuring Connection Method</h3>
<p>Peer authentication uses system&#39;s user accounts for authentication, while MD5 authentication uses password authentication encrypted in md5.</p>
<p>Restart Postgresql service after configuration file is changed.</p>
<div class="highlight"><pre><span class="c"># Edit the file for the database access method</span>
<span class="nv">$ </span>sudo vi /etc/postgresql/9.1/main/pg_hba.conf

<span class="c"># Database administrative login by Unix domain socket</span>
<span class="nb">local   </span>all             postgres                                peer

<span class="c"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span>

<span class="c"># &quot;local&quot; is for Unix domain socket connections only</span>
<span class="nb">local   </span>all             all                                     peer
<span class="c"># IPv4 local connections:</span>
host    all             all             127.0.0.1/32            md5
<span class="c"># IPv6 local connections:</span>
host    all             all             ::1/128                 md5
<span class="c"># Allow replication connections from localhost, by a user with the</span>
<span class="c"># replication privilege.</span>
<span class="c">#local   replication     postgres                                peer</span>
<span class="c">#host    replication     postgres        127.0.0.1/32            md5</span>
<span class="c">#host    replication     postgres        ::1/128                 md5</span>


<span class="nv">$ </span>sudo service postgresql restart
</pre></div>

<h3 id="toc_2">3. Migrating Data</h3>
<p>When migrating database, usually we use migrate files with SQL and CSV format. Since SQL scripts are probably not compatible with different database provider(e.g. postgresql vs mysql), sometimes it&#39;s easier to parse data with CSV format, while SQL files are convenient to dump and import schemas between postgresql databases.</p>

<h4 id="toc_3">3.1 Export data to CSV files</h4>
<p>Note: the <code>=#</code> prefix is the prompt of <code>psql</code> command line tools.</p>
<div class="highlight"><pre><span class="c1">--Export all records from table to CSV file</span>
<span class="o">=#</span> <span class="err">\</span><span class="k">copy</span> <span class="n">my_table</span> <span class="k">to</span> <span class="s1">&#39;/path/to/table.csv&#39;</span> <span class="n">csv</span> <span class="n">header</span><span class="p">;</span>
<span class="c1">--OR</span>
<span class="o">=#</span> <span class="k">COPY</span> <span class="n">my_table</span> <span class="k">TO</span> <span class="s1">&#39;/path/to/table.csv&#39;</span> <span class="k">DELIMITER</span> <span class="s1">&#39;,&#39;</span> <span class="n">CSV</span> <span class="n">HEADER</span><span class="p">;</span>

<span class="c1">--Export a custom mquery to csv</span>
<span class="o">=#</span> <span class="k">COPY</span> <span class="p">(</span><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="k">public</span><span class="p">.</span><span class="k">user</span><span class="p">)</span> <span class="k">TO</span> <span class="s1">&#39;/path/to/user.csv&#39;</span> <span class="n">CSV</span> <span class="n">HEADER</span><span class="p">;</span>
</pre></div>

<h3 id="toc_4">3.2 Export schema and data to SQL files</h3>
<p>We&#39;ll use <code>pg_dump</code> to create postgresql export files.</p>
<div class="highlight"><pre><span class="c"># sometimes you need to specify which database version to use, due to the version mismatch of pg_dump program</span>
<span class="nv">$ </span>pg_dump --cluster 9.3/main &lt;...other stuffs&gt;


<span class="c"># export schema with &quot;-s&quot; or &quot;--schema-only&quot;</span>
<span class="nv">$ </span>pg_dump -s &lt;db_name&gt; &gt; export_schhema.sql
<span class="nv">$ </span>pg_dump --schema-only &lt;db_name&gt; &gt; export_schema.sql


<span class="c"># export data</span>
<span class="nv">$ </span>pg_dump -a &lt;db_name&gt; &gt; export_data.sql
<span class="nv">$ </span>pg_dump --data-only &lt;db_name&gt; &gt; export_data.sql
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[A JNI Guide on Android]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/11/jni-guide-on-android.html"/>
        <published>2014-11-27T16:06:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2014/11/jni-guide-on-android.html</id>
        <category scheme="http://terryoy.github.io/tag/#cpp" term="cpp" label="cpp" />
        <category scheme="http://terryoy.github.io/tag/#android" term="android" label="android" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Begin a JNI Project</h3>
<p>To create a JNI project in ADT, first is to setup NDK support for the workspace.  Open <em>&ldquo;Preferences&rdquo; -&gt; &ldquo;Android&rdquo; -&gt; &ldquo;NDK&rdquo;</em>, set the <em>NDK Locaiton</em> to your ndk root.</p>
<p>After you create a new Android project, native support is not yet enabled. Right click on the project, and select <em>&ldquo;Android Tools&rdquo; -&gt; &ldquo;Add Native Support&hellip;&rdquo;</em>. It prompts a &ldquo;Library Name&rdquo; input for you to type in the native library name you want to use. On succeed, it will generate a &ldquo;jni&rdquo; folders containing a &ldquo;.cpp&rdquo; file and a &ldquo;Android.mk&rdquo; makefile.</p>
<p><em>***a small hint on creating project: if you created an project without an initial activity (which it&#39;s possible when your only interest is in building an native app), you need to specify your MainActivity in the AndroidManifest.xml. On the &ldquo;Application&rdquo; sheet in Manifest editor, first add a &ldquo;Activity&rdquo; node, which connects to your Activity subclass; then create an &ldquo;Intent Filter&rdquo; node, and then an &ldquo;Action&rdquo; node and a &ldquo;Category&rdquo; node under the IntentFilter node. The Action node selects &ldquo;android.intent.action.MAIN&rdquo;, and the Category node selects &ldquo;android.intent.category.LAUNCHER&rdquo;.</em></p>

<h3 id="toc_1">2. Information on Android.mk</h3>
<p>The syntax of Android.mk is based on <a href="http://www.gnu.org/software/make/">GNU Make</a>. This file is only a snippet of the whole make process. The whole process also includes an Application.mk and a Android.mk provided by the NDK build system. </p>
<div class="highlight"><pre><span class="c"># my-dir is a macro defined by Android, which provides the path for where the make file is.</span>
<span class="nv">LOCAL_PATH</span> <span class="o">:=</span> <span class="k">$(</span>call my-dir<span class="k">)</span>

<span class="c"># CLEAR_VARS clears all the &quot;LOCAL_*&quot; variables except &quot;LOCAL_PATH&quot;</span>
<span class="cp">include $(CLEAR_VARS)</span>

<span class="nv">LOCAL_MODULE</span>    <span class="o">:=</span> jnidemo <span class="c"># provide the lib name (e.g. libjnidemo.so), and also the name to load in Java Class</span>
<span class="nv">LOCAL_SRC_FILES</span> <span class="o">:=</span> jnidemo.cpp <span class="c"># a source file list to compile and build into the library</span>

<span class="c">#LOCAL_SHARE_LIBRARIES := avilib # (optional 1): if you depends on other libraries, you can load it here</span>

<span class="c"># build the library</span>
<span class="cp">include $(BUILD_SHARED_LIBRARY)</span>

<span class="c">#$(call import-module,transcode/avilib) # (optional 2): put the 3rd party library outside project folder, under NDK_MODULE_PATH and import it using this line</span>
</pre></div>
<p><em>* If you have more than one library to build, just duplicate the part from &ldquo;include $(CLEAR_VARS)&rdquo; to &ldquo;include $(BUILD_SHARED_LIBRARY)&rdquo;.</em></p>
<p><em>* NDK build also supports executable build, only by replacing &ldquo;include $(BUILD_SHARED_LIBRARY)&rdquo; with &ldquo;include $(BUILD_EXECUTABLE)&rdquo;, the output will also be in libs/<arch> folder, but will not be packed into an .apk file.</em></p>
<p>_* If you need to trigger build under command line, go to the project root folder, and type <code>ndk-build</code> to build.</p>

<h3 id="toc_2">3. Import JNI library in Java Class</h3>
<p>Use the code below to load a library in the Java class.</p>
<div class="highlight"><pre><span class="kd">static</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">&quot;jnidemo&quot;</span><span class="o">);</span>
    <span class="c1">// System.load(&quot;c:/path/to/library.so&quot;); // this is not recommended since it would be platform dependent</span>
<span class="o">}</span>
</pre></div>

<h3 id="toc_3">4. Working With Native Functions</h3>
<p>There are two sides of the JNI interface: Java calling C/C++, and C/C++ calling Java. In Java, you can call a native funciton implmeneted by a C/C++ shared library; and in C/C++, you might also need to trigger Java methods inside C/C++ code. So let&#39;s talk about both respectively.</p>

<h4 id="toc_4">4.1 Java Calling C/C++</h4>
<p>In a Java class, you can define a native method which will be implmemented by C/C++ code. In this case, you can call native C/C++ functions from Java.</p>
<div class="highlight"><pre><span class="n">Class</span> <span class="n">A</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">native</span> <span class="n">String</span> <span class="nf">stringFromJNI</span><span class="o">();</span> <span class="c1">// native method</span>

    <span class="kd">static</span> <span class="o">{</span> <span class="c1">// load the shared library that contains the native method</span>
        <span class="n">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">&quot;jnidemo&quot;</span><span class="o">);</span>
    <span class="o">}</span> 
<span class="o">}</span>
</pre></div>
<p>You can use <code>javah -classpath bin/classes com.teatime.jnidemo.A</code> to generate the C/C++ header for the java native methods. It will create a &ldquo;com_teatime_jnidemo_A.h&rdquo; file as below: </p>
<div class="highlight"><pre><span class="cm">/* DO NOT EDIT THIS FILE - it is machine generated */</span>
<span class="cp">#include &lt;jni.h&gt;</span>
<span class="cm">/* Header for class com_teatime_jnidemo_A */</span>

<span class="cp">#ifndef _Included_com_teatime_jnidemo_A</span>
<span class="cp">#define _Included_com_teatime_jnidemo_A</span>
<span class="cp">#ifdef __cplusplus</span>
<span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
<span class="cp">#endif</span>
<span class="cm">/*</span>
<span class="cm"> * Class:     com_teatime_jnidemo_A</span>
<span class="cm"> * Method:    stringFromJNI</span>
<span class="cm"> * Signature: ()Ljava/lang/String;</span>
<span class="cm"> */</span>
<span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span> <span class="n">Java_com_teatime_jnidemo_A_stringFromJNI</span>
  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">);</span>

<span class="cp">#ifdef __cplusplus</span>
<span class="p">}</span>
<span class="cp">#endif</span>
<span class="cp">#endif</span>
</pre></div>
<p>Here you can see the Java method signature is converted to something have similar meaning: &ldquo;jstring&rdquo; means the Java String class, &ldquo;jobject&rdquo; is for the object instance which calls  this method. </p>

<hr/>
<p>However, you don&#39;t really want to type this command to generate every file you make, so a more convenient way is to setup a &ldquo;Run -&gt; External Tools -&gt; External Tools Configurations&rdquo; to trigger it inside Eclipse IDE. The configuration will be like below: (note that the path segment is joined by &ldquo;:&rdquo; on mac/linux and &ldquo;;&rdquo; on windows)</p>

<pre><code>Name: Generate C/C++ Header File
Location: ${system_path:javah}
Working Directory: ${project_loc}/jni
Arguments: -classpath &quot;${project_classpath}:${env_var:ANDROID_SDK_HOME}/platforms/android-15/android.jar&quot; ${java_type_name}
Refresh -&gt; Refresh Resources upon completions; The project containing the selected resource
Common -&gt; Display in favourites menu -&gt; External Tools</code></pre>

<hr/>
<p>There are type mappings betwine Java and C as below. For more information you could check out the JNI document <a href="http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/types.html">here</a>.</p>
<p><img src="http://terryoy-github.u.qiniudn.com/blog/2014/jni_primitive_types.png" alt="Primitive Types"/>
<img src="http://terryoy-github.u.qiniudn.com/blog/2014/jni_reference_types.gif" alt="Reference Types"/></p>

<h4 id="toc_5">4.2 C/C++ Calling Java</h4>
<p>In C/C++, you need to include <code>jni.h</code> and use <code>JNIEnv</code> to work with the Java methods in JVM. The JNIEnv object is to keep everything consistent inside JVM. </p>

<blockquote>
<p>typedef const struct JNINativeInterface *JNIEnv; </p>
</blockquote>
<p>There&#39;s a list of functions for JNIEnv object you can check out <a href="http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/functions.html#wp23720">here</a></p>
<p>For primitive types, you can  use directly convert to the c types directly. For  Here are some examples:</p>
<div class="highlight"><pre><span class="c1">// primitive types</span>
<span class="kt">int</span> <span class="n">cvalue</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="n">jint</span> <span class="n">value</span> <span class="o">=</span> <span class="n">cvalue</span><span class="p">;</span>

<span class="c1">// create Java string</span>
<span class="n">jstring</span> <span class="n">javaString</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&quot;Hello World!&quot;</span><span class="p">);</span>
<span class="c1">// convert Java string to C string</span>
<span class="k">const</span> <span class="n">jbyte</span> <span class="o">*</span><span class="n">str</span><span class="p">;</span>
<span class="n">jboolean</span> <span class="n">isCopy</span><span class="p">;</span>
<span class="n">str</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaString</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">isCopy</span><span class="p">);</span> <span class="c1">// isCopy tells the function to get a copy or return the original string</span>
<span class="c1">// release string after GetStringChars/GetStringUTFChars</span>
<span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaString</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>

<span class="c1">// operating array</span>
<span class="n">jintArray</span> <span class="n">javaArray</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewIntArray</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="n">javaArray</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// this only creates a java array</span>
    <span class="c1">// approach 1: you can ask for a C array pointer to operate on it</span>
    <span class="n">jint</span><span class="o">*</span> <span class="n">nativeDirectArray</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntArrayElements</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaArray</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">isCopy</span><span class="p">);</span> <span class="c1">// isCopy tells the function to get a copy or the original</span>
    <span class="c1">// ... do something</span>
    <span class="c1">// release the pointer ref, otherwise will cause memory leak</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseIntArrayElements</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaArray</span><span class="p">,</span> <span class="n">nativeDirectArray</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// last param can be: 0, JNI_COMMIT, JNI_ABORT</span>
    <span class="c1">// 0: apply the content and release the native array</span>
    <span class="c1">// JNI_COMMIT: apply the content, don&#39;t release the native array</span>
    <span class="c1">// JNI_ABORT: don&#39;t apply the content, but release the array</span>

    <span class="c1">// aproach 2: work with a local array, and submit changes when needed</span>
    <span class="n">jint</span> <span class="n">nativeArray</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntArrayRegion</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaArray</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">nativeArray</span><span class="p">);</span> <span class="c1">// copy the content to nativeArray</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">setIntArrayRegion</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaArray</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">nativeArray</span><span class="p">);</span> <span class="c1">// apply the changes back to the original array</span>
<span class="p">}</span>

<span class="c1">// calling a method</span>
<span class="n">jmethodID</span> <span class="n">isntanceMethodId</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetMethodID</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">clazz</span><span class="p">,</span> <span class="s">&quot;instanceMethod&quot;</span><span class="p">,</span> <span class="s">&quot;()Ljava/lang/String;&quot;</span><span class="p">);</span>
<span class="n">jstring</span> <span class="n">stringValue</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">CallStringMethod</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="n">instanceMethodId</span><span class="p">);</span>
</pre></div>
<p>Often you will need to checkout the method signature of the Java class, so that you can lookup the method in JNI interface. Here is a small trick to print the method signature in JNI style.</p>
<div class="highlight"><pre><span class="nv">$ </span><span class="nb">cd </span>bin/classes
<span class="nv">$ </span>javap -s com.jnidemo.MyJNIClass
</pre></div>

<h3 id="toc_6">5. References</h3>
<p>Best Practices for using Java Native Interface: <a href="http://www.ibm.com/developerworks/library/j-jni/">http://www.ibm.com/developerworks/library/j-jni/</a> <br/>
JNI Documentation: <a href="http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/jniTOC.html">http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/jniTOC.html</a> <br/></p>
]]>
        </content>
    </entry>
</feed>