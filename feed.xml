<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Hello, World!</title>
    <link href="http://terryoy.github.io/feed.xml" rel="self" />
    <link href="http://terryoy.github.io/" />
    <updated>2014-10-22T21:31:13+08:00</updated>
    <id>http://terryoy.github.io/</id>
    <entry>
        <title type="html"><![CDATA[A Guide of Common Git Tasks]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/10/common-git-commands.html"/>
        <published>2014-10-22T20:57:00+08:00</published>
        <updated>2014-10-22T21:31:13+08:00</updated>
        <id>http://terryoy.github.io/2014/10/common-git-commands.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#programming" term="programming" label="programming" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Initialize a Git project</h3>
<p>Usually, starting a git project include&#39;s the following steps:</p>

<ul>
<li>initialize local repository</li>
<li>add a remote repository from server</li>
<li>set up-stream and push to remote repository</li>
</ul>
<div class="highlight"><pre><span class="c"># initialize a repository</span>
<span class="nv">$ </span>git init

<span class="c"># set a new remote</span>
<span class="nv">$ </span>git remote add origin https://github.com/user/repo.git

<span class="c"># verify new remote</span>
<span class="nv">$ </span>git remote -v

<span class="c"># (you might need to pull origin/master first if it&#39;s not empty)</span>
<span class="nv">$ </span>git pull origin master

<span class="c"># push to remote repository</span>
<span class="nv">$ </span>git push --set-upstream origin master
</pre></div>

<h3 id="toc_1">2. Correct mistakes on the repository</h3>
<p>Usually there are some mistakes we will commit to git repository, so here are a few tips to correct the mistakes:</p>

<ul>
<li>Change file name/path</li>
<li>Unstage files</li>
<li>Remove sensitive data, or binary data in the history </li>
</ul>
<div class="highlight"><pre><span class="c"># change or delete files in the current version</span>
<span class="c"># -- you should not simple use the common shell command &quot;mv&quot; and &quot;rm&quot;, </span>
<span class="c"># -- because that will lose the tracking. You should use with git instead</span>
<span class="nv">$ </span>git rm &lt;somefile&gt;
<span class="nv">$ </span>git mv &lt;somefile&gt; &lt;otherfile&gt;


<span class="c"># Unstage files</span>
<span class="c"># -- usually when you execute &quot;git status&quot;, it will prompt you how to unstage files (e.g. &#39;(use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#39;)</span>
<span class="nv">$ </span>git reset HEAD &lt;file&gt;...
<span class="c"># -- (or, in some cases)</span>
<span class="nv">$ </span>git rm --cached &lt;file&gt;

<span class="c"># Remove sensitive data</span>
<span class="c"># -- This one is more difficult.</span>
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Linux C Learning (Part 1)]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/08/learning-linux-c-part-1.html"/>
        <published>2014-08-20T23:34:00+08:00</published>
        <updated>2014-08-21T09:52:53+08:00</updated>
        <id>http://terryoy.github.io/2014/08/learning-linux-c-part-1.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#programming" term="programming" label="programming" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Below is some study notes for Linux C Programming from a web course. It can serve as a coding reference in the future, or a walkthrough summary of the study. As I already have the knowledge of C Programming Language, so I will not cover the language detail here, but only the development environment under Linux.</p>

<h3 id="toc_0">1. <strong>gcc</strong> and <strong>gdb</strong></h3>
<p>There are several steps for the <strong>gcc</strong> compiler to compile a source file into a executable program. It can be set to the step output with some parameter to gcc, so you can checkout their result in file.</p>
<div class="highlight"><pre><span class="c"># Preprocessor: This is to remove comments, replace marcos(#define), and headers(#include)</span>
<span class="nv">$ </span>gcc -E test.c -o test.i

<span class="c"># (+)Compile: This compile the source code into assembly code. Different architecture has different assembly language spec</span>
<span class="nv">$ </span>gcc -S test.c -o test.s

<span class="c"># (+)Assemble: this translate assembly code into binary object. You can check the file with &quot;file test.o&quot; to see the format as a &quot;object file&quot; or a &quot;ELF LSB relocatable&quot;, and the architecture of the platform(x64, etc.)</span>
<span class="nv">$ </span>gcc -c test.c -o test.o

<span class="c"># (+)Link: This generate the final executable</span>
<span class="nv">$ </span>gcc test.c -o <span class="nb">test</span>
</pre></div>
<p>There are other useful parameters of gcc for specific purpose, for example, optimization, or debugging.</p>

<ul>
<li>&ldquo;-O[level]&rdquo;, optimzation level, (0,1,2,3)</li>
<li>&ldquo;-g&rdquo;, generate debug info, gdb needed</li>
<li>&ldquo;-Wall&rdquo;, enable all warnings and errors</li>
<li>&ldquo;-Werror&rdquo;, enable errors</li>
<li>&ldquo;-D&rdquo;, define macro in command line</li>
<li>&ldquo;-I&rdquo;, set the location of headers</li>
<li>&ldquo;-std=C99&rdquo;, use C99 standard</li>
</ul>
<p>The <strong>gdb</strong> debugging tool can be used to trace the program with some useful commands:</p>

<ul>
<li>&ldquo;l&rdquo;, list source code with line numbers</li>
<li>&ldquo;n&rdquo;, proceed next line</li>
<li>&ldquo;b [line number]&rdquo;, set a breakpoint at the code with the line number</li>
<li>&ldquo;c&rdquo;, continue running until finish or meets the next break point</li>
<li>&ldquo;p [variable]&rdquo;, print the instant value of a variable</li>
</ul>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Creating A New Database in MySql]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/06/create-database-mysql.html"/>
        <published>2014-06-04T14:40:00+08:00</published>
        <updated>2014-09-15T22:30:02+08:00</updated>
        <id>http://terryoy.github.io/2014/06/create-database-mysql.html</id>
        <category scheme="http://terryoy.github.io/tag/#database" term="database" label="database" />
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Create the database</h3>
<div class="highlight"><pre><span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">mytestdb</span><span class="p">;</span>
<span class="k">show</span> <span class="n">databases</span><span class="p">;</span>
</pre></div>

<h3 id="toc_1">2. Create a user and grant access</h3>
<div class="highlight"><pre><span class="k">CREATE</span> <span class="k">USER</span> <span class="s1">&#39;myuser&#39;</span><span class="o">@</span><span class="s1">&#39;localhost&#39;</span> <span class="n">IDENTIFIED</span> <span class="k">BY</span> <span class="s1">&#39;my_password&#39;</span><span class="p">;</span>

<span class="k">GRANT</span> <span class="k">ALL</span> <span class="k">PRIVILEGES</span> <span class="k">ON</span> <span class="n">mytestdb</span><span class="p">.</span><span class="o">*</span> <span class="k">TO</span> <span class="s1">&#39;myuser&#39;</span><span class="o">@</span><span class="s1">&#39;localhost&#39;</span><span class="p">;</span> 

<span class="c1">-- or alternatively, with more powerful access</span>
<span class="k">GRANT</span> <span class="k">ALL</span> <span class="k">PRIVILEGES</span> <span class="k">ON</span> <span class="n">mytestdb</span><span class="p">.</span><span class="o">*</span> <span class="k">TO</span> <span class="s1">&#39;admin&#39;</span><span class="o">@</span><span class="s1">&#39;%&#39;</span> <span class="k">WITH</span> <span class="k">GRANT</span> <span class="k">OPTION</span><span class="p">;</span>
</pre></div>

<h3 id="toc_2">3. Login with the User</h3>
<div class="highlight"><pre>mysql -u myuser -p mytestdb
</pre></div>

<h3 id="toc_3">4. Import a SQL dump into database</h3>
<div class="highlight"><pre><span class="n">USE</span> <span class="n">mytestdb</span><span class="p">;</span>
<span class="k">source</span> <span class="n">db_dump</span><span class="p">.</span><span class="k">sql</span><span class="p">;</span>
</pre></div>
<p>Or you can use a command line:</p>
<div class="highlight"><pre>mysql -u dbuser -p <span class="o">[</span>-h host<span class="o">]</span> dbname &lt; dbdump.sql
</pre></div>
<p>Exporting in command line is similar, using &ldquo;mysqldump&rdquo; command:</p>
<div class="highlight"><pre>mysqldump -u dbuser -p dbname &gt; dbdump.sql
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Use Ctypes to Wrap C Libraries in Python]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/03/using-ctypes-to-wrap-c-library.html"/>
        <published>2014-03-23T07:57:00+08:00</published>
        <updated>2014-03-31T11:39:52+08:00</updated>
        <id>http://terryoy.github.io/2014/03/using-ctypes-to-wrap-c-library.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>In Linux, many libraries are provided in C dll with headers. It is not easy to try with the features if you&#39;re a Python programmer, unless you know how to work with C library i Python.</p>
<p>There is a tool to do it, which is <em><strong>ctypes</strong></em>. You can operate on data types, structs, pointers and functions with it. Now here is a brief guide on how to do it. <a href="http://stackoverflow.com/questions/1942298/wrapping-a-c-library-in-python-c-cython-or-ctypes">Here</a> is also a comparison of ctypes with other solutions.</p>

<h3 id="toc_0">1. Loading Libraries</h3>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">ctypes</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">CDLL</span><span class="p">(</span><span class="s">&#39;libc.so.6&#39;</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span><span class="o">.</span><span class="n">rand</span><span class="p">()</span>
<span class="mi">1804289383</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span><span class="o">.</span><span class="n">atoi</span><span class="p">(</span><span class="s">&quot;12345&quot;</span><span class="p">)</span>
<span class="mi">12345</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libtest</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">CDLL</span><span class="p">(</span><span class="s">&#39;./test.so&#39;</span><span class="p">)</span> <span class="c"># you can also load the shared library by location, but you cannot load static library</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">ctypes.util</span> <span class="kn">import</span> <span class="n">find_library</span> <span class="c"># if you need to find the library name</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">find_library</span><span class="p">(</span><span class="s">&#39;c&#39;</span><span class="p">)</span>
<span class="s">&#39;libc.so.6&#39;</span>
</pre></div>
<p>The &ldquo;ctypes.CDLL()&rdquo; method will return a class that wraps a Standard C library. Alternatively, there is a &ldquo;ctypes.WinDLL()&rdquo; method that wraps a Windows stdcall library.</p>
<p>Ctypes assumes that all methods accept &ldquo;int&rdquo; or &ldquo;char*&rdquo; as parameters and return &ldquo;int&rdquo;, in other cases it doesn&#39;t work properly. So we&#39;ll need to define some attributes for the functions to fix that.</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span><span class="o">.</span><span class="n">atof</span><span class="p">(</span><span class="s">&quot;12345.123&quot;</span><span class="p">)</span>
<span class="mi">531599</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span><span class="o">.</span><span class="n">atof</span><span class="o">.</span><span class="n">restype</span><span class="o">=</span><span class="n">ctypes</span><span class="o">.</span><span class="n">c_double</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span><span class="o">.</span><span class="n">atof</span><span class="p">(</span><span class="s">&quot;12345.123&quot;</span><span class="p">)</span>
<span class="mf">12345.123</span>
</pre></div>
<p>So every function in the library you can have three attributes to handle that: </p>

<ul>
<li>  <strong><em>func</em>.argtypes</strong> = [ ]       - a sequence of arguments </li>
<li>  <strong><em>func</em>.restype</strong> = xxx        - the type of return value </li>
<li>  <strong><em>func</em>.errcheck</strong> = method(result, func, args)        - a method that manipulates the <em>result</em>(return value) of the executed <em>func</em>, and also passed with the original <em>args</em> of this execution. </li>
</ul>
<p><a href="http://docs.python.org/2/library/ctypes.html#fundamental-data-types">Here</a> is a list of fundamental data types that you could use in <em>argtypes</em> and <em>restype</em>.</p>

<h3 id="toc_1">2. Structures and Pointers</h3>
<p>Since we&#39;ll need to define the parameters of the C functions, we need to have a way to work with structure and pointers.</p>
<p>With Ctypes, we can define a structure class by deriving from <em>ctype.Structure</em>.</p>
<div class="highlight"><pre><span class="c"># in C we have this structure:</span>
<span class="c">#</span>
<span class="c"># struct Point {</span>
<span class="c">#     double x, y;</span>
<span class="c"># }</span>
<span class="c">#</span>

<span class="c"># in Python we create this class to represent a structure</span>
<span class="k">class</span> <span class="nc">Point</span><span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">Structure</span><span class="p">):</span>
    <span class="n">_fields_</span> <span class="o">=</span> <span class="p">[(</span><span class="s">&#39;x&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_double</span><span class="p">),</span>
        <span class="p">(</span><span class="s">&#39;y&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_double</span><span class="p">)];</span>
</pre></div>
<p>If you want to define an array with ctypes, you can simply use the mutiply method:</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">int_arr</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="o">*</span><span class="mi">4</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">int_arr</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">c_long_Array_4</span><span class="s">&#39;&gt;</span>
</pre></div>
<p>We could use _ctypes.POINTER() to define the pointer type of ctype types(fundamental types and structures).</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">type_int_p</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">POINTER</span><span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">)</span> <span class="c"># type of a pointer</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">type_int_p</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">LP_c_long</span><span class="s">&#39;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">type_int_pp</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">POINTER</span><span class="p">(</span><span class="n">int_p</span><span class="p">)</span> <span class="c"># type of a pointer of the integer pointer</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">type_int_pp</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">LP_LP_c_long</span><span class="s">&#39;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">type_point_p</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">POINTER</span><span class="p">(</span><span class="n">Point</span><span class="p">)</span> <span class="c"># type of a pointer of the structure Point above</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">type_point_p</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">LP_Point</span><span class="s">&#39;&gt;</span>
</pre></div>

<h3 id="toc_2">3. Initialize Variables and Pass Arguments to C</h3>
<p>The ctypes data types all have a kind of construction method to initialize variables with values. The instance will be a ctype object with the respective value as defined in C.</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">ival</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>    <span class="c"># integer value</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ival</span>
<span class="n">c_long</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ival</span><span class="o">.</span><span class="n">value</span>      <span class="c"># you can convert it&#39;s value to a python value by the &quot;value&quot; attribute</span>
<span class="mi">100</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">dval</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_double</span><span class="p">(</span><span class="mf">200.25</span><span class="p">)</span>  <span class="c"># double value</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">dval</span>
<span class="n">c_double</span><span class="p">(</span><span class="mf">200.25</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">dval</span><span class="o">.</span><span class="n">value</span>
<span class="mf">200.25</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">sval</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_char_p</span><span class="p">(</span><span class="s">&quot;Hello, world!&quot;</span><span class="p">)</span>     <span class="c"># string value</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">sval</span>    <span class="c"># you can see the value is representing a pointer address instead of string</span>
<span class="n">c_char_p</span><span class="p">(</span><span class="mi">3071487276</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">sval</span><span class="o">.</span><span class="n">value</span>
<span class="s">&#39;Hello, world!&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">sval</span><span class="p">)</span> <span class="c"># but it can be printed as string with &quot;printf&quot; in C</span>
<span class="n">Hello</span><span class="p">,</span> <span class="n">world</span><span class="err">!</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ret</span>     <span class="c"># (the return value of &quot;printf&quot; is the printed string length)</span>
<span class="mi">13</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">structval</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>     <span class="c"># the Point structure defined above, you can also initialize like &quot;Point(0, 10)&quot;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">structval</span>
<span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">Point</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xb74466a4</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="n">structval</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">structval</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
<span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</pre></div>
<p>When we pass objects to functions, we can pass by <em>pointer</em>. In this case we&#39;ll have two companion methods <em>byref()</em> and <em>pointer()</em> that works with pointers. Also, for a pointer object you can access it&#39;s value by the <em>contents</em> attribute.
The <em>byref()</em> method create a parameter object of pointer, which you can only use in functions(notice the &ldquo;cparam&rdquo; object), while the <em>pointer()</em> method returns a pointer object which you can manipulate later.</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">intc</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">byref</span><span class="p">(</span><span class="n">intc</span><span class="p">)</span>      <span class="c"># the byref() returns a parameter object that only can be used as a foreign function&#39;s parameter(notice a &quot;cparam&quot; object). </span>
<span class="o">&lt;</span><span class="n">cparam</span> <span class="s">&#39;P&#39;</span> <span class="p">(</span><span class="mh">0xb7124a70</span><span class="p">)</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">intp</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">pointer</span><span class="p">(</span><span class="n">intc</span><span class="p">)</span>     <span class="c"># the pointer() returns a pointer object that you can further work with it</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">intp</span>
<span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">LP_c_long</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xb713392c</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">intp</span><span class="o">.</span><span class="n">contents</span>   <span class="c"># access the data to which the pointer points</span>
<span class="n">c_long</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">intp</span><span class="o">.</span><span class="n">contents</span><span class="o">.</span><span class="n">value</span>
<span class="mi">100</span>
</pre></div>

<h3 id="toc_3">4. Accessing Structure and Variables from C</h3>
<p>We need not only passing data to C functions, but also getting some pre-defined data structure or variables in C. So let&#39;s talk about a few things you want to import from C.</p>
<p>For <strong>enums</strong> in C, you&#39;ll need to define them again in Python. Since it&#39;s a representative of basic data types like integer, it&#39;s easy to act in the same way as in C.</p>
<p>For <strong>Structures</strong>, you&#39;ll need to define the similar classes, derived from ctypes. Structure, and declare the <code>_fields_</code> attributes as mentioned above in Section 2. After that, you can use <strong>in_dll()</strong> method to load an object within the library. (BTW, If you don&#39;t need to access the attribute of that object, it&#39;s not necessary to set the <code>_fields_</code> attribute.)</p>
<div class="highlight"><pre><span class="n">libaa</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">CDLL</span><span class="p">(</span><span class="s">&#39;libaa.so.1&#39;</span><span class="p">)</span> <span class="c"># the ascii-art lib</span>

<span class="k">class</span> <span class="nc">RenderSettings</span><span class="p">(</span><span class="n">Structure</span><span class="p">):</span>
    <span class="n">_pack_</span> <span class="o">=</span> <span class="mi">4</span>
    <span class="n">_fields_</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">(</span><span class="s">&#39;brightness&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">),</span>
        <span class="p">(</span><span class="s">&#39;contrast&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">),</span>
        <span class="p">(</span><span class="s">&#39;gamma&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_float</span><span class="p">),</span>
        <span class="p">(</span><span class="s">&#39;dithering_mode&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">),</span>
        <span class="p">(</span><span class="s">&#39;inversion&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">),</span>
        <span class="p">(</span><span class="s">&#39;random&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">),</span>
    <span class="p">]</span>

<span class="n">DEFAULT_RENDER_SETTINGS</span> <span class="o">=</span> <span class="n">RenderSettings</span><span class="o">.</span><span class="n">in_dll</span><span class="p">(</span><span class="n">libaa</span><span class="p">,</span> <span class="s">&#39;aa_defrenderparams&#39;</span><span class="p">)</span>
</pre></div>
<p>Sometimes the Structure object is a constant which you cannot change any value of it, it&#39;s better to have a <strong>clone()</strong> method to make a copy to chang it. The <strong>clone()</strong> method defined below can act as </p>
<div class="highlight"><pre><span class="k">class</span> <span class="nc">Structure</span><span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">Structure</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">clone</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">clone</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="bp">self</span><span class="p">)()</span>
        <span class="n">ctypes</span><span class="o">.</span><span class="n">pointer</span><span class="p">(</span><span class="n">clone</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span>
        <span class="k">return</span> <span class="n">clone</span>
</pre></div>
<p>For <strong>basic data types</strong>, it&#39;s the same way to use the in_dll() method in the simple types. (e.g. &ldquo;ctypes.c_int.in_dll(libaa, &#39;some_int&#39;)&rdquo;)</p>

<h3 id="toc_4">5. Playing with Functions</h3>
<p>In Section 1, we already talked about how to import the functions from C and use them. However there are a few things to remember. Below is an example of calling the functions. </p>

<ul>
<li>First, you should declare all the related types and structures in the function&#39;s arguments and return value. </li>
<li>Second, basic types can be auto converted into ctypes types, but for those are not, ensure they are in ctypes form.</li>
<li>Third, remember to use ctypes.pointer() or ctypes.byref() for passing the pointer arguments.</li>
</ul>
<div class="highlight"><pre><span class="c"># it&#39;s a good practice to declare the structures and the functions at first like in C </span>

<span class="c"># ... </span>
<span class="c"># declare Structures </span>
<span class="k">class</span> <span class="nc">Context</span><span class="p">(</span><span class="n">Structure</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="n">ContextPtr</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">POINTER</span><span class="p">(</span><span class="n">Context</span><span class="p">)</span>

<span class="c"># ... </span>
<span class="c"># declare functions</span>
<span class="n">aa_init</span> <span class="o">=</span> <span class="n">libaa</span><span class="o">.</span><span class="n">aa_init</span>
<span class="n">aa_init</span><span class="o">.</span><span class="n">argtypes</span> <span class="o">=</span> <span class="p">[</span><span class="n">DriverPtr</span><span class="p">,</span> <span class="n">HardwareSettingsPtr</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_void_p</span><span class="p">]</span> <span class="c"># parameters are (pointer of struct &quot;Driver&quot;, pointer of struct HardwareSetting, and a pointer of &quot;void&quot;)</span>
<span class="n">aa_init</span><span class="o">.</span><span class="n">restype</span> <span class="o">=</span> <span class="n">ContextPtr</span> 

<span class="n">aa_fastrender</span> <span class="o">=</span> <span class="n">libaa</span><span class="o">.</span><span class="n">aa_fastrender</span>
<span class="n">aa_fastrender</span><span class="o">.</span><span class="n">argtypes</span> <span class="o">=</span> <span class="p">[</span><span class="n">ContextPtr</span><span class="p">]</span> <span class="o">+</span> <span class="mi">4</span> <span class="o">*</span> <span class="p">[</span><span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">]</span> 

<span class="c"># calling aa_init() and aa_fastrender()</span>
<span class="n">context</span> <span class="o">=</span> <span class="n">aa_init</span><span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">pointer</span><span class="p">(</span><span class="n">aa_mem_d</span><span class="p">),</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">pointer</span><span class="p">(</span><span class="n">settings</span><span class="p">),</span> <span class="bp">None</span><span class="p">)</span>
<span class="c"># ...</span>
<span class="n">aa_fastrender</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span><span class="n">height</span><span class="p">)</span>
</pre></div>
<p>By now, you should have the knowledge to play with C libraries. Just start playing around with those libraries you can find in /usr/lib and /usr/include. Enjoy!</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[PostgesSQL 9 Administration QuickRef(1) - Exploring Database]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/03/postgresql-admin-quickref-part1-exploring-database.html"/>
        <published>2014-03-06T15:27:00+08:00</published>
        <updated>2014-03-06T15:36:15+08:00</updated>
        <id>http://terryoy.github.io/2014/03/postgresql-admin-quickref-part1-exploring-database.html</id>
        <category scheme="http://terryoy.github.io/tag/#postgresql" term="postgresql" label="postgresql" />
        <category scheme="http://terryoy.github.io/tag/#database" term="database" label="database" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>The most cheat sheets or quick references I found are organized by knowledge domains, but I would rather like a quick reference organized by tasks. Thus I make this reference.</p>

<h1 id="toc_0">Part I: Exploring Database</h1>

<h3 id="toc_1">1. Basic Information</h3>
<p>Default location of data files (in debian/ubuntu): <code>/var/lib/postgresql/9.1/main/</code>
Data files for an instance:
    base        -   data directory for databases 
    global      -   database catalog tables(shared across databases)
    pg_clog - transaction status files
    pg_multixact    -   row-level lock status files
    pg_subtrans -   subtransaction status files 
    pg_tblspc       -   links to external tablespaces
    pg_twophase -   prepared transaction status
    pg_xlog     -   WAL(Write-Ahead Log) transaction log
Log files: <code>/var/log/postgresql/</code></p>
<p>PostgreSQL command line programs:</p>
<div class="highlight"><pre><span class="c"># check psql version</span>
<span class="nv">$ </span>psql --version
<span class="c"># check configuration variables</span>
<span class="nv">$ </span>pg_config
<span class="c"># run a single command</span>
<span class="nv">$ </span>psql -c <span class="s2">&quot;\d&quot;</span>
</pre></div>
<p>PSQL text client:</p>
<div class="highlight"><pre><span class="c1">-- line comment</span>
<span class="o">/</span> <span class="o">*</span><span class="n">multi</span><span class="o">-</span><span class="nb">line</span> <span class="k">comment</span><span class="o">*</span> <span class="o">/</span>
<span class="c1">-- check server version</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="k">version</span><span class="p">();</span>
<span class="go">-- output query result as one column per line</span>
<span class="gp">postgres=#</span> <span class="kp">\x</span>
</pre></div>

<h3 id="toc_2">2. Server Stats</h3>
<div class="highlight"><pre><span class="c"># list databases</span>
<span class="nv">$ </span>psql -l
<span class="c"># list tables in a database</span>
<span class="nv">$ </span>psql -c <span class="s2">&quot;\d&quot;</span> -d somedb
</pre></div>
<div class="highlight"><pre><span class="c1">-- check server uptime</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">date_trunc</span><span class="p">(</span><span class="s1">&#39;second&#39;</span><span class="p">,</span> <span class="k">current_timestamp</span> <span class="o">-</span> <span class="n">pg_postmaster_start_time</span><span class="p">())</span> <span class="k">as</span> <span class="n">uptime</span><span class="p">;</span>

<span class="go">-- list database names</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">datname</span> <span class="k">from</span> <span class="n">pg_database</span><span class="p">;</span>
<span class="go">-- list tables in databases;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">table_catalog</span><span class="p">,</span> <span class="n">table_schema</span><span class="p">,</span> <span class="n">table_name</span><span class="p">,</span> <span class="n">table_type</span> <span class="k">from</span> <span class="n">information_schema</span><span class="mf">.</span><span class="k">tables</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="kp">\dt+</span>

<span class="go">-- check database size</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_database_size</span><span class="p">(</span><span class="s1">&#39;somedb&#39;</span><span class="p">);</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_database_size</span><span class="p">(</span><span class="n">current_database</span><span class="p">());</span>
<span class="go">-- check table size</span>
<span class="gp">postgres=#</span> <span class="kp">\dt+</span> <span class="ss">some_table</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_relation_size</span><span class="p">(</span><span class="s1">&#39;some_table&#39;</span><span class="p">);</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_total_relation_size</span><span class="p">(</span><span class="s1">&#39;some_table&#39;</span><span class="p">);</span> <span class="c1">-- including indexes and other related space</span>
<span class="go">-- list table sizes in order</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">table_name</span><span class="p">,</span> <span class="n">pg_total_relation_size</span><span class="p">(</span><span class="n">table_name</span><span class="p">)</span> <span class="k">as</span> <span class="n">size</span>
<span class="k">FROM</span> <span class="n">information_schema</span><span class="mf">.</span><span class="k">tables</span> <span class="k">NOT</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;information_schema&#39;</span><span class="p">,</span> <span class="s1">&#39;pg_catalog&#39;</span><span class="p">)</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">size</span> <span class="k">DESC</span><span class="p">;</span>

<span class="go">-- check online users/clients</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span>  <span class="k">from</span> <span class="n">pg_stat_activity</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">datname</span><span class="p">,</span> <span class="n">usename</span><span class="p">,</span> <span class="n">client_addr</span><span class="p">,</span> <span class="n">client_port</span> <span class="k">FROM</span> <span class="n">pg_stat_activity</span><span class="p">;</span>

<span class="go">-- track user activities(like check user&#39;s pending query)</span>
<span class="gp">postgres=#</span> <span class="k">SET</span> <span class="n">track_activities</span> <span class="o">=</span> <span class="k">on</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">datname</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">current_query</span> 
<span class="k">FROM</span> <span class="n">pg_stat_activity</span> 
<span class="k">WHERE</span> <span class="n">current_query</span> <span class="o">!=</span> <span class="s1">&#39;&lt;IDLE&gt;&#39;</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="k">current_timestamp</span> <span class="o">-</span> <span class="n">query_start</span> <span class="k">as</span> <span class="n">runtime</span><span class="p">,</span> <span class="n">datname</span><span class="p">,</span> <span class="n">usename</span><span class="p">,</span> <span class="n">current_query</span> 
<span class="k">FROM</span> <span class="n">pg_stat_activity</span>
<span class="k">WHERE</span> <span class="n">current_query</span> <span class="o">!=</span> <span class="s1">&#39;&lt;IDLE&gt;&#39;</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="mf">1</span> <span class="k">DESC</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">datname</span><span class="p">,</span> <span class="n">usename</span><span class="p">,</span> <span class="n">current_query</span>
<span class="k">FROM</span> <span class="n">pg_stat_activity</span>
<span class="k">WHERE</span> <span class="n">waiting</span><span class="p">;</span>

<span class="go">-- check who is blocking the queries</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> 
    <span class="n">w</span><span class="mf">.</span><span class="n">current_query</span> <span class="k">as</span> <span class="n">waiting_query</span><span class="p">,</span>
    <span class="n">w</span><span class="mf">.</span><span class="n">procpid</span> <span class="k">as</span> <span class="n">w_pid</span><span class="p">,</span>
    <span class="n">w</span><span class="mf">.</span><span class="n">usename</span> <span class="k">as</span> <span class="n">w_user</span><span class="p">,</span>
    <span class="n">l</span><span class="mf">.</span><span class="n">current_query</span> <span class="k">as</span> <span class="n">locking_query</span><span class="p">,</span>
    <span class="n">l</span><span class="mf">.</span><span class="n">procpid</span> <span class="k">as</span> <span class="n">l_pid</span><span class="p">,</span>
    <span class="n">l</span><span class="mf">.</span><span class="n">usename</span> <span class="k">as</span> <span class="n">l_user</span><span class="p">,</span>
    <span class="n">t</span><span class="mf">.</span><span class="n">schemaname</span> <span class="o">||</span> <span class="s1">&#39;-&#39;</span> <span class="o">||</span> <span class="n">t</span><span class="mf">.</span><span class="n">relname</span> <span class="k">as</span> <span class="n">tablename</span>
<span class="k">FROM</span> <span class="n">pg_stat_activity</span> <span class="n">w</span>
<span class="k">JOIN</span> <span class="n">pg_locks</span> <span class="n">l1</span> <span class="k">ON</span> <span class="n">w</span><span class="mf">.</span><span class="n">procpid</span> <span class="o">=</span> <span class="n">l1</span><span class="mf">.</span><span class="n">pid</span> <span class="k">AND</span> <span class="k">NOT</span> <span class="n">l1</span><span class="mf">.</span><span class="k">granted</span>
<span class="k">JOIN</span> <span class="n">pg_locks</span> <span class="n">l2</span> <span class="k">ON</span> <span class="n">l1</span><span class="mf">.</span><span class="n">relation</span> <span class="o">=</span> <span class="n">l2</span><span class="mf">.</span><span class="n">relation</span> <span class="k">AND</span> <span class="n">l2</span><span class="mf">.</span><span class="k">granted</span>
<span class="k">JOIN</span> <span class="n">pg_stat_activity</span> <span class="n">l</span> <span class="k">on</span> <span class="n">l2</span><span class="mf">.</span><span class="n">pid</span> <span class="o">=</span> <span class="n">l</span><span class="mf">.</span><span class="n">procpid</span>
<span class="k">JOIN</span> <span class="n">pg_stat_user_tables</span> <span class="n">t</span> <span class="k">ON</span> <span class="n">l1</span><span class="mf">.</span><span class="n">relation</span> <span class="o">=</span> <span class="n">t</span><span class="mf">.</span><span class="n">relid</span>
<span class="k">WHERE</span> <span class="n">w</span><span class="mf">.</span><span class="n">waiting</span><span class="p">;</span>

<span class="go">-- cancel a query</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_cancel_backend</span><span class="p">(</span><span class="n">some_processid</span><span class="p">);</span>
<span class="go">-- killing a session</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_terminate_backend</span><span class="p">(</span><span class="n">some_processid</span><span class="p">);</span>
<span class="go">-- killing &quot;idle in transaction&quot;(e.g. leaving without ending the transaction) sessions</span>
<span class="go">-- (ps, you can schedule this script to be running every minute)</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_terminate_backend</span><span class="p">(</span><span class="n">procpid</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">pg_stat_activity</span>
<span class="k">WHERE</span> <span class="n">current_query</span> <span class="o">=</span> <span class="s1">&#39;&lt;IDLE&gt; in transaction&#39;</span>
    <span class="k">and</span> <span class="k">current_timestamp</span> <span class="o">-</span> <span class="n">query_start</span> <span class="o">&gt;</span> <span class="s1">&#39;10 min&#39;</span><span class="p">;</span>

<span class="go">-- collecting daily usage statistics</span>
<span class="gp">postgres=#</span> <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">backup_stat_user_tables</span> <span class="k">as</span> 
<span class="k">SELECT</span> <span class="k">current_timestamp</span> <span class="k">as</span> <span class="n">snaptime</span><span class="p">,</span>
<span class="k">FROM</span> <span class="n">pg_stat_user_tables</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">backup_stat_user_tablese</span>
<span class="k">SELECT</span>
</pre></div>

<h3 id="toc_3">3. Schema and Table</h3>
<div class="highlight"><pre><span class="c1">-- Show definition of a table(including References to this table)</span>
<span class="gp">postgres=#</span> <span class="kp">\d+</span> <span class="ss">some_table</span>
</pre></div>
<p>(to be continue)</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Setup SSH Identity Key Login in Linux]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/01/ssh-key-based-auth-server.html"/>
        <published>2014-01-08T15:40:00+08:00</published>
        <updated>2014-01-08T15:46:42+08:00</updated>
        <id>http://terryoy.github.io/2014/01/ssh-key-based-auth-server.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#shell" term="shell" label="shell" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>This example is about how to create a new user and enable SSH public-key authentication in Ubuntu Server. It is necessary if your server is open to the public on internet.</p>

<h2 id="toc_0">1. Create a New User on Server</h2>
<p>In a traditional way, people use the command &ldquo;useradd&rdquo; to create user account, then together with other commands to setup the group, the home folder for the user.</p>
<div class="highlight"><pre><span class="nv">$ </span>useradd terry
<span class="nv">$ </span>passwd terry
<span class="nv">$ </span>mkdir /home/terry
<span class="nv">$ </span>chown -R terry:users /home/terry
</pre></div>
<p>In a debian way, there is one command which does it all: &ldquo;adduser&rdquo;.</p>
<div class="highlight"><pre><span class="nv">$ </span>adduser edmund
Adding user <span class="s1">&#39;edmund&#39;</span> ...
Adding new group <span class="s1">&#39;edmund&#39;</span> <span class="o">(</span>1001<span class="o">)</span> ...
Adding new user <span class="s1">&#39;edmund&#39;</span> <span class="o">(</span>1001<span class="o">)</span> with group <span class="s1">&#39;edmund&#39;</span> ...
Creating home directory <span class="s1">&#39;/home/edmund&#39;</span> ...
Copying files from <span class="s1">&#39;/etc/skel&#39;</span> ...
Enter new UNIX password: 
Retype new UNIX password: 
passwd: password updated successfully
Changing the user information <span class="k">for </span>edmund
Enter the new value, or press ENTER <span class="k">for </span>the default
    Full Name <span class="o">[]</span>: 
    Room Number <span class="o">[]</span>: 
    Work Phone <span class="o">[]</span>: 
    Home Phone <span class="o">[]</span>: 
    Other <span class="o">[]</span>: 
Is the information correct? <span class="o">[</span>Y/n<span class="o">]</span>
</pre></div>

<h2 id="toc_1">2. Generate SSH Key and Apply to Server</h2>
<p>With SSH key login, user require a public/private key pairs to authenticate the login. SSH can use both &ldquo;RSA&rdquo; and &ldquo;DSA&rdquo; keys, however according to the <a href="https://help.ubuntu.com/community/SSH/OpenSSH/Keys#Key-Based_SSH_Logins">ubuntu guide</a>, &ldquo;RSA&rdquo; is the only recommended choice for new keys. </p>
<p>First thing you should keep in mind, the private key should <strong>NOT</strong> allow to be accessed by anybody else(e.g. set &ldquo;700&rdquo; with chmod). We will create the RSA keys in your <strong>local</strong> machine, then copy the public key to the <strong>remote</strong> server.</p>
<div class="highlight"><pre><span class="nv">$ </span>mkdir ~/.ssh
<span class="nv">$ </span>chmod 700 ~/.ssh      <span class="c"># set access right only to user self</span>
<span class="nv">$ </span>ssh-keygen -t rsa     <span class="c"># **or you could use &quot;ssh-keygen -t rsa -b 4096&quot; for more secure login, default is 2048**.</span>
Generating public/private rsa key pair.
Enter file in which to save the key <span class="o">(</span>/home/edmund/.ssh/id_rsa<span class="o">)</span>: 
Enter passphrase <span class="o">(</span>empty <span class="k">for </span>no passphrase<span class="o">)</span>: 
Enter same passphrase again: 
Your identification has been saved in /home/edmund/.ssh/id_rsa.
Your public key has been saved in /home/edmund/.ssh/id_rsa.pub.

<span class="c"># next copy the public key to server. you can use a one-command way or manually copy the key to server.</span>
<span class="nv">$ </span>ssh-copy-id user@machine      <span class="c"># one-command way</span>
<span class="c"># manually way: copy the public key to server, and add it to authorized_key</span>
<span class="nv">$ </span>scp ~/.ssh/id_rsa.pub user@machine:~/.ssh/my_rsa.pub
<span class="nv">$ </span>ssh user@machine
<span class="nv">$ </span><span class="nb">cd</span> ~/.ssh
<span class="nv">$ </span>cat my_rsa.pub &gt;&gt; authorized_keys
</pre></div>

<h2 id="toc_2">3. Update SSH Daemon configuration on Server</h2>
<p>On the remote machine, currently the password authentication is still enabled, so we need to enable the RSA Authentication and disable the Password Authentication for the better security.</p>
<p>Open <strong>/etc/ssh/sshd_config</strong> on server, find(or add) the below items and set the values:
<code>
PubkeyAuthentication yes
RSAAuthentication yes
PasswordAuthentication no
</code>
Next restart ssh service: <code>$ sudo service ssh restart</code>
Now try login in the local machine:
<code>
$ ssh user@machine  # Or,
$ ssh -i id_rsa user@machine
</code>
If your key matches, you will directly go into the console shell, or else you will get the following error info, which means you configuration applied successfully.
<code>
Permission denied (publickey).
</code>
If you want to revoke an authorized key for some user, you can find the user&#39;s public key in <strong>&ldquo;~/.ssh/authorized_keys&rdquo;</strong> and remove it.</p>

<hr/>

<h4 id="toc_3"><em>Extra Bonus: below is a small trick to use the keys to encrypt/decrypt text for daily use.</em></h4>
<div class="highlight"><pre><span class="c"># encrypt a text file, and output to a file</span>
<span class="nv">$ </span>openssl enc -aes-256-cbc -e -in textfile.txt -out encrypted.txt -pass pass:some_password
<span class="c"># decrypt a text file, and output to a file(else it will print to the console)</span>
<span class="nv">$ </span>openssl enc -aes-256-cbc -d -in encrypted.txt -out textfile.txt -pass pass:some_password

<span class="c"># encode in base64 (the &quot;enc&quot; option let you specify a cipher, e.g. &quot;-base64&quot; here)</span>
<span class="nv">$ </span>openssl enc -base64 -e -in tetfile.txt
<span class="nv">$ </span>openssl enc -base64 -e <span class="o">&lt;&lt;&lt;</span> <span class="s2">&quot;Encode this text please&quot;</span>
<span class="nv">$ </span>openssl base64 -e <span class="o">&lt;&lt;&lt;</span> <span class="s2">&quot;Encode this text please&quot;</span>
<span class="c"># decode in base64</span>
<span class="nv">$ </span>openssl base64 -d <span class="o">&lt;&lt;&lt;</span> <span class="s2">&quot;RW5jb2RlIHRoaXMgdGV4dCBwbGVhc2UK&quot;</span>
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Archive Commands in Linux]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/01/archive-commands-in-linux.html"/>
        <published>2014-01-07T19:13:00+08:00</published>
        <updated>2014-01-07T19:19:42+08:00</updated>
        <id>http://terryoy.github.io/2014/01/archive-commands-in-linux.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#shell" term="shell" label="shell" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Below is a collection of commands compressing and uncompressing various file formats.  </p>
<div class="highlight"><pre><span class="c">#### compress ####</span>
<span class="nv">$ </span>tar -cvf output.tar <span class="nb">test</span>-files
<span class="nv">$ </span>gzip output.tar       <span class="c"># result file &quot;output.tar.gz&quot;</span>
<span class="nv">$ </span>tar -cvzf output.tar.gz <span class="nb">test</span>-files        <span class="c"># combined with the two above</span>
<span class="nv">$ </span>bzip2 output.tar      <span class="c"># result file &quot;output.tar.bz2&quot;</span>
<span class="nv">$ </span>tar -cvjf output.tar.bz2 <span class="nb">test</span>-files
<span class="c"># other formats (zip, gz, rar, 7z, ...)</span>
<span class="nv">$ </span>zip -r archive.zip <span class="nb">test</span>-files
<span class="nv">$ </span>star -cv <span class="nv">f</span><span class="o">=</span>output.star <span class="nb">test</span>-files
<span class="nv">$ </span>find <span class="nb">test</span>-dir | cpio -ov &gt; output.cpio
<span class="nv">$ </span>7z a archive.7z <span class="nb">test</span>-files    <span class="c"># the package name for 7z is &quot;p7zip&quot;</span>

<span class="c">####  list files in the archive ####</span>
<span class="nv">$ </span>tar -tvf file.tar
<span class="nv">$ </span>star -tv <span class="nv">f</span><span class="o">=</span>file.tar
<span class="nv">$ </span>unzip -l file.zip
<span class="nv">$ </span>cpio -t &lt; file.cpio
<span class="nv">$ </span>7z l file.7z

<span class="c">#### uncompress ####</span>
<span class="c"># tar</span>
<span class="nv">$ </span>tar xvf file.tar
<span class="nv">$ </span>tar xvzf file.tar.gz
<span class="nv">$ </span>tar xvzf file.tar.tgz
<span class="nv">$ </span>tar xvjf file.tar.bz2
<span class="nv">$ </span>tar xvjf file.tar.tbz2
<span class="c"># other formats </span>
<span class="nv">$ </span>gunzip file.**gz**    
<span class="nv">$ </span>bunzip2 file.**bz2**
<span class="nv">$ </span>uncompress file.**Z**
<span class="nv">$ </span>unzip file.zip
<span class="nv">$ </span>unrar x file.rar      <span class="c"># or &quot;$ rar x file.rar&quot;</span>
<span class="nv">$ </span>7z x file.**7z        <span class="c"># or &quot;$ 7z e file.7z**&quot;</span>
<span class="nv">$ </span>star -xv <span class="nv">f</span><span class="o">=</span>archive.star 
<span class="nv">$ </span>cpio -idmv &lt; archive.cpio
<span class="nv">$ </span>unace x file.ace
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Matplotlib Example in Short (1) - The Plotting Graph]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/12/matplotlib-simple-guide-1.html"/>
        <published>2013-12-31T01:00:00+08:00</published>
        <updated>2014-01-07T15:19:11+08:00</updated>
        <id>http://terryoy.github.io/2013/12/matplotlib-simple-guide-1.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <category scheme="http://terryoy.github.io/tag/#graph" term="graph" label="graph" />
        <category scheme="http://terryoy.github.io/tag/#matplotlib" term="matplotlib" label="matplotlib" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>The book <a href="http://www.amazon.com/Beginning-Python-Visualization-Transformation-Professionals/dp/1430218436"><em>&ldquo;Beginning Python Visualization&rdquo;</em></a> (by Shai Vaingast) is a great book for learning data visualization with Python. Here I would like to write a short reference guide for the Matplotlib usage after studying with it.</p>

<h2 id="toc_0">Why Matplotlib?</h2>
<p>In my opinion, there are different purpose while working on visualization: 1. scientific presentation; 2. web(real time / periodic update) presentation; 3. artistic presentation. The <strong>Matplotlib</strong> library in python is mainly served for the first and the  purpose, where you can easily plot data on the graph for analyzing and crafting your visualization script, at the same time you could use with IPython Notebook or in other web development to render statistics and display on the web. </p>
<p>If you have complicated graph or artistic requirements on the final result, you might move on to <a href="http://bokeh.pydata.org/">Bokeh</a> or <a href="">NodeBox OpenGL</a>, but matplotlib is still a handy tool for dealing with raw data in preceding scenarios.</p>

<h2 id="toc_1">The Basic Plotting</h2>
<p>Here is a basic example to show how to use the basic plotting function in Matplotlib.</p>
<p>The graph image:</p>
<p><img src="http://terryoy-github.u.qiniudn.com/blog/images/2013/matplotlib_sum_graph.png" alt="alt" title="Matplotlib Plotting Graph Summary example"/></p>
<p>The source code:</p>
<div class="highlight"><pre><span class="c"># remember in matplotlib-1.1 we import everything from **pylab** </span>
<span class="kn">from</span> <span class="nn">pylab</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">I</span> <span class="o">=</span> <span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">pi</span><span class="o">+</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">)</span>
<span class="n">hold</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
<span class="n">plot</span><span class="p">(</span><span class="n">cos</span><span class="p">(</span><span class="n">I</span><span class="p">),</span> <span class="n">sin</span><span class="p">(</span><span class="n">I</span><span class="p">),</span> <span class="n">label</span><span class="o">=</span><span class="s">&#39;x = cos($</span><span class="se">\a</span><span class="s">lpha$), y = sin($</span><span class="se">\a</span><span class="s">lpha$)&#39;</span><span class="p">)</span>
<span class="n">plot</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="n">cos</span><span class="p">(</span><span class="n">pi</span> <span class="o">/</span> <span class="mi">4</span><span class="p">)],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">sin</span><span class="p">(</span><span class="n">pi</span><span class="o">/</span><span class="mi">4</span><span class="p">)],</span> <span class="s">&quot;k-&quot;</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="s">&quot;k-&quot;</span><span class="p">)</span> 
<span class="n">I1</span> <span class="o">=</span> <span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">pi</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">)</span>
<span class="n">plot</span><span class="p">(</span><span class="mf">0.3</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">I1</span><span class="p">),</span> <span class="mf">0.3</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">I1</span><span class="p">),</span> <span class="s">&#39;b--&#39;</span><span class="p">)</span>
<span class="n">title</span><span class="p">(</span><span class="s">&#39;Drawing a Cicle by Radius&#39;</span><span class="p">)</span>
<span class="n">xlabel</span><span class="p">(</span><span class="s">&#39;x = cos(I), I = [0, $2\pi$]&#39;</span><span class="p">)</span>
<span class="n">ylabel</span><span class="p">(</span><span class="s">&#39;y = sin(I), I = [0, $2\pi$]&#39;</span><span class="p">)</span>
<span class="n">text</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Top&#39;</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s">&#39;left&#39;</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">&#39;bottom&#39;</span><span class="p">)</span>
<span class="n">text</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Bottom&#39;</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s">&#39;left&#39;</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">&#39;top&#39;</span><span class="p">)</span>
<span class="n">text</span><span class="p">(</span><span class="mf">0.4</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">pi</span> <span class="o">/</span> <span class="mi">8</span><span class="p">),</span> <span class="mf">0.4</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">pi</span> <span class="o">/</span> <span class="mi">8</span><span class="p">),</span> <span class="s">&#39;$45^\circ$&#39;</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s">&#39;left&#39;</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">&#39;bottom&#39;</span><span class="p">)</span>
<span class="n">xticks</span><span class="p">(</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">))</span>
<span class="n">xlim</span><span class="p">([</span><span class="o">-</span><span class="mf">1.2</span><span class="p">,</span> <span class="mf">1.2</span><span class="p">])</span>
<span class="n">ylim</span><span class="p">([</span><span class="o">-</span><span class="mf">1.2</span><span class="p">,</span> <span class="mf">1.2</span><span class="p">])</span>
<span class="n">grid</span><span class="p">()</span>

<span class="n">show</span><span class="p">()</span>
</pre></div>
<p>Now let&#39;s check out each commands we could use.</p>

<h3 id="toc_2">1. plot(), markers, line styles, and colors</h3>
<div class="highlight"><pre><span class="c"># plot accept vectors to draw lines</span>
<span class="n">plot</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>   <span class="c"># given one vector, it will take it as both X, and Y</span>
<span class="n">plot</span><span class="p">(</span><span class="n">arange</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>     <span class="c"># arange() is a function from NumPy which could generate vectors</span>
<span class="n">I</span> <span class="o">=</span> <span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mf">5.1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>    <span class="c"># arange(begin value, end value, step)</span>
<span class="n">plot</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">I</span><span class="p">)</span>    <span class="c"># plot a &quot;y = 2x&quot; line with the vector I as X&#39;s range</span>

<span class="n">plot</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">I</span><span class="p">,</span> <span class="s">&#39;ko-&#39;</span><span class="p">,</span> <span class="n">I</span><span class="p">,</span> <span class="n">I</span><span class="o">*</span><span class="n">I</span><span class="p">,</span> <span class="s">&#39;bD--&#39;</span><span class="p">)</span> <span class="c"># multi-plot with options in one line</span>

<span class="c"># now check out the short options, which you could use in the third parameter in each plot</span>
<span class="c"># -- Markers (check out doc for more)</span>
<span class="c">#   &#39;o&#39;: Circle, </span>
<span class="c">#   &#39;^&#39;: Upward-pointing triangle,</span>
<span class="c">#   &#39;s&#39;: Sqaure,</span>
<span class="c">#   &#39;+&#39;: Plus,</span>
<span class="c">#   &#39;x&#39;: Cross,</span>
<span class="c">#   &#39;D&#39;: Diamond</span>
<span class="c">#</span>
<span class="c"># -- Line Styles</span>
<span class="c">#   &#39;-&#39;: Solid line,</span>
<span class="c">#   &#39;--&#39;: Dashed line,</span>
<span class="c">#   &#39;-.&#39;: Dash-dot line,</span>
<span class="c">#   &#39;:&#39;: Dotted line</span>
<span class="c">#</span>
<span class="c"># -- Color</span>
<span class="c">#   &#39;b&#39;: Blue,</span>
<span class="c">#   &#39;c&#39;: Cyan,</span>
<span class="c">#   &#39;g&#39;: Green,</span>
<span class="c">#   &#39;k&#39;: Black,</span>
<span class="c">#   &#39;m&#39;: Magenta,</span>
<span class="c">#   &#39;r&#39;: Red,</span>
<span class="c">#   &#39;w&#39;: White,</span>
<span class="c">#   &#39;y&#39;: Yellow</span>

<span class="n">plot</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">I</span><span class="o">*</span><span class="n">I</span><span class="p">,</span> <span class="s">&#39;o-&#39;</span><span class="p">,</span> <span class="n">lw</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">ms</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span> <span class="c"># lw/linewidth - Line Width, ms/markersize - Marker Size</span>
</pre></div>

<h3 id="toc_3">2. Axes and Grids, text, legends and titles</h3>
<div class="highlight"><pre><span class="c"># range of axes</span>
<span class="n">axis</span><span class="p">([</span><span class="o">-</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="o">-</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">])</span>    <span class="c"># accept an array with [xmin, xmax, ymin, ymax]</span>
<span class="n">xlim</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>   <span class="c"># or if you want to set Axis X or Axis Y separately</span>
<span class="n">ylim</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> 
<span class="n">axis</span><span class="p">()</span>  <span class="c"># check the current axes range</span>
<span class="n">xlim</span><span class="p">()</span>
<span class="n">ylim</span><span class="p">()</span>

<span class="c"># grids and ticks</span>
<span class="n">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>  <span class="c"># set grid display to True or False</span>
<span class="n">xticks</span><span class="p">(</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>    <span class="c"># customize the tick locations on Axis X</span>
<span class="n">yticks</span><span class="p">(</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>   <span class="c"># customize the tick locations on Axis Y</span>
<span class="n">xticks</span><span class="p">(</span><span class="n">arange</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;Tom&#39;</span><span class="p">,</span> <span class="s">&#39;Jerry&#39;</span><span class="p">,</span> <span class="s">&#39;Sally&#39;</span><span class="p">,</span> <span class="s">&#39;Harry&#39;</span><span class="p">,</span> <span class="s">&#39;Me&#39;</span><span class="p">))</span>   <span class="c"># also customize the tick labels</span>

<span class="c"># draw axes lines</span>
<span class="n">axvline</span><span class="p">(</span><span class="n">linewidth</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="c"># draw a vertical axis line at x=0, with linewidth and color</span>
<span class="n">axvline</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">)</span>    <span class="c"># draw a vertical line on x=1, with vertical ratio (0.2, 0.8) of the graph&#39;s height</span>
<span class="n">axhline</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">xmin</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">xmax</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>    <span class="c"># draw a horizontal axis similar to axvline()</span>

<span class="c"># enable legends</span>
<span class="n">plot</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">I</span><span class="o">*</span><span class="n">I</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">&quot;y = x^2&quot;</span><span class="p">)</span>
<span class="n">legend</span><span class="p">()</span>    <span class="c"># enable legends of existing lines</span>
<span class="n">legend</span><span class="p">([</span><span class="s">&#39;sin(x)&#39;</span><span class="p">,</span> <span class="s">&#39;cos(x)&#39;</span><span class="p">])</span>    <span class="c"># set legend text explicitly</span>


<span class="c"># text at any position</span>
<span class="n">text</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#39;text positioned at (1, 1)&#39;</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">&#39;baseline&#39;</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s">&#39;left&#39;</span><span class="p">)</span>   <span class="c"># draw text with vertical and horizontal alignment</span>
<span class="n">text</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#39;some text&#39;</span><span class="p">,</span> <span class="n">bbox</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">facecolor</span><span class="o">=</span><span class="s">&#39;red&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">))</span>  <span class="c"># draw text with a rectangle background</span>

<span class="c"># title of the graph</span>
<span class="n">title</span><span class="p">(</span><span class="s">&#39;some title&#39;</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">&#39;baseline&#39;</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s">&#39;center&#39;</span><span class="p">)</span> <span class="c"># draw the title text of the graph</span>

<span class="c"># labels of axes</span>
<span class="n">xlabel</span><span class="p">(</span><span class="s">&#39;Time&quot;)</span>
<span class="n">ylabel</span><span class="p">(</span><span class="s">&#39;Money we gain&#39;</span><span class="p">)</span>

<span class="c"># use (TeX-like) symbols, **you must use raw string (r&#39;text&#39;)**</span>
<span class="n">title</span><span class="p">(</span><span class="s">r&#39;$ \alpha_i &gt; \beta_i $&#39;</span><span class="p">)</span>    <span class="c"># TeX-like symbols should be surrounded by &#39;$$&#39;</span>
</pre></div>
<p>For more TeX symbols, please check the <a href="http://matplotlib.org/users/mathtext.html#symbols">reference on matplolib</a>.</p>

<h3 id="toc_4">3. Figure control</h3>
<div class="highlight"><pre><span class="c"># create / specify a figure to plot</span>
<span class="n">figure</span><span class="p">()</span>    <span class="c"># create a new figure by default</span>
<span class="n">figure</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c"># switch to the figure with id 2</span>
<span class="c"># save figure to a file (select format by extension)</span>
<span class="n">savefig</span><span class="p">(</span><span class="s">&#39;filename.png&#39;</span><span class="p">)</span> 

<span class="c"># creating subplots</span>
<span class="c"># subplot(numRows, numCols, plotNum)</span>
<span class="n">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>    <span class="c"># the default </span>
<span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>    <span class="c"># split in 2 x 1 table, and draw on upper half</span>
<span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>    <span class="c"># split in 2 x 2 table, and draw on the bottom left(it can work together with the above one, as long as the plots don&#39;t overlap)</span>

<span class="c"># erasing the graph </span>
<span class="n">cla</span><span class="p">()</span>   <span class="c"># clear axes</span>
<span class="n">clf</span><span class="p">()</span>   <span class="c"># clear figure</span>
<span class="n">close</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>    <span class="c"># close figure with id (if specified)</span>
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Simple Examples of &quot;yield&quot; in Python]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/12/python_yield.html"/>
        <published>2013-12-23T23:43:00+08:00</published>
        <updated>2014-01-07T15:19:11+08:00</updated>
        <id>http://terryoy.github.io/2013/12/python_yield.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>The keyword &ldquo;yield&rdquo; in python is somewhat confusing when writing a single thread program, because it output or input a value somewhere inside the function, but you cannot tell how it does easily. So now I demonstrate two basic usages of &ldquo;yield&rdquo;, which you could consider as two patterns.</p>

<h2 id="toc_0">1. Generators</h2>
<p>All functions using &ldquo;yield&rdquo; can be called <em><strong>generators</strong></em>. When using as a generator, it outputs(returns) a value somewhere inside the function, and pause at this step until it gets the next chance of execution.</p>
<p>The general structure of a function that uses &ldquo;yield&rdquo; will be like this:</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">countdown</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="c"># **the settup part**</span>
    <span class="k">print</span> <span class="s">&quot;Do something here&quot;</span>

    <span class="c"># **the loop part**</span>
    <span class="k">while</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">n</span> <span class="c"># return a value to the call of &quot;next()&quot; function, and then wait for the next loop</span>
        <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
</pre></div>
<p>The execution in an interactive python environment is like this:</p>

<pre><code>&gt;&gt;&gt; c = countdown(10)
&gt;&gt;&gt; c.next()
Do something here
10
&gt;&gt;&gt; c.next()
9
&gt;&gt;&gt; 
...
&gt;&gt;&gt; c.next()
1
&gt;&gt;&gt; c.next()
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  StopIteration</code></pre>
<p>When the first trigger of the &ldquo;next()&rdquo; method, the instance &ldquo;c&rdquo; exectue the setup code and runs into the loop. When &ldquo;n&rdquo; is yield in the loop, the &ldquo;next()&rdquo; method gets its returning value and printed on the screen. In the next trigger of &ldquo;next()&rdquo;, it continues the loop so you don&#39;t see the setup part again. When the last value is yield, the while loop will end. So if &ldquo;next()&rdquo; method is called again, it gets a StopIteration error raised. </p>
<p>If you want to iterate the items generated by this generator, you don&#39;t need to catch the StopIteration, you could just use it also like iterating a list.</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">countdown</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">c</span><span class="p">]</span>
<span class="n">Do</span> <span class="n">something</span> <span class="n">here</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">items</span>
<span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</pre></div>

<h2 id="toc_1">2. Coroutines</h2>
<p>The example of generators is using &ldquo;yield&rdquo; like an output operation, while <em><strong>Coroutines</strong></em> use it like an input operation. Check out the below code:</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">accumulator</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="c"># don&#39;t forget to execute &quot;next()&quot; to run the setup part first</span>
    <span class="nb">sum</span> <span class="o">=</span> <span class="n">n</span> 
    <span class="k">print</span> <span class="s">&quot;init value:&quot;</span><span class="p">,</span> <span class="n">n</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span><span class="p">)</span> <span class="c"># gets a value from the method &quot;send()&quot;</span>
        <span class="nb">sum</span> <span class="o">+=</span> <span class="n">value</span>
        <span class="k">print</span> <span class="nb">sum</span> <span class="c"># now you don&#39;t use &quot;yield&quot; to return value because you want </span>
                  <span class="c"># to print out the value when &quot;send()&quot; is called, rather than to call &quot;next()&quot; again</span>
</pre></div>
<p>Execution:</p>

<pre><code>&gt;&gt;&gt; a = accumulator(0)
&gt;&gt;&gt; a.next()
init value:0
&gt;&gt;&gt; a.send(5)
5
&gt;&gt;&gt; a.send(5)
10</code></pre>
<p>In this example, you need to call &ldquo;next()&rdquo; first so that it could run to the first appearance of &ldquo;yield&rdquo;. Then, it will pause until you call &ldquo;send()&rdquo; method to input a number, so the loop continues and prints out the summarized value, and also pauses at &ldquo;yield&rdquo; in the next loop, and so on. </p>
<p>So when using &ldquo;yield&rdquo; function as coroutines, you could imagine it as a task waiting for your input, you just send the parameters to it and it will fulfill the task for you.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Python Main Args, Config, and Exception Snippets]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/12/python_main_args.html"/>
        <published>2013-12-21T15:35:00+08:00</published>
        <updated>2013-12-21T16:03:50+08:00</updated>
        <id>http://terryoy.github.io/2013/12/python_main_args.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Part 1. Below is an example showing how to use <strong>arguments</strong> in a python script. It&#39;s taken from this <a href="http://www.tutorialspoint.com/python/python_command_line_arguments.htm">example</a>.</p>
<div class="highlight"><pre><span class="c">#!/usr/bin/python</span>

<span class="kn">import</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">getopt</span>

<span class="k">def</span> <span class="nf">print_usage</span><span class="p">():</span>
    <span class="k">print</span> <span class="s">&#39;main.py -i &lt;input_file&gt; -o &lt;output_file&gt;&#39;</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">argv</span><span class="p">):</span>
    <span class="n">inputfile</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
    <span class="n">outputfile</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c"># opts is a list of returning key-value pairs, args is the options left after striped</span>
        <span class="c"># the short options &#39;hi:o:&#39;, if an option requires an input, it should be followed by a &quot;:&quot;</span>
        <span class="c"># the long options &#39;ifile=&#39; is an option that requires an input, followed by a &quot;=&quot;</span>
        <span class="n">opts</span><span class="p">,</span> <span class="n">args</span> <span class="o">=</span> <span class="n">getopt</span><span class="o">.</span><span class="n">getopt</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="s">&#39;hi:o:&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;ifile=&#39;</span><span class="p">,</span> <span class="s">&#39;ofile=&#39;</span><span class="p">])</span>
    <span class="k">except</span> <span class="n">getopt</span><span class="o">.</span><span class="n">GetoptError</span><span class="p">:</span>
        <span class="n">print_usage</span><span class="p">()</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="c"># print(args) # debug line</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">opts</span><span class="p">:</span>
        <span class="n">print_usage</span><span class="p">()</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

    <span class="c"># print arguments</span>
    <span class="k">for</span> <span class="n">opt</span><span class="p">,</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">opts</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">opt</span> <span class="o">==</span> <span class="s">&#39;-h&#39;</span><span class="p">:</span>
            <span class="n">print_usage</span><span class="p">()</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">opt</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&quot;-i&quot;</span><span class="p">,</span> <span class="s">&quot;--ifile&quot;</span><span class="p">):</span>
            <span class="n">inputfile</span> <span class="o">=</span> <span class="n">arg</span>
        <span class="k">elif</span> <span class="n">opt</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&quot;-o&quot;</span><span class="p">,</span> <span class="s">&quot;--ofile&quot;</span><span class="p">):</span>
            <span class="n">outputfile</span> <span class="o">=</span> <span class="n">arg</span>
    <span class="k">print</span> <span class="s">&quot;Input file:&quot;</span><span class="p">,</span> <span class="n">inputfile</span>
    <span class="k">print</span> <span class="s">&quot;Output file:&quot;</span><span class="p">,</span> <span class="n">outputfile</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</pre></div>
<p>Below is the example running result:</p>

<pre><code>$ ./main.py -h
main.py -i &lt;input_file&gt; -o &lt;output_file&gt;
$ ./main.py
main.py -i &lt;input_file&gt; -o &lt;output_file&gt;
$ ./main.py -i inputfile
Input file: inputfile
Output file: 
$ ./main.py -i inputfile --ofile=outputfile
Input file: inputfile
Output file: outputfile</code></pre>
<p>Part 2. Below is an example showing how to use <strong>configuration</strong> and <strong>exceptions</strong>.</p>
<div class="highlight"><pre><span class="c">#!/usr/bin/python</span>

<span class="kn">from</span> <span class="nn">ConfigParser</span> <span class="kn">import</span> <span class="n">ConfigParser</span><span class="p">,</span> <span class="n">NoOptionError</span>
<span class="kn">import</span> <span class="nn">traceback</span>

<span class="c">## The configuration is a file named &quot;config.ini&quot; with below content</span>
<span class="c"># [helloworld]</span>
<span class="c"># name = Terry</span>
<span class="c">##</span>

<span class="c"># read configuration</span>
<span class="n">config</span> <span class="o">=</span> <span class="n">ConfigParser</span><span class="p">()</span>
<span class="n">config</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s">&#39;config.ini&#39;</span><span class="p">)</span>

<span class="c"># use configuration</span>
<span class="k">print</span> <span class="s">&#39;an existing item value:&#39;</span><span class="p">,</span> <span class="s">&#39;[ name =&#39;</span><span class="p">,</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;helloworld&#39;</span><span class="p">,</span> <span class="s">&#39;name&#39;</span><span class="p">),</span> <span class="s">&#39;]&#39;</span>
<span class="k">try</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">&#39;an non-existing item value:&#39;</span><span class="p">,</span> <span class="s">&#39;[ non-exist =&#39;</span><span class="p">,</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;helloworld&#39;</span><span class="p">,</span> <span class="s">&#39;non-exist&#39;</span><span class="p">),</span> <span class="s">&#39;]&#39;</span>
<span class="k">except</span> <span class="n">NoOptionError</span><span class="p">:</span>
    <span class="c"># pass</span>
    <span class="n">traceback</span><span class="o">.</span><span class="n">print_exc</span><span class="p">()</span> <span class="c"># display exception information</span>
</pre></div>
<p>Here is the output result:</p>

<pre><code>an existing item value: [ name = Terry ]
Traceback (most recent call last):
  File &quot;./config_parser.py&quot;, line 12, in &lt;module&gt;
    print 'an non-existing item value:', '[ non-exist =', config.get('helloworld', 'non-exist'), ']'
  File &quot;/usr/lib/python2.7/ConfigParser.py&quot;, line 618, in get
    raise NoOptionError(option, section)
NoOptionError: No option 'non-exist' in section: 'helloworld'
an non-existing item value: [ non-exist =</code></pre>
<p>As you can see the line <em>&ldquo;an non-existing item value: [ non-exist = &rdquo;</em> is output belowthe exception trace information. It is because the traceback.print_exc() output to <strong>stderr</strong> while the others output to <strong>stdout</strong>, they&#39;re two separate buffers and no particular order when output to console.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Cocos2d-x-2.2.0 Setup Guide (for Android and iOS)]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/11/cocos2d-x-setup.html"/>
        <published>2013-11-27T09:00:00+08:00</published>
        <updated>2014-02-06T18:12:24+08:00</updated>
        <id>http://terryoy.github.io/2013/11/cocos2d-x-setup.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#game" term="game" label="game" />
        <category scheme="http://terryoy.github.io/tag/#mobile" term="mobile" label="mobile" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>This guide describes the steps to setup a development environment for Cocos2d-x the cross-platform game development framework, on Linux and Mac OSX.</p>

<h2 id="toc_0">1. Download packages</h2>
<p>In this guide, we&#39;ll use cocos2d-x-2.x as example, and we&#39;ll setup for Android and iOS app development. So, the following packages will be needed:</p>

<table><thead>
<tr>
<th>Packages</th>
<th>Links</th>
<th>Remark</th>
</tr>
</thead><tbody>
<tr>
<td>Cocos2d-x:</td>
<td><a href="http://www.cocos2d-x.org/download">www.cocos2d-x.org/download</a></td>
<td>use latest of v2.x</td>
</tr>
<tr>
<td>ADT bundle:</td>
<td><a href="http://developer.android.com/sdk/index.html">developer.android.com/sdk/index.html</a></td>
<td>Android Development Tools</td>
</tr>
<tr>
<td>Android NDK:</td>
<td><a href="http://developer.android.com/tools/sdk/ndk/index.html">developer.android.com/tools/sdk/ndk/index.html</a></td>
<td>legacy-toolchains package is not neccessary</td>
</tr>
</tbody></table>
<p>Unzip the three packages to a folder. For example, after I extract the files, the paths looks like:</p>

<pre><code>~/develop/android/adt-bundle-linux-x86-20131030/eclipse
~/develop/android/adt-bundle-linux-x86-20131030/sdk
~/develop/android/adt-bundle-linux-x86-20131030/android-ndk-r9b
~/develop/cocos2dx/cocos2d-x-2.2.0/</code></pre>
<p>Next go to Eclipe(for Android) or Xcode(for iOS) for next step.</p>

<h2 id="toc_1">2. Android Setup</h2>

<h3 id="toc_2">Check device accessible</h3>
<p>You better make sure you can access your android tablet before building it on the device. The method to check is a &ldquo;adb devices&rdquo; command(don&#39;t forget to turn on the debug mode on the tablet first):</p>

<pre><code>$ cd $ANDROID_SDK_HOME/platform-tools
$ ./adb devices
* daemon not running. starting it now on port 5037 *
* daemon started successfully *
List of devices attached 
????????????    no permissions</code></pre>
<p>If you see the device listed without a valid name, and marked with &ldquo;no permissions&rdquo;, the reason is often that you started ADB Server not as root. Try to fix that is to restart the adb daemon in root access:</p>

<pre><code># be sure to close ADT first, because sometimes it make adb started in user even with sudo
$ sudo ./adb kill-server
$ sudo ./adb start-server
# check adb server running user
$ ps -ef | grep adb
root     15657     1  0 09:59 pts/0    00:00:00 adb -P 5037 fork-server server
# check device list
$ ./adb devices
List of devices attached 
20080411    device
# try if you can connect to the device and run with shell
$ ./adb shell</code></pre>
<p>If all successful, open Eclipse IDE and we&#39;ll build the project.</p>

<h3 id="toc_3">Importing The Library and The Projects</h3>
<p>We&#39;ll import twice: one for the <strong>cocos2d-x library</strong>, one for the <strong>sample projects</strong>.</p>
<p><img src="/images/2013/cocos_import.png" alt="alt" title="Import existing projects"/></p>
<p>The search path for cocos2d-x library is &ldquo;<strong><em>$COCOS2DX_ROOT/cocos2dx</em></strong>&rdquo;</p>
<p><img src="/images/2013/cocos_import_lib.png" alt="alt" title="Import cocos2d-x lib"/></p>
<p>The search path for sample projects is &ldquo;<strong><em>$COCOS2DX_ROOT/samples/Cpp/</em></strong>&rdquo;(because we&#39;re going to use C++ for cocos2d-x development).</p>
<p><img src="/images/2013/cocos_import_tests.png" alt="alt" title="Import sample projects"/></p>
<p>After that we&#39;ll see the projects in the workspace:</p>
<p><img src="/images/2013/cocos_import_success.png" alt="alt" title="Imported projects"/></p>

<h3 id="toc_4">Setting Environment Variables</h3>
<p>If you try building the project &ldquo;TestCpp&rdquo; now, you will probably find the below error:</p>
<p><img src="/images/2013/cocos_build_ndk_error.png" alt="alt" title="Compile error"/></p>
<p>It&#39;s because we have to set the environment variables for the compiler. It needs &ldquo;<strong>COCOS2DX_ROOT</strong>&rdquo; and &ldquo;<strong>NDK_ROOT</strong>&rdquo; to build the project. So open &ldquo;Window -&gt; Preferences -&gt; C/C++ -&gt; Build -&gt; Environment&rdquo; in the Eclipse IDE, and set the variables similar to below:</p>
<p><img src="/images/2013/cocos_set_env_vars.png" alt="alt" title="Path variables"/></p>
<p>After that, select the &ldquo;TestCpp&rdquo; and build again, you should be able to see the build succesful messages:</p>
<p><img src="/images/2013/cocos_build_sucessful.png" alt="alt" title="NDK build successful"/></p>

<h3 id="toc_5">Running on Tablet</h3>
<p>Next try running it on the tablet. Click &ldquo;Run&rdquo; and (after the build) you will get the &ldquo;Android Device Chooser&rdquo; below:</p>
<p><img src="/images/2013/cocos_avd.png" alt="alt" title="Android Device Chooser"/></p>
<p>Here you could choose the plugged in tablet which you have configured in the previous steps to run the program. Or you could choose to create a new emulator to run it on your computer. If you have problem seeing the device in the list, go back to the &ldquo;Check device accessible&rdquo; step to check the device again. </p>
<p>If you find running the emulators very slow, check out the <a href="http://stackoverflow.com/questions/16732021/why-emulator-is-very-slow-in-android-studio">post here</a> for suggestions.</p>

<h2 id="toc_6">3. Xcode Setup</h2>
<p>(Since I had lost the log while setting up this, I won&#39;t update this part until I got a chance to try it again.)</p>
<p>Setting up in Xcode is pretty simple. Just extract the cocos2d-x-2.x.x.zip, and open the project files at <code>./samples/Cpp/HelloCpp/proj.ios/</code> with Xcode. Next, you should check the compiling errors and solve it one by one.</p>
<p>If the &ldquo;cocos2dx.xcodeproj&rdquo; sub-project displays as missing, you could open the . and select the &ldquo;Location&rdquo; for it, which should be pointed to <code>./cocos2dx/proj.ios/cocos2dx/</code></p>
<p>There are usually two build scheme in the Xcode project. One is for building the cocos2d-x framework, the other is the project it self. So before you build the project, you should build the cocos2d-x framework first.</p>

<h2 id="toc_7">4. Start a New Cross-platform Project</h2>
<p>There is one script for creating a new cocos2d-x project under the path <code>./tools/project-creator/</code></p>
<div class="highlight"><pre><span class="nv">$ </span>./create_project.py
Usage: create_project.py -project PROJECT_NAME -package PACKAGE_NAME -language PROGRAMING_LANGUAGE
Options:
  -project   PROJECT_NAME          Project name, <span class="k">for </span>example: MyGame
  -package   PACKAGE_NAME          Package name, <span class="k">for </span>example: com.MyCompany.MyAwesomeGame
  -language  PROGRAMING_LANGUAGE   Major programing lanauge you want to used, should be <span class="o">[</span>cpp | lua | javascript<span class="o">]</span>

Sample 1: ./create_project.py -project MyGame -package com.MyCompany.AwesomeGame
Sample 2: ./create_project.py -project MyGame -package com.MyCompany.AwesomeGame -language javascript
</pre></div>
<p>The new project will be created under <code>./projects/</code> under the root folder of cocos2d-x, and it is not easy if you want to put it outside this folder(for example, another git repos), because the project&#39;s dependencies uses relative paths to the cocos2d-x&#39;s components. It might differs in Xcode or in Eclipse, etc. So here we don&#39;t discuss further.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Preferences for Vim]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/09/vimrc.html"/>
        <published>2013-09-23T23:16:00+08:00</published>
        <updated>2013-12-03T12:53:55+08:00</updated>
        <id>http://terryoy.github.io/2013/09/vimrc.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#vim" term="vim" label="vim" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>These are settings that to improve usage of VI text editor for various purposes.</p>
<p>Copy &amp; paste below lines to <strong><em>~/.vimrc</em></strong>:</p>

<pre><code>set smartindent
set tabstop=4
set shiftwidth=4
set expandtab</code></pre>

<ol>
<li>smartindent - Do smart autoindenting when starting a new line for C-like programs.</li>
<li>tabstop - Number of spaces that a <Tab> in the file counts for.</li>
<li>shiftwidth - Number of spaces to use for each step of (auto)indent.</li>
<li>expandtab - Spaces are used in indents with <Tab>.</li>
</ol>
<p>For color scheme preferences:</p>

<pre><code>colorscheme torte</code></pre>
<p>It is the default black/white scheme.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Useful Aliases and Commands in Linux]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/09/useful_alias.html"/>
        <published>2013-09-23T00:00:00+08:00</published>
        <updated>2014-10-22T21:23:48+08:00</updated>
        <id>http://terryoy.github.io/2013/09/useful_alias.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#shell" term="shell" label="shell" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Below is a list of some useful aliases, which you could add to your linux shell environment.</p>
<p>Copy and paste below content to your <strong><em>~/.bashrc</em></strong>.</p>

<!--script src="https://gist.github.com/terryoy/6374725.js"></script-->
<div class="highlight"><pre><span class="c"># open a browser and view raw html (e.g. &quot;cat some.html | viewhtml&quot;)</span>
<span class="nb">alias </span><span class="nv">viewhtml</span><span class="o">=</span><span class="s1">&#39;firefox &quot;data:text/html;charset=utf-8;base64,$(base64 -w 0 &lt;&amp;0)&quot;&#39;</span>

<span class="c"># url encode / decode</span>
<span class="nb">alias </span><span class="nv">urlencode</span><span class="o">=</span><span class="s1">&#39;python -c &quot;import sys, urllib as ul; print ul.quote_plus(sys.argv[1])&quot;&#39;</span>
<span class="nb">alias </span><span class="nv">urldecode</span><span class="o">=</span><span class="s1">&#39;python -c &quot;import sys, urllib as ul; print ul.unquote_plus(sys.argv[1])&quot;&#39;</span>

<span class="c"># url shortener</span>
<span class="nb">alias </span><span class="nv">shortenurl</span><span class="o">=</span><span class="s2">&quot;python -c \&quot;import sys, urllib as ul; print ul.urlopen(&#39;http://tinyurl.com/api-create.php?url=%s&#39; % ul.quote_plus(sys.argv[1])).readline()\&quot;&quot;</span>
</pre></div>

<h3 id="toc_0"># work with hex</h3>
<div class="highlight"><pre><span class="c"># if you want to dump a file in hex</span>
<span class="nv">$ </span>xxd -p file

<span class="c"># A Hex number convertor, convert decimal into hex(e.g. &quot;hex 34&quot; -&gt; 22)</span>
<span class="nb">alias </span><span class="nv">hex</span><span class="o">=</span><span class="s1">&#39;printf &quot;%x\n&quot;&#39;</span>
</pre></div>

<h3 id="toc_1"># mount a virtualbox disk on linux</h3>
<div class="highlight"><pre><span class="c"># before you can mount anything, install virtualbox-fuse</span>
<span class="nv">$ </span>sudo apt-get install virtualbox-fuse

<span class="c"># there are &#39;disk/&#39; folder and &#39;space/&#39; folder.</span>
<span class="c"># &#39;vdfuse -r&#39; is for read only,</span>
<span class="nv">$ </span>vdfuse -raf <span class="nv">$1</span> disk
<span class="nv">$ </span>mount disk/Partition1 space
</pre></div>
]]>
        </content>
    </entry>
</feed>