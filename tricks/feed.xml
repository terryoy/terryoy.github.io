<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Hello, World!</title>
    <link href="http://terryoy.github.io/tricks/feed.xml" rel="self" />
    <link href="http://terryoy.github.io/tricks/" />
    <updated>2013-12-24T00:24:46+08:00</updated>
    <id>http://terryoy.github.io/tricks/</id>
    <entry>
        <title type="html"><![CDATA[Simple Examples of &quot;yield&quot; in Python]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/12/python_yield.html"/>
        <published>2013-12-23T23:43:00+08:00</published>
        <updated>2013-12-24T00:24:46+08:00</updated>
        <id>http://terryoy.github.io/2013/12/python_yield.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>The keyword &ldquo;yield&rdquo; in python is somewhat confusing when writing a single thread program, because it output or input a value somewhere inside the function, but you cannot tell how it does easily. So now I demonstrate two basic usages of &ldquo;yield&rdquo;, which you could consider as two patterns.</p>

<h2 id="toc_0">1. Generators</h2>
<p>All functions using &ldquo;yield&rdquo; can be called <em><strong>generators</strong></em>. When using as a generator, it outputs(returns) a value somewhere inside the function, and pause at this step until it gets the next chance of execution.</p>
<p>The general structure of a function that uses &ldquo;yield&rdquo; will be like this:</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">countdown</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="c"># **the settup part**</span>
    <span class="k">print</span> <span class="s">&quot;Do something here&quot;</span>

    <span class="c"># **the loop part**</span>
    <span class="k">while</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">n</span> <span class="c"># return a value to the call of &quot;next()&quot; function, and then wait for the next loop</span>
        <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
</pre></div>
<p>The execution in an interactive python environment is like this:</p>

<pre><code>&gt;&gt;&gt; c = countdown(10)
&gt;&gt;&gt; c.next()
Do something here
10
&gt;&gt;&gt; c.next()
9
&gt;&gt;&gt; 
...
&gt;&gt;&gt; c.next()
1
&gt;&gt;&gt; c.next()
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  StopIteration</code></pre>
<p>When the first trigger of the &ldquo;next()&rdquo; method, the instance &ldquo;c&rdquo; exectue the setup code and runs into the loop. When &ldquo;n&rdquo; is yield in the loop, the &ldquo;next()&rdquo; method gets its returning value and printed on the screen. In the next trigger of &ldquo;next()&rdquo;, it continues the loop so you don&#39;t see the setup part again. When the last value is yield, the while loop will end. So if &ldquo;next()&rdquo; method is called again, it gets a StopIteration error raised. </p>
<p>If you want to iterate the items generated by this generator, you don&#39;t need to catch the StopIteration, you could just use it also like iterating a list.</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">countdown</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">c</span><span class="p">]</span>
<span class="n">Do</span> <span class="n">something</span> <span class="n">here</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">items</span>
<span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</pre></div>

<h2 id="toc_1">2. Coroutines</h2>
<p>The example of generators is using &ldquo;yield&rdquo; like an output operation, while <em><strong>Coroutines</strong></em> use it like an input operation. Check out the below code:</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">accumulator</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="c"># don&#39;t forget to execute &quot;next()&quot; to run the setup part first</span>
    <span class="nb">sum</span> <span class="o">=</span> <span class="n">n</span> 
    <span class="k">print</span> <span class="s">&quot;init value:&quot;</span><span class="p">,</span> <span class="n">n</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span><span class="p">)</span> <span class="c"># gets a value from the method &quot;send()&quot;</span>
        <span class="nb">sum</span> <span class="o">+=</span> <span class="n">value</span>
        <span class="k">print</span> <span class="nb">sum</span> <span class="c"># now you don&#39;t use &quot;yield&quot; to return value because you want </span>
                  <span class="c"># to print out the value when &quot;send()&quot; is called, rather than to call &quot;next()&quot; again</span>
</pre></div>
<p>Execution:</p>

<pre><code>&gt;&gt;&gt; a = accumulator(0)
&gt;&gt;&gt; a.next()
init value:0
&gt;&gt;&gt; a.send(5)
5
&gt;&gt;&gt; a.send(5)
10</code></pre>
<p>In this example, you need to call &ldquo;next()&rdquo; first so that it could run to the first appearance of &ldquo;yield&rdquo;. Then, it will pause until you call &ldquo;send()&rdquo; method to input a number, so the loop continues and prints out the summarized value, and also pauses at &ldquo;yield&rdquo; in the next loop, and so on. </p>
<p>So when using &ldquo;yield&rdquo; function as coroutines, you could imagine it as a task waiting for your input, you just send the parameters to it and it will fulfill the task for you.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Python Main Args, Config, and Exception Snippets]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/12/python_main_args.html"/>
        <published>2013-12-21T15:35:00+08:00</published>
        <updated>2013-12-23T23:42:35+08:00</updated>
        <id>http://terryoy.github.io/2013/12/python_main_args.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Part 1. Below is an example showing how to use <strong>arguments</strong> in a python script. It&#39;s taken from this <a href="http://www.tutorialspoint.com/python/python_command_line_arguments.htm">example</a>.</p>
<div class="highlight"><pre><span class="c">#!/usr/bin/python</span>

<span class="kn">import</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">getopt</span>

<span class="k">def</span> <span class="nf">print_usage</span><span class="p">():</span>
    <span class="k">print</span> <span class="s">&#39;main.py -i &lt;input_file&gt; -o &lt;output_file&gt;&#39;</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">argv</span><span class="p">):</span>
    <span class="n">inputfile</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
    <span class="n">outputfile</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c"># opts is a list of returning key-value pairs, args is the options left after striped</span>
        <span class="c"># the short options &#39;hi:o:&#39;, if an option requires an input, it should be followed by a &quot;:&quot;</span>
        <span class="c"># the long options &#39;ifile=&#39; is an option that requires an input, followed by a &quot;=&quot;</span>
        <span class="n">opts</span><span class="p">,</span> <span class="n">args</span> <span class="o">=</span> <span class="n">getopt</span><span class="o">.</span><span class="n">getopt</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="s">&#39;hi:o:&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;ifile=&#39;</span><span class="p">,</span> <span class="s">&#39;ofile=&#39;</span><span class="p">])</span>
    <span class="k">except</span> <span class="n">getopt</span><span class="o">.</span><span class="n">GetoptError</span><span class="p">:</span>
        <span class="n">print_usage</span><span class="p">()</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="c"># print(args) # debug line</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">opts</span><span class="p">:</span>
        <span class="n">print_usage</span><span class="p">()</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

    <span class="c"># print arguments</span>
    <span class="k">for</span> <span class="n">opt</span><span class="p">,</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">opts</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">opt</span> <span class="o">==</span> <span class="s">&#39;-h&#39;</span><span class="p">:</span>
            <span class="n">print_usage</span><span class="p">()</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">opt</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&quot;-i&quot;</span><span class="p">,</span> <span class="s">&quot;--ifile&quot;</span><span class="p">):</span>
            <span class="n">inputfile</span> <span class="o">=</span> <span class="n">arg</span>
        <span class="k">elif</span> <span class="n">opt</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&quot;-o&quot;</span><span class="p">,</span> <span class="s">&quot;--ofile&quot;</span><span class="p">):</span>
            <span class="n">outputfile</span> <span class="o">=</span> <span class="n">arg</span>
    <span class="k">print</span> <span class="s">&quot;Input file:&quot;</span><span class="p">,</span> <span class="n">inputfile</span>
    <span class="k">print</span> <span class="s">&quot;Output file:&quot;</span><span class="p">,</span> <span class="n">outputfile</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</pre></div>
<p>Below is the example running result:</p>

<pre><code>$ ./main.py -h
main.py -i &lt;input_file&gt; -o &lt;output_file&gt;
$ ./main.py
main.py -i &lt;input_file&gt; -o &lt;output_file&gt;
$ ./main.py -i inputfile
Input file: inputfile
Output file: 
$ ./main.py -i inputfile --ofile=outputfile
Input file: inputfile
Output file: outputfile</code></pre>
<p>Part 2. Below is an example showing how to use <strong>configuration</strong> and <strong>exceptions</strong>.</p>
<div class="highlight"><pre><span class="c">#!/usr/bin/python</span>

<span class="kn">from</span> <span class="nn">ConfigParser</span> <span class="kn">import</span> <span class="n">ConfigParser</span><span class="p">,</span> <span class="n">NoOptionError</span>
<span class="kn">import</span> <span class="nn">traceback</span>

<span class="c">## The configuration is a file named &quot;config.ini&quot; with below content</span>
<span class="c"># [helloworld]</span>
<span class="c"># name = Terry</span>
<span class="c">##</span>

<span class="c"># read configuration</span>
<span class="n">config</span> <span class="o">=</span> <span class="n">ConfigParser</span><span class="p">()</span>
<span class="n">config</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s">&#39;config.ini&#39;</span><span class="p">)</span>

<span class="c"># use configuration</span>
<span class="k">print</span> <span class="s">&#39;an existing item value:&#39;</span><span class="p">,</span> <span class="s">&#39;[ name =&#39;</span><span class="p">,</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;helloworld&#39;</span><span class="p">,</span> <span class="s">&#39;name&#39;</span><span class="p">),</span> <span class="s">&#39;]&#39;</span>
<span class="k">try</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">&#39;an non-existing item value:&#39;</span><span class="p">,</span> <span class="s">&#39;[ non-exist =&#39;</span><span class="p">,</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;helloworld&#39;</span><span class="p">,</span> <span class="s">&#39;non-exist&#39;</span><span class="p">),</span> <span class="s">&#39;]&#39;</span>
<span class="k">except</span> <span class="n">NoOptionError</span><span class="p">:</span>
    <span class="c"># pass</span>
    <span class="n">traceback</span><span class="o">.</span><span class="n">print_exc</span><span class="p">()</span> <span class="c"># display exception information</span>
</pre></div>
<p>Here is the output result:</p>

<pre><code>an existing item value: [ name = Terry ]
Traceback (most recent call last):
  File &quot;./config_parser.py&quot;, line 12, in &lt;module&gt;
    print 'an non-existing item value:', '[ non-exist =', config.get('helloworld', 'non-exist'), ']'
  File &quot;/usr/lib/python2.7/ConfigParser.py&quot;, line 618, in get
    raise NoOptionError(option, section)
NoOptionError: No option 'non-exist' in section: 'helloworld'
an non-existing item value: [ non-exist =</code></pre>
<p>As you can see the line <em>&ldquo;an non-existing item value: [ non-exist = &rdquo;</em> is output belowthe exception trace information. It is because the traceback.print_exc() output to <strong>stderr</strong> while the others output to <strong>stdout</strong>, they&#39;re two separate buffers and no particular order when output to console.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Preferences for Vim]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/09/vimrc.html"/>
        <published>2013-09-23T23:16:00+08:00</published>
        <updated>2013-10-12T20:14:12+08:00</updated>
        <id>http://terryoy.github.io/2013/09/vimrc.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#vim" term="vim" label="vim" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>These are settings that to improve usage of VI text editor for various purposes.</p>
<p>Copy &amp; paste below lines to <strong><em>~/.vimrc</em></strong>:</p>

<pre><code>set smartindent
set tabstop=4
set shiftwidth=4
set expandtab</code></pre>

<ol>
<li>smartindent - Do smart autoindenting when starting a new line for C-like programs.</li>
<li>tabstop - Number of spaces that a <Tab> in the file counts for.</li>
<li>shiftwidth - Number of spaces to use for each step of (auto)indent.</li>
<li>expandtab - Spaces are used in indents with <Tab>.</li>
</ol>
<p>For color scheme preferences:</p>

<pre><code>colorscheme torte</code></pre>
<p>It is the default black/white scheme.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Useful Aliases]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/09/useful_alias.html"/>
        <published>2013-09-23T00:00:00+08:00</published>
        <updated>2013-10-12T20:19:38+08:00</updated>
        <id>http://terryoy.github.io/2013/09/useful_alias.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#shell" term="shell" label="shell" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Below is a list of some useful aliases, which you could add to your linux shell environment.</p>
<p>Copy and paste below content to your <strong><em>~/.bashrc</em></strong>.</p>

<!--script src="https://gist.github.com/terryoy/6374725.js"></script-->
<div class="highlight"><pre><span class="c"># open a browser and view raw html (e.g. &quot;cat some.html | viewhtml&quot;)</span>
<span class="nb">alias </span><span class="nv">viewhtml</span><span class="o">=</span><span class="s1">&#39;firefox &quot;data:text/html;charset=utf-8;base64,$(base64 -w 0 &lt;&amp;0)&quot;&#39;</span>

<span class="c"># url encode / decode</span>
<span class="nb">alias </span><span class="nv">urlencode</span><span class="o">=</span><span class="s1">&#39;python -c &quot;import sys, urllib as ul; print ul.quote_plus(sys.argv[1])&quot;&#39;</span>
<span class="nb">alias </span><span class="nv">urldecode</span><span class="o">=</span><span class="s1">&#39;python -c &quot;import sys, urllib as ul; print ul.unquote_plus(sys.argv[1])&quot;&#39;</span>

<span class="c"># url shortener</span>
<span class="nb">alias </span><span class="nv">shortenurl</span><span class="o">=</span><span class="s2">&quot;python -c \&quot;import sys, urllib as ul; print ul.urlopen(&#39;http://tinyurl.com/api-create.php?url=%s&#39; % ul.quote_plus(sys.argv[1])).readline()\&quot;&quot;</span>
</pre></div>
]]>
        </content>
    </entry>
</feed>