<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Hello, World!</title>
    <link href="http://terryoy.github.io/tricks/feed.xml" rel="self" />
    <link href="http://terryoy.github.io/tricks/" />
    <updated>2017-11-06T20:37:45+08:00</updated>
    <id>http://terryoy.github.io/tricks/</id>
    <entry>
        <title type="html"><![CDATA[Python Function Decorators and The Use in Django]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2017/03/python-decorators-and-use-in-django.html"/>
        <published>2017-03-26T16:26:00+08:00</published>
        <updated>2017-11-06T20:37:45+08:00</updated>
        <id>http://terryoy.github.io/2017/03/python-decorators-and-use-in-django.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Basic of functions</h3>

<ul>
<li>Functions can be assign</li>
<li>Functions can be defined inside a function</li>
<li>Functions can be passed as a parameter and return as a returning value</li>
<li>Inner functions have access to the enclosing scope</li>
</ul>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;World&#39;</span><span class="p">):</span>
   <span class="k">print</span><span class="p">(</span><span class="s">&#39;Hello, {0}!&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">)))</span>

<span class="c"># assign</span>
<span class="n">bar</span> <span class="o">=</span> <span class="n">foo</span>
<span class="n">bar</span><span class="p">()</span>
<span class="c"># =&gt; Hello, world!</span>


<span class="c"># Use in parameter and return as result</span>
<span class="k">def</span> <span class="nf">greetings</span><span class="p">(</span><span class="n">call</span><span class="p">):</span>
    <span class="n">welcome</span> <span class="o">=</span> <span class="s">&#39;Welcome back!&#39;</span> <span class="c"># the enclosing scope to &quot;greeting_to&quot;</span>

    <span class="k">def</span> <span class="nf">greeting_to</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
        <span class="n">call</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">welcome</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">greeting_to</span>

<span class="n">greet</span> <span class="o">=</span> <span class="n">greetings</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span> <span class="c"># set bar as a greeting function</span>
<span class="n">greet</span><span class="p">(</span><span class="s">&#39;Terry&#39;</span><span class="p">)</span> <span class="c"># use the return function to generate greetings</span>
<span class="c"># =&gt; Hello, Terry!</span>
<span class="c"># =&gt; Welcome, back!</span>
</pre></div>

<h3 id="toc_1">2. Decorators</h3>
<p>A <strong>Function Decorator</strong> is a wrapper to an existing function, in which you can do some pre-process to the parameter or post-process to the returning value of the existing funciton.</p>
<p>The function decorator in Python must follows the below rules:</p>

<ul>
<li>It is a function that accept a function parameter(like saying <em>&ldquo;a decorator to which function&rdquo;</em>)</li>
<li>The decorator function must define and return a function as a result, so that the client gets something act similar to the existing function(act just like a function wrapper). </li>
<li>Do the customizing things inside the wrapper function, and call the existing function eventually</li>
</ul>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">greeting_decorator</span><span class="p">(</span><span class="n">call</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
        <span class="n">call</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Isn&#39;t it powerful?&quot;</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">wrapper</span>


<span class="c"># The decorator syntax</span>
<span class="nd">@greeting_decorator</span>
<span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Hello, {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>

<span class="n">greet</span><span class="p">(</span><span class="s">&#39;Terry&#39;</span><span class="p">)</span> <span class="c"># decorated function though the function name is the same as defined</span>
<span class="c"># =&gt; Hello, Terry </span>
<span class="c"># =&gt; Isn&#39;t it powerful?</span>
</pre></div>
<p>Decorators can be chained, and can also accept extra parameters when defining the customization to the function. However, decorators that accept parameters need to add another wrapper to the simple decorator.</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">room</span><span class="p">(</span><span class="n">room_name</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">decorator_wrapper</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="s">&quot;Enter room: {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">room_name</span><span class="p">))</span>
            <span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">wrapper</span>
    <span class="k">return</span> <span class="n">decorator_wrapper</span>

<span class="k">def</span> <span class="nf">leave_on_greet</span><span class="p">(</span><span class="n">greet_func</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">greeting_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
        <span class="n">greet_func</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Thanks, I&#39;m leaving&quot;</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">greeting_wrapper</span>


<span class="nd">@room</span><span class="p">(</span><span class="s">&#39;Matrix&#39;</span><span class="p">)</span>
<span class="nd">@leave_on_greet</span>
<span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Hello, {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>


<span class="n">greet</span><span class="p">(</span><span class="s">&#39;Terry&#39;</span><span class="p">)</span>
<span class="c"># =&gt; Enter room: Matrix</span>
<span class="c"># =&gt; Hello, Terry</span>
<span class="c"># =&gt; Thanks, I&#39;m leaving</span>
</pre></div>

<h3 id="toc_2">3. Example: using decorator in Django views</h3>
<p>It is very common that you want to write decorators for the request in views.py. For example, Django itself provides <a href="https://docs.djangoproject.com/en/1.10/topics/http/decorators/">a list of decorators</a> that you can use in certain scenarios, such as restricting HTTP methods, or cache controls. There are also other examples that could be consider: logging requests or checking auth tokens.</p>
<p>Here I write a very simple example that logs requests which a specified module name. We will have to use a new feature here that passes arguments between functions, because Django view methods can accept arguments defined in URL patterns.</p>
<div class="highlight"><pre><span class="c"># a request log decorator which you can define the module</span>
<span class="k">def</span> <span class="nf">log_request</span><span class="p">(</span><span class="n">module</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">decorator_wrapper</span><span class="p">(</span><span class="n">view_func</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="s">&#39;[{0}] {1} {2} {3}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">module</span><span class="p">,</span> <span class="n">request</span><span class="o">.</span><span class="n">get_host</span><span class="p">(),</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span><span class="p">,</span> <span class="n">request</span><span class="o">.</span><span class="n">get_full_path</span><span class="p">()))</span>
            <span class="k">return</span> <span class="n">view_func</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">func_wrapper</span>
    <span class="k">return</span> <span class="n">decorator_wrapper</span>


<span class="c"># use in views.py</span>
<span class="nd">@log_request</span><span class="p">(</span><span class="n">module</span><span class="o">=</span><span class="s">&quot;Book&quot;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">book_detail</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">book_id</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&#39;Book info: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">book_id</span><span class="p">))</span>


<span class="c"># URL patterns</span>
<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^book/(?P&lt;book_id&gt;\d+/info$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">book_detail</span><span class="p">),</span>
    <span class="c"># ...</span>
<span class="p">]</span>
</pre></div>
<p>Test in command line:</p>
<div class="highlight"><pre><span class="c"># test in shell, and see the book id correctly returned</span>
<span class="nv">$ </span>curl http://localhost/book/1/info
Book info: 1

<span class="c"># check the log in server console, everything is shown</span>
<span class="o">[</span>Book<span class="o">]</span> localhost:8000 GET /v1/book/1/info
</pre></div>

<h3 id="toc_3">Reference</h3>
<p>Reference: <a href="http://thecodeship.com/patterns/guide-to-python-function-decorators/">thecodeship.com/patterns/guide-to-python-function-decorators/</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[How I fix my Ubuntu with iRST(Intel Rapid Start Technology) Raid]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/12/how-i-fix-ubuntu-boot-with-irst-raid.html"/>
        <published>2016-12-29T00:05:00+08:00</published>
        <updated>2016-12-29T01:24:58+08:00</updated>
        <id>http://terryoy.github.io/2016/12/how-i-fix-ubuntu-boot-with-irst-raid.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>I have bought a Haier X3 laptop with a 500GB hard disk and a 32GB SSD with which you could use to boot and cache disk rapidly for Windows via Intel&#39;s technology. However, I&#39;m a Linux fan, so I also need to install Ubuntu on my computer.</p>
<p>At first, the Windows 7 system was pre-installed. When I installed Ubuntu it failed at booting if the Windows 7 had enabled iRST. I cannot find any working solution to fix the Ubuntu problem at the time, so I just disabled Win 7&#39;s iRST, and then use the SSD as normal disk. Later I had a very good time with the Linux environment.</p>
<p>Recently, I&#39;m going to refresh the whole system and make both clean again. So I give a second try to enable Windows 7&#39;s iRST and make Ubuntu boot correctly, and I succeeded after two days hard work!</p>
<p>The root cause is that the raid management tool on Linux will assemble the partitions as RAID and then the <code>initramds</code> cannot find the partition with UUID. It fails like this:</p>
<div class="highlight"><pre>Gave up waiting <span class="k">for </span>root device. Common problems:
 - Boot args <span class="o">(</span>cat /proc/cmdline<span class="o">)</span>
   - Check <span class="nv">rootdelay</span><span class="o">=</span> <span class="o">(</span>did the system <span class="nb">wait </span>long enough?<span class="o">)</span>
   - Check <span class="nv">root</span><span class="o">=</span> <span class="o">(</span>did the system <span class="nb">wait </span><span class="k">for </span>the right device?<span class="o">)</span>
 - Missing modules <span class="o">(</span>cat /proc/modules; ls /dev<span class="o">)</span>
ALERT! /dev/disk/by-uuid/52152d36-9dc4-42a6-8be1-3966bf397b09 does not exist. Dropping to a shell!

BusyBox v1.22.1 <span class="o">(</span>Ubuntu 1:1.22.0-15ubuntu1<span class="o">)</span> built-in shell <span class="o">(</span>ash<span class="o">)</span>
Enter <span class="s1">&#39;help&#39;</span> <span class="k">for </span>a lost of built-in commands.
<span class="o">(</span>initramfs<span class="o">)</span>
</pre></div>
<p>I have searched on the internet about it, finding that it&#39;s related to the block id that generated for the partitions are missing:</p>
<div class="highlight"><pre><span class="o">(</span>initramfs<span class="o">)</span> blkid
/dev/sda: <span class="nv">TYPE</span><span class="o">=</span><span class="s2">&quot;isw_raid_member&quot;</span>
/dev/sdb: <span class="nv">TYPE</span><span class="o">=</span><span class="s2">&quot;isw_raid_member&quot;</span>

<span class="o">(</span>initramfs<span class="o">)</span> ls /dev/md*
md/  md126  md127
</pre></div>
<p>While the partitions of <code>/dev/sda/</code> are supposed to be recognized by UUIDs, but it is created as a software RAID device(md126), so the partitions of it cannot be accessed at boot time. I have tried to install Ubuntu via my usb disk again and again, also try to use <code>chroot</code> to update the grub record and the initramfs on the partiion, and I still don&#39;t have luck. After a long frustrating period, I suddenly come up the idea: why not just disable the raid array at boot time? </p>
<p>After I tried the below two commands in <code>initramfs</code>, it come back to normal boot after I exit the initramfs mode!</p>
<div class="highlight"><pre><span class="o">(</span>initramfs<span class="o">)</span> mdadm --stop --scan

<span class="o">(</span>initramfs<span class="o">)</span> blockdev --rereadpt /dev/sda
</pre></div>
<p>The first command scan all the RAID array entries and close them. The second command re-read the partitions with UUIDs so you get the UUID entries for initramfs to boot.</p>
<p>This time I have confident to make the solution permanent. First of all, I will need to use my Ubuntu usb boot disk to enter the shell(&#39;Go Back&#39; in the first step of the installation, then you find a choice for executing a shell) and mount the partition. (My target Ubuntu parition is /dev/sda3)</p>
<div class="highlight"><pre><span class="nv">$ </span>mount /dev/sda3 /mnt
<span class="nv">$ </span>mount -t proc /proc /mnt/proc
<span class="nv">$ </span>mount -t sysfs /sys /mnt/sys
<span class="nv">$ </span>mount -o <span class="nb">bind</span> /dev /mnt/dev
<span class="nv">$ </span>chroot /mnt /bin/bash
</pre></div>
<p>This allow me to mount the partition just as I&#39;ve booted into it. Then I will update it&#39;s boot process(e.g. grub &amp; initramfs).</p>
<div class="highlight"><pre><span class="nv">$ </span>grub-install /dev/sda
<span class="nv">$ </span>update-grub

<span class="nv">$ </span>vi /etc/initramfs-tools/script/local-top/mdadm
mdadm --stop --scan
blockdev --rereadpt /dev/sda

<span class="nv">$ </span>chmod +x /etc/initramfs-tools/script/local-top/mdadm
<span class="nv">$ </span>update-initramfs -u
</pre></div>
<p>Voilà! My Ubuntu&#39;s back!&hellip;wait, my Windows 7 has gone! It seems that GRUB has erase my Windows 7 boot entry. This doesn&#39;t stop me now. It&#39;s easy to get Windows back.</p>
<p>I tried to run <code>update-grub</code> again, but it doesn&#39;t recognize the Windows boot entry even though os-prober is enabled. So I need to add it manually:</p>
<div class="highlight"><pre><span class="c"># check the Windows partition UUID</span>
<span class="nv">$ </span>blkid

<span class="nv">$ </span>vi /boot/grub/grub.cfg
<span class="c"># (look for the section of &quot;/etc/grub.d/40_custom&quot; and add the content below)</span>
menuentry <span class="s2">&quot;Windows 7&quot;</span> <span class="o">{</span>
    insmod ntfs
    <span class="nb">set </span><span class="nv">root</span><span class="o">=</span><span class="s1">&#39;(hd0,1)&#39;</span>
    search --no-floppy --fs-uuid --set 76B0EE43B0EE0987
    chainloader +1
<span class="o">}</span>
</pre></div>
<p>Then reboot. It is finally OK.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Working with Grub2 in Linux]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/10/working-with-grub2-linux.html"/>
        <published>2016-10-21T10:21:00+08:00</published>
        <updated>2016-12-28T11:35:52+08:00</updated>
        <id>http://terryoy.github.io/2016/10/working-with-grub2-linux.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p><strong>Grub2</strong>(GRUB: the GRand Unified Bootloader) is the main bootloader in Debian/Ubuntu distribution. I have always wanted to know the details to change or fix the booting process. So I did a research and make a note here.</p>

<h3 id="toc_0">1. Overview</h3>
<p>Normally we should use the util <code>update-grub</code> to update the grub2 boot entries. In grub(the older, not grub2), we need to update the boot menu file <code>/boot/grub/menu.lst</code> carefully to manage the entries. In this case, it could be easy to make mistakes, or inconvenient while editing the file and get required information at the same time. </p>
<p>In grub2 with <code>update-grub</code>, this process can be managed in updating a general setting file and a list of scripts that generate entries. These files are:</p>

<ul>
<li><code>/etc/default/grub</code>, general grub settings,</li>
<li><code>/etc/grub.d/*</code>, this directory contains a list of executable scripts and will be processed in order. You can add the files according to the convention:

<ul>
<li>&ldquo;00_*&rdquo;: It is reserved for 00_header.</li>
<li>&ldquo;10_*&rdquo;: Native boot entries.</li>
<li>&ldquo;20_*&rdquo;: Third party apps (e.g. memtest86+).</li>
</ul></li>
</ul>
<p>The number namespace in-between is configuratble by system installer and/or administrator. The order of other number will be reflected in the menu if you set 01_otheros, 11_otheros, etc.</p>
<p>For example, I have below config files in <code>/etc/init.d/</code> for a ubuntu installation:</p>

<pre><code>00_header
05_debian_theme
10_linux
20_linux_gen
30_os-prober
30_uefi_firmware
40_custom
41_custom</code></pre>

<h3 id="toc_1">2. Clean up Grub2 Menu</h3>
<p>After a release or a kernel upgrade, you may usually find unuseful entries in the boot menu, which are mainly for previous state recovery. So here let&#39;s see how to remove the unuseful entries.</p>
<p>First are the unnecessary kernel entries. They exist because you install more older kernel versions lying around on your machine. So you can check if there are more than one <code>linux-headers-&lt;version&gt;</code> entry and <code>linux-image-&lt;version&gt;</code> entry, then remove the unnecessary package via package manager.</p>
<p>Second, unwanted entries in <code>/etc/init.d/</code> such as memtest86+. Disabling them is very easy, just make them not executable then it&#39;s done.</p>
<div class="highlight"><pre><span class="nv">$ </span><span class="nb">cd</span> /etc/init.d/
<span class="nv">$ </span>sudo chmod -x 20_memtest86+
</pre></div>
<p>And the last thing is to update grub:</p>
<div class="highlight"><pre><span class="nv">$ </span>sudo update-grub
</pre></div>
<p>Sometimes if you just want to edit some of the boot menu item, you could lookup the <code>menuentry</code> in the file and edit the content. For example, there is a <code>30_os-prober</code> file in <code>/etc/grub.d/</code>, which checks if there are other OS exists on local drives and create boot entries for them. You can see the similar content in each OS part and using <code>cat</code> and <code>menuentry</code> to add an entry to the grub config.</p>

<h3 id="toc_2">3. Grub2 Settings</h3>
<p>In the general setting file <code>/etc/default/grub</code>, there are some basic settings that you could change.</p>

<pre><code># (template of /etc/default/grub)
# 1. Default boot entry, can be the index or the title of the boot item; SAVEDEFAULT option let you save every last choice as next default
GRUB_DEFAULT=0
GRUB_SAVEDEFAULT=true

# 2. Go directly to the default boot entry unless you press 'shift' or 'esc' at startup. The &quot;QUIET&quot; option will display the count down of the hidden timeout before going to boot, which you can use a chance for a boot splash
GRUB_HIDDEN_TIMEOUT=0
GRUB_HIDDEN_TIMEOUT_QUIET=true

# 3. Grub background, just simply set the image path(supports '.png', '.tga', '.jpg' or '.jpeg')
GRUB_BACKGROUND='/path/to/image.jpg'</code></pre>
<p>Ref: (run as shell cmd) <code>info -f grub -s &#39;Simple configuration&#39;</code></p>

<h3 id="toc_3">4. Grub2 tools</h3>

<h4 id="toc_4">4.1 Grub Rescue</h4>
<p>Many times when grub boot failed, it will run into <code>grub-rescue</code> shell environment. It is expected that you fix something(usually try to recover the damaged boot record.) and set a bootable entry for grub to continue the boot process</p>
<p>Below is an example of a common process.</p>
<div class="highlight"><pre><span class="c"># check available parition</span>
grub rescue&gt; ls
<span class="o">(</span>hd0<span class="o">)</span>,<span class="o">(</span>hd0,msdos3<span class="o">)</span>,<span class="o">(</span>hd0,msdos2<span class="o">)</span>,<span class="o">(</span>hd0,msdos1<span class="o">)</span>

<span class="c"># check available grub boot record in a partition</span>
grub rescue&gt; ls <span class="o">(</span>hd0,msdosX<span class="o">)</span>/boot/grub

<span class="c"># set boot entry</span>
grub rescue&gt; <span class="nb">set </span><span class="nv">root</span><span class="o">=(</span>hd0,msdos3<span class="o">)</span>
grub rescue&gt; <span class="nb">set </span><span class="nv">prefix</span><span class="o">=(</span>hd0,msdos3<span class="o">)</span>/boot/grub
grub rescue&gt; insmod /boot/grub/normal.mod

<span class="c"># go to startup screen</span>
grub rescue&gt;normal

<span class="c"># (is this the alternative way?)</span>
rescue&gt;linux /boot/vmlinuz-xxx-xxx <span class="nv">root</span><span class="o">=</span>/dev/sdax
rescue&gt;initrd /boot/initrd.img-xxx-xxx
rescue&gt;boot
</pre></div>

<h3 id="toc_5">Reference</h3>

<h1 id="toc_6"></h1>
<p>The GRUB manual: (run in linux shell) <code>info grub</code></p>
<p>Clean up Grub2 entries: <a href="http://www.howtogeek.com/howto/17787/clean-up-the-new-ubuntu-grub2-boot-menu/">www.howtogeek.com/howto/17787/clean-up-the-new-ubuntu-grub2-boot-menu/</a>. (There is also a link to an article for the old <code>grub</code>)</p>
<p>How to Configure Grub2 boot loader settings: <a href="http://www.howtogeek.com/196655/how-to-configure-the-grub2-boot-loaders-settings/">www.howtogeek.com/196655/how-to-configure-the-grub2-boot-loaders-settings/</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[A Short Reference of Python Logging]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/05/short-ref-python-logging.html"/>
        <published>2016-05-26T19:55:00+08:00</published>
        <updated>2017-05-27T23:47:55+08:00</updated>
        <id>http://terryoy.github.io/2016/05/short-ref-python-logging.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>I have for many times use the logging function, but never understand it completely. So I go through the document and make some notes, hoping it will help me use it more quickly in the future. </p>

<h3 id="toc_0">1. Basic Config</h3>
<p>If you want to use a programmable method other than a configuration file, the basicConfig() method is the general initializing method.</p>
<p>The most basic form is default log, which you don&#39;t need basicConfig(). It is using console output with WARNING level.</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">logging</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">logging</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&#39;hello&#39;</span><span class="p">)</span> <span class="c"># no output</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">logging</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s">&#39;world&#39;</span><span class="p">)</span>
<span class="n">world</span>
</pre></div>
<p>The basic config contains a list of below elements:</p>

<ul>
<li>  filename    - Using a <em>FileHandler</em> to output the log</li>
<li>  filemode    - file open mode(&#39;r&#39;, &#39;w&#39;, &#39;a&#39;), mainly used to choose append or write a new log file</li>
<li>  format      - A string for specifying the log output template, If you want to lookup a list of supported keywords, look for section &#39;LogRecord attributes&#39; in the python official document</li>
<li>  datefmt     - A specified date/time format.</li>
<li>  level       - set the <em>root</em> loglevel for the logger</li>
<li>  stream      - Specify a stream for the StreamHandler, for example, a buffer output stream or stdout. It will be ignored if &ldquo;filename&rdquo; is present.</li>
</ul>
<p>The logger can be initialized only once when basicConfig() is called. Then </p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">logging</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="s">&#39;program.log&#39;</span><span class="p">,</span> 
        <span class="n">filemode</span><span class="o">=</span><span class="s">&#39;a&#39;</span><span class="p">,</span>
        <span class="n">format</span><span class="o">=</span><span class="s">&quot;</span><span class="si">%(asctime)-15s</span><span class="s"> </span><span class="si">%(levelname)s</span><span class="s"> [</span><span class="si">%(module)s</span><span class="s">] </span><span class="si">%(message)s</span><span class="s">&quot;</span><span class="p">,</span>
        <span class="n">datefmt</span><span class="o">=</span><span class="s">&quot;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S.</span><span class="si">%f</span><span class="s">&quot;</span><span class="p">,</span>
        <span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">)</span>
</pre></div>

<h3 id="toc_1">2. Configuration Object and the Modular Approach</h3>
<p>When choosing the Modular Approach of logging, you need to deal with 4 elements:</p>

<ul>
<li>  loggers     - the interface that application modules used to log things</li>
<li>  handlers    - send the log records (that loggers created) to the appropriate destinations</li>
<li>  filters     - provide a finer grained facility for determining which log records should be output</li>
<li>  formatters  - specify the layout of the log records in the final output</li>
</ul>

<h4 id="toc_2">2.1 Logger hierarchy</h4>
<p>The loggers used by all the modules are formed in a conceptual hierarchy by the naming with a separator(&#39;.&#39;). For example: &#39;abc.text&#39;, is the descendant of logger &#39;abc&#39;, while &#39;abc&#39; can be the parent of &#39;abc.text&#39;, &#39;abc.pdf&#39;, &#39;abc.image&#39;, etc. A good convention is to use loggers in a module sense, using in each <code>.py</code> as below:</p>
<div class="highlight"><pre><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</pre></div>
<p>The root of all loggers is called the &ldquo;root&rdquo; logger, which prints the logger name as &ldquo;ROOT&rdquo; in output.
</p>

<h4 id="toc_3">2.2 Useful handlers</h4>
<p>There are some useful handlers in the section of python <em>Logging Howto</em> document. Some of them are listed as here:</p>

<ul>
<li>  StreamHandler   - to stream object (default stdin?)</li>
<li>  FileHandler     - to a disk file</li>
<li>  <strong>RotatingFileHandler</strong>         - from <em>BaseRotatingHandler</em>, send logs to files, rotating log file with a maximum file size.</li>
<li>  <strong>TimedRotatingFileHandler</strong>    - from <em>BaseRotatingHandler</em>, send logs to files, rotating log file at a certain timed intervals.</li>
<li>  SocketHandler/DatagramHandler   - send log messages to TCP/IP and UDP sockets</li>
<li>  SMTPHandler     - Send to a designated email address</li>
<li>  NullHandler     - Do nothing, it&#39;s used in development that supports logging with this mock</li>
</ul>
<p>This shows the variety of logging output scenarios, which you could look them up in the python doc.</p>

<h4 id="toc_4">2.3 The propagation of loggers</h4>
<p>Look at the flow of logging in the below diagram from <a href="https://docs.python.org/2/howto/logging.html#logging-advanced-tutorial">python&#39;s tutorial</a>,</p>
<p><img src="https://docs.python.org/2/_images/logging_flow.png" alt="logging flow"/></p>
<p>When a log record is send to the logger in the module, it will first check if its own filter(the filter of a logger) reject it, then pass to its handler; if propagation is set to true(by default), it will pass the log record to it&#39;s parent too, so the log record will bubble up till the root logger, and each logger will judge by their handler and filter to decide whether to output the log record. So we often setup a top level logger, and then configure a child logger only if needed.</p>

<h4 id="toc_5">2.4 Configuring Logging</h4>
<p>The most usual approaches are using <code>fileConfig()</code> and <code>dictConfig()</code>. With fileConfig() you can use a <strong>.conf</strong> file to load the settings (this approach is deprecated), and with dictConfig() you can use even wider range of persistence choices, such as JSON, python file, yaml, etc.</p>
<p>For example, I have written a small utils for command line interaction and also want to log the HTTP request details. So I defined two handlers: one for console output, another for file output so that I can review the details. The console output must be simple without unneccessary information, and the file output should contains all the time, module details for investigation. Here is my configuration using a python file. (The advantages for a python configuration is that you can also use expressions and comments.)</p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">logging</span><span class="o">,</span> <span class="nn">logging.config</span>

<span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">&quot;log_config&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">&quot;version&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="s">&quot;formatters&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">&quot;brief&quot;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s">&quot;format&quot;</span><span class="p">:</span> <span class="s">&quot;</span><span class="si">%(message)s</span><span class="s">&quot;</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="s">&quot;detail&quot;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s">&quot;format&quot;</span><span class="p">:</span> <span class="s">&quot;</span><span class="si">%(asctime)-15s</span><span class="s"> </span><span class="si">%(levelname)s</span><span class="s"> [</span><span class="si">%(name)s</span><span class="s">.</span><span class="si">%(funcName)s</span><span class="s">] </span><span class="si">%(message)s</span><span class="s">&quot;</span><span class="p">,</span>
                <span class="s">&quot;datefmt&quot;</span><span class="p">:</span> <span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S&#39;</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
        <span class="s">&quot;handlers&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">&quot;console&quot;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s">&quot;class&quot;</span><span class="p">:</span> <span class="s">&quot;logging.StreamHandler&quot;</span><span class="p">,</span>
                <span class="s">&quot;level&quot;</span><span class="p">:</span> <span class="s">&quot;INFO&quot;</span><span class="p">,</span>
                <span class="s">&quot;formatter&quot;</span><span class="p">:</span> <span class="s">&quot;brief&quot;</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="s">&quot;file&quot;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s">&quot;class&quot;</span><span class="p">:</span> <span class="s">&quot;logging.handlers.RotatingFileHandler&quot;</span><span class="p">,</span>
                <span class="s">&quot;filename&quot;</span><span class="p">:</span> <span class="s">&quot;dev.log&quot;</span><span class="p">,</span>
                <span class="s">&quot;level&quot;</span><span class="p">:</span> <span class="s">&quot;DEBUG&quot;</span><span class="p">,</span>
                <span class="s">&quot;formatter&quot;</span><span class="p">:</span> <span class="s">&quot;detail&quot;</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
        <span class="s">&quot;root&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">&quot;handlers&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;console&quot;</span><span class="p">,</span> <span class="s">&quot;file&quot;</span><span class="p">],</span>
            <span class="s">&quot;level&quot;</span><span class="p">:</span> <span class="s">&quot;DEBUG&quot;</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="s">&quot;loggers&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">&quot;requests&quot;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s">&quot;handlers&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;file&quot;</span><span class="p">],</span>
                <span class="s">&quot;level&quot;</span><span class="p">:</span> <span class="s">&quot;DEBUG&quot;</span><span class="p">,</span>
                <span class="s">&quot;propagate&quot;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">}</span>

<span class="n">logging</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">dictConfig</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">&quot;log_config&quot;</span><span class="p">])</span>
</pre></div>
<p>There are two formatters: &ldquo;brief&rdquo; for simply output the message body, the root loggers is default logger for all the modules I write, and also the 3rd party libraries like python <code>requests</code>. Since all the info log should appear in both <strong>console</strong> and the <strong>file</strong>, I need to put both inthe root logger. However, to avoid the unneccssary debug log showing in console, I set the level <strong>INFO</strong> in the <strong>console</strong> handler. This enables the file logger logs everything while the console doesn&#39;t. </p>
<p>Next I discover that the library &ldquo;requests&rdquo; also have some &ldquo;INFO&rdquo; log which is unneccessary in console, so I will specificially make it disappear using the <strong>loggers</strong> config. The important thing here is to use the <strong>propagate</strong> feature. </p>
<p>The &ldquo;file&rdquo; logger wants the requests&#39; debug log, so I need to set the level to DEBUG. By default, it will propagate the log record to the &ldquo;root&rdquo; logger which make it appear to console. So I will use <code>propagate: False</code> to disable the propagation. Then the log records  will stay in the &ldquo;requests&rdquo; logger and will be invisible to the &ldquo;root&rdquo; logger.</p>
<p>If you&#39;re not sure what to config with, write a small example project to experiment the result.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Config your git repository to use SSH Key]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/04/git-ssh-config.html"/>
        <published>2016-04-17T16:11:00+08:00</published>
        <updated>2016-08-31T10:42:42+08:00</updated>
        <id>http://terryoy.github.io/2016/04/git-ssh-config.html</id>
        <category scheme="http://terryoy.github.io/tag/#shell" term="shell" label="shell" />
        <category scheme="http://terryoy.github.io/tag/#virtualbox" term="virtualbox" label="virtualbox" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>It is very time-consuming typing user and password every time when you do git pull/push to sync your code. Using the rsa ssh key for the authentication will save you a lot of time.</p>

<h3 id="toc_0">1. Generate SSH Key</h3>
<p>Just use the method I mentioned before in <a href="/2014/01/ssh-key-based-auth-server.html#toc_1">this article</a>, you will get a public/private key pair. Upload the public key to your github or other git hosting service.</p>

<h3 id="toc_1">2. Config your local SSH</h3>
<p>Create or open the file <code>~/.ssh/config</code> for ssh key config. The content will be similar as below:</p>

<pre><code>Host dev
 HostName dev.local
 IdentityFile ~/.ssh/dev_rsa
Host github.com
 HostName github.com
 IdentityFile ~/.ssh/github_rsa</code></pre>
<p>You can use a &ldquo;host&rdquo; alias for ssh connect instead of the full host name, this would be convenient if you might switch server host.</p>

<h3 id="toc_2">3. Choose the correct git url</h3>
<p>Usually public git hosting services use HTTPS or GIT protocol, and your private repository can use SSH protocol like in <a href="/2014/10/common-git-commands.html#toc_3">this article</a>.</p>

<pre><code>* Git URL: git@bitbucket.org:&lt;accountname&gt;/&lt;reponame&gt;.git  
* Use with alias: git@bitbucket:&lt;accountname&gt;/&lt;reponame&gt;.git</code></pre>

<h3 id="toc_3">4. No more ask of  the passphrase</h3>
<p>Initially if you use a ssh key with passphrase, you might need to enter the passphrase every time you use it. It will be kind of annoying although provide better security. However, sometimes I don&#39;t want it to be entered every time in my private trusted computer. So we need <code>ssh-agent</code> to handle that.</p>
<div class="highlight"><pre><span class="c"># install the openssh-client package if you&#39;re on Debian/Ubuntu</span>
<span class="nv">$ </span>sudo apt-get install openssh-client

<span class="c"># the ssh-add and ssh-agent tools will be available after the installation, but you need to start ssh-agent in your .bashrc script</span>
<span class="nv">$ </span>vi ~/.bashrc
<span class="nb">eval</span> <span class="k">$(</span>ssh-agent<span class="k">)</span>

<span class="c"># add the ssh key to ssh-agent (the passphrase will be asked once)</span>
<span class="nv">$ </span><span class="nb">cd</span> ~/.ssh
<span class="nv">$ </span>ssh-add -k gitub_rsa
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Ubuntu Desktop Sharing to Mac OSX]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/02/ubuntu-desktop-sharing-to-osx.html"/>
        <published>2016-02-26T10:52:00+08:00</published>
        <updated>2016-02-26T11:11:36+08:00</updated>
        <id>http://terryoy.github.io/2016/02/ubuntu-desktop-sharing-to-osx.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#osx" term="osx" label="osx" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>I have a spare laptop rest in my house which I seldom use(I major use my macbook pro for work), but it&#39;s still good for developing projects and runs Linuxi Mint. So I want it to be available any time when I&#39;m at home so I could use it to continue my side project works. With ssh and VNC, I can setup both the command line and desktop environment online so I don&#39;t need to open the laptop, but use my macbook to access the environment. Then I have the convenience that the laptop can put anywhere in the house and clear my desktop.</p>
<p>I found <a href="http://www.fiz-ix.com/2012/12/ubuntu-to-mac-os-x-screen-sharing-with-vinagre/">this post</a> very useful to do the trick. It uses &ldquo;vino&rdquo; with easily setup steps, and you can get &ldquo;Vinagre&rdquo; VNC client on Linux ox,  but you need some notices about the access on OSX. So I write my process here.</p>

<h3 id="toc_0">1. Setup Vino(VNC for gnome)</h3>
<p>Just reference the post. </p>
<div class="highlight"><pre><span class="nv">$ </span>sudo apt-get vino
<span class="c"># the preferences is the same as &quot;Desktop Sharing&quot; preference panel in Linux Mint</span>
<span class="nv">$ </span>vino-preferences
</pre></div>
<p>You can set up the items just as the post said in vino-preferences, but on Linux Mint it lacks out the &ldquo;Advanced settings&rdquo; mentioned in the post. So you need &ldquo;dconf-editor&rdquo; to manually set it.</p>
<div class="highlight"><pre><span class="nv">$ </span>sudo apt-get install dconf-editor
<span class="nv">$ </span>dconf-editor
</pre></div>
<p>Find the config item in dconf-editor with path <strong>&ldquo;desktop.gnome.remote-access&rdquo;</strong>. You need to uncheck the &ldquo;require encryption&rdquo; to support OSX, otherwise the authentication is unsupported on OSX.</p>

<h3 id="toc_1">2. Using Screen Sharing on Mac OSX</h3>
<p>Turn on the &ldquo;Spotlight&rdquo; with keyboard shortcut <code>cmd+K</code>, enter &ldquo;screen sharing&rdquo; and you can find the default desktop sharing client app on Mac OSX.</p>
<p>Type &ldquo;vnc://your_server_ip:5900&rdquo; and then you get the prompt to enter password for the access. That&#39;s it!</p>

<h3 id="toc_2">3. More</h3>
<p>The post also talked about using the <code>avahi</code> service to broadcast the desktop sharing service to OSX. It is an advanced option to try, I will update it if I have tried.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[VirtualBox Command Line Tricks]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/02/vbox-cmd-tools-tricks.html"/>
        <published>2016-02-17T11:01:00+08:00</published>
        <updated>2017-01-10T17:41:18+08:00</updated>
        <id>http://terryoy.github.io/2016/02/vbox-cmd-tools-tricks.html</id>
        <category scheme="http://terryoy.github.io/tag/#shell" term="shell" label="shell" />
        <category scheme="http://terryoy.github.io/tag/#virtualbox" term="virtualbox" label="virtualbox" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Sometimes we need to work with VirtualBox&#39;s command line tools to make things done. Here are a collections of tasks I encountered.</p>

<h3 id="toc_0">1. Converting an Linux .img format to a .vdi (VirtualBox disk)</h3>
<div class="highlight"><pre><span class="nv">$ </span>VBoxManage convertfromraw mydisk.img mydisk.vdi --format vdi
</pre></div>

<h3 id="toc_1">2. Mount virtual disk on your ubuntu system</h3>
<p>In linux, we can use a the <code>qemu-nbd</code> and <code>kpartx</code> to mount a .vdi file on a path. The <em>qemu-nbd</em> tool can create a block device to enable it to be share via NBD(Network Block Device) protocol. Then, we will use <code>kpartx</code> to create device maps from the partition tables of the device, which makes the partition of the image mountable.</p>
<div class="highlight"><pre><span class="c"># (prerequisites] install the dependencies</span>
<span class="nv">$ </span>sudo apt-get install qemu-utils kpartx

<span class="c"># to mount the device</span>
<span class="nv">$ </span>sudo modprobe -nbd
<span class="nv">$ </span>sudo qemu-nbd -c /dev/nbd0 &lt;vdi_file&gt;
<span class="nv">$ </span>sudo kpartx -a /dev/nbd0
<span class="nv">$ </span>sudo mount /dev/mapper/nbd0p1 /mnt/&lt;mount_point&gt;

<span class="c"># delete the device when no longer needed</span>
<span class="nv">$ </span>sudo umount /mnt/&lt;mount_point&gt;
<span class="nv">$ </span>sudo qemu-nbd -d /dev/nbd0
</pre></div>
<p>(&hellip;to be continued)</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Multiple Arguments in Python]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/02/args-kwargs-python.html"/>
        <published>2016-02-03T16:05:00+08:00</published>
        <updated>2016-02-03T16:57:01+08:00</updated>
        <id>http://terryoy.github.io/2016/02/args-kwargs-python.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>This article tells about how to use variable number of arguments in Python functions.</p>

<h3 id="toc_0">1. Passing Multiple Arguments</h3>
<p>The meaning of &ldquo;args&rdquo; and &ldquo;kwargs&rdquo; we often used as the multiple arguments are &ldquo;normal(unnamed) arguments&rdquo; and &ldquo;keyword(named) arguments&rdquo;. Try the below in python and you can see it&#39;s actually the difference of a tuple and a dictionary.</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span><span class="k">def</span> <span class="nf">play</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">kwargs</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span><span class="n">play</span><span class="p">()</span>
<span class="p">()</span>
<span class="p">{}</span>
</pre></div>
<p>You should use the order of specific arguments, unnamed arguments, and named arguments when defining a function:</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">arg_order</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</pre></div>

<h3 id="toc_1">2. How to pass arguments from one function to another</h3>
<p>Below are a list of examples to show you the result of different methods of multiple arguments:</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">a</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
<span class="o">...</span>   <span class="k">print</span><span class="p">(</span><span class="s">&quot;unnamed: {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">args</span><span class="p">))</span>
<span class="o">...</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
<span class="n">unnamed</span><span class="p">:</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">b</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<span class="o">...</span>   <span class="k">print</span><span class="p">(</span><span class="s">&quot;named: {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">kwargs</span><span class="p">))</span>
<span class="o">...</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">named</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>

<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">c</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<span class="o">...</span>   <span class="k">print</span><span class="p">(</span><span class="s">&quot;full:&quot;</span><span class="p">)</span>
<span class="o">...</span>   <span class="k">print</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
<span class="o">...</span>   <span class="n">a</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
<span class="o">...</span>   <span class="n">b</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
<span class="o">...</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<span class="o">...</span>   <span class="n">c</span><span class="p">(</span><span class="mi">123</span><span class="p">,</span> <span class="mi">456</span><span class="p">,</span> <span class="mi">789</span><span class="p">,</span> <span class="n">we</span><span class="o">=</span><span class="s">&quot;we&quot;</span><span class="p">,</span> <span class="n">love</span><span class="o">=</span><span class="s">&quot;love&quot;</span><span class="p">,</span> <span class="n">it</span><span class="o">=</span><span class="s">&quot;it&quot;</span><span class="p">)</span>
<span class="o">...</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">test</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span> <span class="n">we</span><span class="o">=</span><span class="s">&quot;we&quot;</span><span class="p">,</span> <span class="n">love</span><span class="o">=</span><span class="s">&quot;love&quot;</span><span class="p">,</span> <span class="n">it</span><span class="o">=</span><span class="s">&quot;it&quot;</span><span class="p">)</span>
<span class="n">full</span><span class="p">:</span>
<span class="mi">123</span>
<span class="n">unnamed</span><span class="p">:</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
<span class="n">named</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;we&#39;</span><span class="p">:</span> <span class="s">&#39;we&#39;</span><span class="p">,</span> <span class="s">&#39;love&#39;</span><span class="p">:</span> <span class="s">&#39;love&#39;</span><span class="p">,</span> <span class="s">&#39;it&#39;</span><span class="p">:</span> <span class="s">&#39;it&#39;</span><span class="p">}</span>
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Linux Server Security Useful Commands]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/06/some-useful-linux-server-security-commands.html"/>
        <published>2015-06-27T22:31:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2015/06/some-useful-linux-server-security-commands.html</id>
        <category scheme="http://terryoy.github.io/tag/#server" term="server" label="server" />
        <category scheme="http://terryoy.github.io/tag/#security" term="security" label="security" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>When suspecting your server is broken into, below is some tricks to do the server audit.</p>

<h3 id="toc_0">1. Use &ldquo;last&rdquo; command to check login sessions</h3>
<div class="highlight"><pre><span class="nv">$ </span>last
terryoy  pts/0        58.251.197.153   Sat Jun 27 21:42   still logged in   
terryoy  pts/2        113.116.1.68     Tue Jun 23 14:40 - 16:14  <span class="o">(</span>01:34<span class="o">)</span>    
terryoy  pts/0        113.116.1.68     Tue Jun 23 14:38 - 16:14  <span class="o">(</span>01:35<span class="o">)</span>    
terryoy  pts/0        183.16.85.159    Tue Jun 23 09:37 - 14:02  <span class="o">(</span>04:24<span class="o">)</span>    
terryoy  pts/0        183.16.197.223   Mon Jun 22 17:47 - 20:10  <span class="o">(</span>02:22<span class="o">)</span>    
terryoy  pts/6        183.16.195.96    Thu Jun 18 11:08 - 15:23  <span class="o">(</span>04:14<span class="o">)</span>    
terryoy  pts/5        183.16.195.96    Thu Jun 18 11:08 - 15:23  <span class="o">(</span>04:14<span class="o">)</span>    
terryoy  pts/2        183.16.190.37    Thu Jun 18 10:37 - 13:06  <span class="o">(</span>02:29<span class="o">)</span>    
terryoy  pts/0        183.16.190.37    Thu Jun 18 10:01 - 13:01  <span class="o">(</span>02:59<span class="o">)</span>
</pre></div>

<h3 id="toc_1">2. Use &ldquo;lastlog&rdquo; to check all user&#39;s last login time</h3>
<div class="highlight"><pre><span class="nv">$ </span>lastlog
Username         Port     From             Latest
root             pts/2    27.45.56.68      Sat Feb 21 15:21:40 +0800 2015
daemon                                     **Never logged in**
bin                                        **Never logged in**
sys                                        **Never logged in**
sync                                       **Never logged in**
games                                      **Never logged in**
man                                        **Never logged in**
lp                                         **Never logged in**
mail                                       **Never logged in**
news                                       **Never logged in**
uucp                                       **Never logged in**
proxy                                      **Never logged in**
</pre></div>

<h3 id="toc_2">3. Check &ldquo;/var/log/auth.log&rdquo;</h3>
<div class="highlight"><pre><span class="nv">$ </span>sudo less /var/log/auth.log
...
Jun 27 21:35:01 iZ940ou5p7nZ CRON<span class="o">[</span>14089<span class="o">]</span>: pam_unix<span class="o">(</span>cron:session<span class="o">)</span>: session closed <span class="k">for </span>user root
Jun 27 21:42:55 iZ940ou5p7nZ sshd<span class="o">[</span>14108<span class="o">]</span>: Accepted password <span class="k">for </span>terryoy from 58.251.197.153 port 62430 ssh2
Jun 27 21:42:55 iZ940ou5p7nZ sshd<span class="o">[</span>14108<span class="o">]</span>: pam_unix<span class="o">(</span>sshd:session<span class="o">)</span>: session opened <span class="k">for </span>user terryoy by <span class="o">(</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">)</span>
Jun 27 21:45:01 iZ940ou5p7nZ CRON<span class="o">[</span>14187<span class="o">]</span>: pam_unix<span class="o">(</span>cron:session<span class="o">)</span>: session opened <span class="k">for </span>user root by <span class="o">(</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">)</span>
Jun 27 21:45:01 iZ940ou5p7nZ CRON<span class="o">[</span>14187<span class="o">]</span>: pam_unix<span class="o">(</span>cron:session<span class="o">)</span>: session closed <span class="k">for </span>user root
Jun 27 21:53:30 iZ940ou5p7nZ sudo:  terryoy : <span class="nv">TTY</span><span class="o">=</span>pts/0 ; <span class="nv">PWD</span><span class="o">=</span>/home/terryoy ; <span class="nv">USER</span><span class="o">=</span>root ; <span class="nv">COMMAND</span><span class="o">=</span>/usr/bin/apt-get install acct
Jun 27 21:53:30 iZ940ou5p7nZ sudo: pam_unix<span class="o">(</span>sudo:session<span class="o">)</span>: session opened <span class="k">for </span>user root by terryoy<span class="o">(</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">)</span>
Jun 27 21:53:39 iZ940ou5p7nZ sudo: pam_unix<span class="o">(</span>sudo:session<span class="o">)</span>: session closed <span class="k">for </span>user root
...
</pre></div>

<h3 id="toc_3">4. Use &ldquo;acct&rdquo; for system accounting</h3>
<p>The &ldquo;acct&rdquo; package is a set of utilities for system accounting. </p>

<pre><code>* ac, print stats about user's connect time
* accton, turn process accounting on or off
* last, listing of last logged in users
* lastcomm, print info about previous executed commands
* sa, summarize accounting info
* dump-utmp, print an utmp file in human readable format
* dump-acct, print an acct file in human readable format</code></pre>
<div class="highlight"><pre><span class="c"># list user&#39;s login session time by date</span>
<span class="nv">$ </span>ac -p -d

<span class="c"># display user&#39;s last commands</span>
<span class="nv">$ </span>lastcomm &lt;user_name&gt;
</pre></div>

<h3 id="toc_4">Reference to secure ubuntu server</h3>
<p><a href="https://www.ftmon.org/blog/secure-ubuntu-server/">www.ftmon.org/blog/secure-ubuntu-server/</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Create a Root CA and Self-Sign Certificate for SSL]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/02/create-ssl-ca-root-and-self-sign.html"/>
        <published>2015-02-23T11:03:00+08:00</published>
        <updated>2017-04-27T16:20:42+08:00</updated>
        <id>http://terryoy.github.io/2015/02/create-ssl-ca-root-and-self-sign.html</id>
        <category scheme="http://terryoy.github.io/tag/#server" term="server" label="server" />
        <category scheme="http://terryoy.github.io/tag/#security" term="security" label="security" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Concepts</h3>
<p>Nowadays we often have HTTPS protected web access scenario, however it&#39;s expensive to purchase a certificates from authority if you&#39;re just running a small site. So it&#39;s better to create your own certificates and use your own SSL protection.</p>
<p>The steps can be roughly described as below:</p>

<pre><code>1. Create a private key (as Root CA Key), keep this very private
2. Self-sign a root certificate
3. Install root CA on your various workstations
4. Create a CSR(Certificate Signing Request) for each of your authorized needed circumstances(device, server, client, etc.)
5. Sign CA with root CA Key</code></pre>

<h3 id="toc_1">2. Generate Root CA(Certificate Authority)</h3>
<p>The first part is to create a private key and the CA, which will be used as the root CA to sign certificates.</p>
<div class="highlight"><pre><span class="c">## Step 1: Create a private key</span>

<span class="c"># generate a private root key</span>
<span class="nv">$ </span>openssl genrsa -out rootCA.key 2048
<span class="c"># (or) generate a private root key with passphrase protection; and if you forgot the password, you need to do everything again</span>
<span class="nv">$ </span>openssl genrsa -out rootCA.key 2048 -des3


<span class="c">## Step 2: Self-sign a certificate</span>

<span class="nv">$ </span>openssl req -x509 -new -nodes -key rootCA.key -days 3650 -out rootCA.pem
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter <span class="s1">&#39;.&#39;</span>, the field will be left blank.
-----
Country Name <span class="o">(</span>2 letter code<span class="o">)</span> <span class="o">[</span>AU<span class="o">]</span>:CN
State or Province Name <span class="o">(</span>full name<span class="o">)</span> <span class="o">[</span>Some-State<span class="o">]</span>:Guangdong
Locality Name <span class="o">(</span>eg, city<span class="o">)</span> <span class="o">[]</span>:Shenzhen
Organization Name <span class="o">(</span>eg, company<span class="o">)</span> <span class="o">[</span>Internet Widgits Pty Ltd<span class="o">]</span>:TeaTime Production.
Organizational Unit Name <span class="o">(</span>eg, section<span class="o">)</span> <span class="o">[]</span>:IT   
Common Name <span class="o">(</span>e.g. server FQDN or YOUR name<span class="o">)</span> <span class="o">[]</span>:Terry Ouyang    
Email Address <span class="o">[]</span>:terry.ouyang@gmail.com
</pre></div>
<p>Now we have a private root key(rootCA.key), and a root CA(rootCA.pem). If you want all the clients/PC/browsers accept your authorized certificate, you need to put your root CA in their local trusted stores(e.g. OS&#39;s trusted certificates repositories).</p>

<h3 id="toc_2">3. Create Certificates and Sign with Root CA</h3>
<p>For every device you want to authorize, you need to create their own private key, then complete the signed certificate with a certificate signing request(CSR).</p>
<div class="highlight"><pre><span class="c">## Step 1: Create the private key</span>

<span class="nv">$ </span>openssl genrsa -out device.key 2048

<span class="c">## Step 2: Create the CSR (In this step you must set &quot;Common Name&quot; to your desire host if you&#39;re planning to use it as a server&#39;s certificate)</span>

<span class="nv">$ </span>openssl req -new -key device.key -out device.csr
...
Common Name <span class="o">(</span>e.g. server FQDN or YOUR name<span class="o">)</span> <span class="o">[]</span>:terryoy.github.io
...

<span class="c">## Step 3: Create the signed certificate </span>

<span class="nv">$ </span>openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 3650
</pre></div>
<p>Now you have the certificate private key(device.key) and the self CA signed certificate(device.crt). You can now use them for SSL communications.</p>

<h3 id="toc_3">4. Congifuration for Nginx</h3>
<p>Below is an example of enabling the SSL function for the service configuration.</p>
<div class="highlight"><pre>server <span class="o">{</span>
    listen 443;
    ssl on;
    ssl_certificate /etc/nginx/ssl/service.crt;
    ssl_certificate_key /etc/nginx/ssl/service.key;

    ...
<span class="o">}</span>
</pre></div>
<p>You can also check your server&#39;s certificate by the command below:</p>
<div class="highlight"><pre><span class="nv">$ </span>openssl s_client -connect www.yourexample.com:443
</pre></div>

<h3 id="toc_4">5. Setup SSL Factory on Android App</h3>
<p>There is a good reference on <a href="http://stackoverflow.com/a/6378872">stackoverflow.com</a> for this problem.</p>
<p>If you&#39;re using cocos2d-x 3.3+, it supports that you set a certificate for the HttpClient(globally), which allows you use your own certificate for SSL verification.</p>
<div class="highlight"><pre><span class="k">auto</span> <span class="n">path</span> <span class="o">=</span> <span class="n">FileUtils</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">fullPathForFilename</span><span class="p">(</span><span class="s">&quot;my_cacert.pem&quot;</span><span class="p">);</span>
<span class="n">HttpClient</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">setSSLVerification</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
</pre></div>

<h3 id="toc_5">6. ACME Client</h3>
<p><em>Update@2017: now you can use ACME clients and some free certificate service for personal HTTPS web sites.</em></p>
<p>AMCE is short for Automatic Certificate Management Environment, which requires you to run a client on your server to provide checking of the ownership of your server and domain name, and provide signed certificates based on the result.</p>
<p>Check out more information for the Free SSL/TLS Certificates: <a href="https://letsencrypt.org">letsencrypt.org</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[PostgesSQL 9 Administration QuickRef(2) - Managing Database]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/02/postgresql-admin-quickref-part2-initiating-database.html"/>
        <published>2015-02-21T16:40:00+08:00</published>
        <updated>2017-03-26T17:21:53+08:00</updated>
        <id>http://terryoy.github.io/2015/02/postgresql-admin-quickref-part2-initiating-database.html</id>
        <category scheme="http://terryoy.github.io/tag/#postgresql" term="postgresql" label="postgresql" />
        <category scheme="http://terryoy.github.io/tag/#database" term="database" label="database" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Creating a Database</h3>
<p>It&#39;s a common task to create a database and assign an access user for it. This can be done by command line or by psql queries.</p>
<div class="highlight"><pre><span class="c"># by command line</span>
<span class="nv">$ </span>su postgres
<span class="nv">$ </span>createuser -D -A -P myuser
<span class="nv">$ </span>createdb -O myuser mydb

<span class="c"># (or) a longer version for the createdb command</span>
<span class="nv">$ </span>createdb -h localhost -p 5432 -U postgres -O myuser -E UTF8 mydb
</pre></div>
<div class="highlight"><pre><span class="c1">--create database by psql client </span>
<span class="gp">postgres=#</span> <span class="k">CREATE</span> <span class="k">USER</span> <span class="n">myuser</span> <span class="k">WITH</span> <span class="k">PASSWORD</span> <span class="s1">&#39;my_password&#39;</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">mydb</span> <span class="k">WITH</span> <span class="k">OWNER</span> <span class="n">myuser</span> <span class="k">ENCODING</span> <span class="s1">&#39;UTF8&#39;</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">GRANT</span> <span class="k">ALL</span> <span class="k">PRIVILEGES</span> <span class="k">ON</span> <span class="k">DATABASE</span> <span class="s-Name">&quot;mydb&quot;</span> <span class="k">to</span> <span class="n">myuser</span><span class="p">;</span>
</pre></div>

<h3 id="toc_1">2. Configuring Connection Method</h3>
<p>Peer authentication uses system&#39;s user accounts for authentication, while MD5 authentication uses password authentication encrypted in md5.</p>
<p>Restart Postgresql service after configuration file is changed.</p>
<div class="highlight"><pre><span class="c"># Edit the file for the database access method</span>
<span class="nv">$ </span>sudo vi /etc/postgresql/9.1/main/pg_hba.conf

<span class="c"># Database administrative login by Unix domain socket</span>
<span class="nb">local   </span>all             postgres                                peer

<span class="c"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span>

<span class="c"># &quot;local&quot; is for Unix domain socket connections only</span>
<span class="nb">local   </span>all             all                                     peer
<span class="c"># IPv4 local connections:</span>
host    all             all             127.0.0.1/32            md5
<span class="c"># IPv6 local connections:</span>
host    all             all             ::1/128                 md5
<span class="c"># Allow replication connections from localhost, by a user with the</span>
<span class="c"># replication privilege.</span>
<span class="c">#local   replication     postgres                                peer</span>
<span class="c">#host    replication     postgres        127.0.0.1/32            md5</span>
<span class="c">#host    replication     postgres        ::1/128                 md5</span>


<span class="nv">$ </span>sudo service postgresql restart
</pre></div>

<h3 id="toc_2">3. Migrating Data</h3>
<p>When migrating database, usually we use migrate files with SQL and CSV format. Since SQL scripts are probably not compatible with different database provider(e.g. postgresql vs mysql), sometimes it&#39;s easier to parse data with CSV format, while SQL files are convenient to dump and import schemas between postgresql databases.</p>

<h4 id="toc_3">3.1 Export data to CSV files</h4>
<p>Note: the <code>=#</code> prefix is the prompt of <code>psql</code> command line tools.</p>
<div class="highlight"><pre><span class="c1">--Export all records from table to CSV file</span>
<span class="o">=#</span> <span class="err">\</span><span class="k">copy</span> <span class="n">my_table</span> <span class="k">to</span> <span class="s1">&#39;/path/to/table.csv&#39;</span> <span class="n">csv</span> <span class="n">header</span><span class="p">;</span>
<span class="c1">--OR</span>
<span class="o">=#</span> <span class="k">COPY</span> <span class="n">my_table</span> <span class="k">TO</span> <span class="s1">&#39;/path/to/table.csv&#39;</span> <span class="k">DELIMITER</span> <span class="s1">&#39;,&#39;</span> <span class="n">CSV</span> <span class="n">HEADER</span><span class="p">;</span>

<span class="c1">--Export a custom mquery to csv</span>
<span class="o">=#</span> <span class="k">COPY</span> <span class="p">(</span><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="k">public</span><span class="p">.</span><span class="k">user</span><span class="p">)</span> <span class="k">TO</span> <span class="s1">&#39;/path/to/user.csv&#39;</span> <span class="n">CSV</span> <span class="n">HEADER</span><span class="p">;</span>
</pre></div>

<h3 id="toc_4">3.2 Export schema and data to SQL files</h3>
<p>We&#39;ll use <code>pg_dump</code> to create postgresql export files.</p>
<div class="highlight"><pre><span class="c"># sometimes you need to specify which database version to use, due to the version mismatch of pg_dump program</span>
<span class="nv">$ </span>pg_dump --cluster 9.3/main &lt;...other stuffs&gt;


<span class="c"># export schema with &quot;-s&quot; or &quot;--schema-only&quot;</span>
<span class="nv">$ </span>pg_dump -s &lt;db_name&gt; &gt; export_schhema.sql
<span class="nv">$ </span>pg_dump --schema-only &lt;db_name&gt; &gt; export_schema.sql


<span class="c"># export data</span>
<span class="nv">$ </span>pg_dump -a &lt;db_name&gt; &gt; export_data.sql
<span class="nv">$ </span>pg_dump --data-only &lt;db_name&gt; &gt; export_data.sql
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[PostgesSQL 9 Administration QuickRef(1) - Exploring Database]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/03/postgresql-admin-quickref-part1-exploring-database.html"/>
        <published>2014-03-06T15:27:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2014/03/postgresql-admin-quickref-part1-exploring-database.html</id>
        <category scheme="http://terryoy.github.io/tag/#postgresql" term="postgresql" label="postgresql" />
        <category scheme="http://terryoy.github.io/tag/#database" term="database" label="database" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>The most cheat sheets or quick references I found are organized by knowledge domains, but I would rather like a quick reference organized by tasks. Thus I make this reference.</p>

<h1 id="toc_0">Part I: Exploring Database</h1>

<h3 id="toc_1">1. Basic Information</h3>
<p>Default location of data files (in debian/ubuntu): <code>/var/lib/postgresql/9.1/main/</code>
Data files for an instance:
    base        -   data directory for databases 
    global      -   database catalog tables(shared across databases)
    pg_clog - transaction status files
    pg_multixact    -   row-level lock status files
    pg_subtrans -   subtransaction status files 
    pg_tblspc       -   links to external tablespaces
    pg_twophase -   prepared transaction status
    pg_xlog     -   WAL(Write-Ahead Log) transaction log
Log files: <code>/var/log/postgresql/</code></p>
<p>PostgreSQL command line programs:</p>
<div class="highlight"><pre><span class="c"># check psql version</span>
<span class="nv">$ </span>psql --version
<span class="c"># check configuration variables</span>
<span class="nv">$ </span>pg_config
<span class="c"># run a single command</span>
<span class="nv">$ </span>psql -c <span class="s2">&quot;\d&quot;</span>
</pre></div>
<p>PSQL text client:</p>
<div class="highlight"><pre><span class="c1">-- line comment</span>
<span class="o">/</span> <span class="o">*</span><span class="n">multi</span><span class="o">-</span><span class="nb">line</span> <span class="k">comment</span><span class="o">*</span> <span class="o">/</span>
<span class="c1">-- check server version</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="k">version</span><span class="p">();</span>
<span class="go">-- output query result as one column per line</span>
<span class="gp">postgres=#</span> <span class="kp">\x</span>
</pre></div>

<h3 id="toc_2">2. Server Stats</h3>
<div class="highlight"><pre><span class="c"># list databases</span>
<span class="nv">$ </span>psql -l
<span class="c"># list tables in a database</span>
<span class="nv">$ </span>psql -c <span class="s2">&quot;\d&quot;</span> -d somedb
</pre></div>
<div class="highlight"><pre><span class="c1">-- check server uptime</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">date_trunc</span><span class="p">(</span><span class="s1">&#39;second&#39;</span><span class="p">,</span> <span class="k">current_timestamp</span> <span class="o">-</span> <span class="n">pg_postmaster_start_time</span><span class="p">())</span> <span class="k">as</span> <span class="n">uptime</span><span class="p">;</span>

<span class="go">-- list database names</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">datname</span> <span class="k">from</span> <span class="n">pg_database</span><span class="p">;</span>
<span class="go">-- list tables in databases;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">table_catalog</span><span class="p">,</span> <span class="n">table_schema</span><span class="p">,</span> <span class="n">table_name</span><span class="p">,</span> <span class="n">table_type</span> <span class="k">from</span> <span class="n">information_schema</span><span class="mf">.</span><span class="k">tables</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="kp">\dt+</span>

<span class="go">-- check database size</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_database_size</span><span class="p">(</span><span class="s1">&#39;somedb&#39;</span><span class="p">);</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_database_size</span><span class="p">(</span><span class="n">current_database</span><span class="p">());</span>
<span class="go">-- check table size</span>
<span class="gp">postgres=#</span> <span class="kp">\dt+</span> <span class="ss">some_table</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_relation_size</span><span class="p">(</span><span class="s1">&#39;some_table&#39;</span><span class="p">);</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_total_relation_size</span><span class="p">(</span><span class="s1">&#39;some_table&#39;</span><span class="p">);</span> <span class="c1">-- including indexes and other related space</span>
<span class="go">-- list table sizes in order</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">table_name</span><span class="p">,</span> <span class="n">pg_total_relation_size</span><span class="p">(</span><span class="n">table_name</span><span class="p">)</span> <span class="k">as</span> <span class="n">size</span>
<span class="k">FROM</span> <span class="n">information_schema</span><span class="mf">.</span><span class="k">tables</span> <span class="k">NOT</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;information_schema&#39;</span><span class="p">,</span> <span class="s1">&#39;pg_catalog&#39;</span><span class="p">)</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">size</span> <span class="k">DESC</span><span class="p">;</span>

<span class="go">-- check online users/clients</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span>  <span class="k">from</span> <span class="n">pg_stat_activity</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">datname</span><span class="p">,</span> <span class="n">usename</span><span class="p">,</span> <span class="n">client_addr</span><span class="p">,</span> <span class="n">client_port</span> <span class="k">FROM</span> <span class="n">pg_stat_activity</span><span class="p">;</span>

<span class="go">-- track user activities(like check user&#39;s pending query)</span>
<span class="gp">postgres=#</span> <span class="k">SET</span> <span class="n">track_activities</span> <span class="o">=</span> <span class="k">on</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">datname</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">current_query</span> 
<span class="k">FROM</span> <span class="n">pg_stat_activity</span> 
<span class="k">WHERE</span> <span class="n">current_query</span> <span class="o">!=</span> <span class="s1">&#39;&lt;IDLE&gt;&#39;</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="k">current_timestamp</span> <span class="o">-</span> <span class="n">query_start</span> <span class="k">as</span> <span class="n">runtime</span><span class="p">,</span> <span class="n">datname</span><span class="p">,</span> <span class="n">usename</span><span class="p">,</span> <span class="n">current_query</span> 
<span class="k">FROM</span> <span class="n">pg_stat_activity</span>
<span class="k">WHERE</span> <span class="n">current_query</span> <span class="o">!=</span> <span class="s1">&#39;&lt;IDLE&gt;&#39;</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="mf">1</span> <span class="k">DESC</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">datname</span><span class="p">,</span> <span class="n">usename</span><span class="p">,</span> <span class="n">current_query</span>
<span class="k">FROM</span> <span class="n">pg_stat_activity</span>
<span class="k">WHERE</span> <span class="n">waiting</span><span class="p">;</span>

<span class="go">-- check who is blocking the queries</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> 
    <span class="n">w</span><span class="mf">.</span><span class="n">current_query</span> <span class="k">as</span> <span class="n">waiting_query</span><span class="p">,</span>
    <span class="n">w</span><span class="mf">.</span><span class="n">procpid</span> <span class="k">as</span> <span class="n">w_pid</span><span class="p">,</span>
    <span class="n">w</span><span class="mf">.</span><span class="n">usename</span> <span class="k">as</span> <span class="n">w_user</span><span class="p">,</span>
    <span class="n">l</span><span class="mf">.</span><span class="n">current_query</span> <span class="k">as</span> <span class="n">locking_query</span><span class="p">,</span>
    <span class="n">l</span><span class="mf">.</span><span class="n">procpid</span> <span class="k">as</span> <span class="n">l_pid</span><span class="p">,</span>
    <span class="n">l</span><span class="mf">.</span><span class="n">usename</span> <span class="k">as</span> <span class="n">l_user</span><span class="p">,</span>
    <span class="n">t</span><span class="mf">.</span><span class="n">schemaname</span> <span class="o">||</span> <span class="s1">&#39;-&#39;</span> <span class="o">||</span> <span class="n">t</span><span class="mf">.</span><span class="n">relname</span> <span class="k">as</span> <span class="n">tablename</span>
<span class="k">FROM</span> <span class="n">pg_stat_activity</span> <span class="n">w</span>
<span class="k">JOIN</span> <span class="n">pg_locks</span> <span class="n">l1</span> <span class="k">ON</span> <span class="n">w</span><span class="mf">.</span><span class="n">procpid</span> <span class="o">=</span> <span class="n">l1</span><span class="mf">.</span><span class="n">pid</span> <span class="k">AND</span> <span class="k">NOT</span> <span class="n">l1</span><span class="mf">.</span><span class="k">granted</span>
<span class="k">JOIN</span> <span class="n">pg_locks</span> <span class="n">l2</span> <span class="k">ON</span> <span class="n">l1</span><span class="mf">.</span><span class="n">relation</span> <span class="o">=</span> <span class="n">l2</span><span class="mf">.</span><span class="n">relation</span> <span class="k">AND</span> <span class="n">l2</span><span class="mf">.</span><span class="k">granted</span>
<span class="k">JOIN</span> <span class="n">pg_stat_activity</span> <span class="n">l</span> <span class="k">on</span> <span class="n">l2</span><span class="mf">.</span><span class="n">pid</span> <span class="o">=</span> <span class="n">l</span><span class="mf">.</span><span class="n">procpid</span>
<span class="k">JOIN</span> <span class="n">pg_stat_user_tables</span> <span class="n">t</span> <span class="k">ON</span> <span class="n">l1</span><span class="mf">.</span><span class="n">relation</span> <span class="o">=</span> <span class="n">t</span><span class="mf">.</span><span class="n">relid</span>
<span class="k">WHERE</span> <span class="n">w</span><span class="mf">.</span><span class="n">waiting</span><span class="p">;</span>

<span class="go">-- cancel a query</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_cancel_backend</span><span class="p">(</span><span class="n">some_processid</span><span class="p">);</span>
<span class="go">-- killing a session</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_terminate_backend</span><span class="p">(</span><span class="n">some_processid</span><span class="p">);</span>
<span class="go">-- killing &quot;idle in transaction&quot;(e.g. leaving without ending the transaction) sessions</span>
<span class="go">-- (ps, you can schedule this script to be running every minute)</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_terminate_backend</span><span class="p">(</span><span class="n">procpid</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">pg_stat_activity</span>
<span class="k">WHERE</span> <span class="n">current_query</span> <span class="o">=</span> <span class="s1">&#39;&lt;IDLE&gt; in transaction&#39;</span>
    <span class="k">and</span> <span class="k">current_timestamp</span> <span class="o">-</span> <span class="n">query_start</span> <span class="o">&gt;</span> <span class="s1">&#39;10 min&#39;</span><span class="p">;</span>

<span class="go">-- collecting daily usage statistics</span>
<span class="gp">postgres=#</span> <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">backup_stat_user_tables</span> <span class="k">as</span> 
<span class="k">SELECT</span> <span class="k">current_timestamp</span> <span class="k">as</span> <span class="n">snaptime</span><span class="p">,</span>
<span class="k">FROM</span> <span class="n">pg_stat_user_tables</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">backup_stat_user_tablese</span>
<span class="k">SELECT</span>
</pre></div>

<h3 id="toc_3">3. Schema and Table</h3>
<div class="highlight"><pre><span class="c1">-- Show definition of a table(including References to this table)</span>
<span class="gp">postgres=#</span> <span class="kp">\d+</span> <span class="ss">some_table</span>
</pre></div>
<p>(to be continue)</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Setup SSH Identity Key Login in Linux]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/01/ssh-key-based-auth-server.html"/>
        <published>2014-01-08T15:40:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2014/01/ssh-key-based-auth-server.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#shell" term="shell" label="shell" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>This example is about how to create a new user and enable SSH public-key authentication in Ubuntu Server. It is necessary if your server is open to the public on internet.</p>

<h2 id="toc_0">1. Create a New User on Server</h2>
<p>In a traditional way, people use the command &ldquo;useradd&rdquo; to create user account, then together with other commands to setup the group, the home folder for the user.</p>
<div class="highlight"><pre><span class="nv">$ </span>useradd terry
<span class="nv">$ </span>passwd terry
<span class="nv">$ </span>mkdir /home/terry
<span class="nv">$ </span>chown -R terry:users /home/terry
</pre></div>
<p>In a debian way, there is one command which does it all: &ldquo;adduser&rdquo;.</p>
<div class="highlight"><pre><span class="nv">$ </span>adduser edmund
Adding user <span class="s1">&#39;edmund&#39;</span> ...
Adding new group <span class="s1">&#39;edmund&#39;</span> <span class="o">(</span>1001<span class="o">)</span> ...
Adding new user <span class="s1">&#39;edmund&#39;</span> <span class="o">(</span>1001<span class="o">)</span> with group <span class="s1">&#39;edmund&#39;</span> ...
Creating home directory <span class="s1">&#39;/home/edmund&#39;</span> ...
Copying files from <span class="s1">&#39;/etc/skel&#39;</span> ...
Enter new UNIX password: 
Retype new UNIX password: 
passwd: password updated successfully
Changing the user information <span class="k">for </span>edmund
Enter the new value, or press ENTER <span class="k">for </span>the default
    Full Name <span class="o">[]</span>: 
    Room Number <span class="o">[]</span>: 
    Work Phone <span class="o">[]</span>: 
    Home Phone <span class="o">[]</span>: 
    Other <span class="o">[]</span>: 
Is the information correct? <span class="o">[</span>Y/n<span class="o">]</span>
</pre></div>

<h2 id="toc_1">2. Generate SSH Key and Apply to Server</h2>
<p>With SSH key login, user require a public/private key pairs to authenticate the login. SSH can use both &ldquo;RSA&rdquo; and &ldquo;DSA&rdquo; keys, however according to the <a href="https://help.ubuntu.com/community/SSH/OpenSSH/Keys#Key-Based_SSH_Logins">ubuntu guide</a>, &ldquo;RSA&rdquo; is the only recommended choice for new keys. </p>
<p>First thing you should keep in mind, the private key should <strong>NOT</strong> allow to be accessed by anybody else(e.g. set &ldquo;700&rdquo; with chmod). We will create the RSA keys in your <strong>local</strong> machine, then copy the public key to the <strong>remote</strong> server.</p>
<div class="highlight"><pre><span class="nv">$ </span>mkdir ~/.ssh
<span class="nv">$ </span>chmod 700 ~/.ssh      <span class="c"># set access right only to user self</span>
<span class="nv">$ </span>ssh-keygen -t rsa     <span class="c"># **or you could use &quot;ssh-keygen -t rsa -b 4096&quot; for more secure login, default is 2048**.</span>
Generating public/private rsa key pair.
Enter file in which to save the key <span class="o">(</span>/home/edmund/.ssh/id_rsa<span class="o">)</span>: 
Enter passphrase <span class="o">(</span>empty <span class="k">for </span>no passphrase<span class="o">)</span>: 
Enter same passphrase again: 
Your identification has been saved in /home/edmund/.ssh/id_rsa.
Your public key has been saved in /home/edmund/.ssh/id_rsa.pub.

<span class="c"># next copy the public key to server. you can use a one-command way or manually copy the key to server.</span>
<span class="nv">$ </span>ssh-copy-id user@machine      <span class="c"># one-command way</span>
<span class="c"># manually way: copy the public key to server, and add it to authorized_key</span>
<span class="nv">$ </span>scp ~/.ssh/id_rsa.pub user@machine:~/.ssh/my_rsa.pub
<span class="nv">$ </span>ssh user@machine
<span class="nv">$ </span><span class="nb">cd</span> ~/.ssh
<span class="nv">$ </span>cat my_rsa.pub &gt;&gt; authorized_keys
</pre></div>

<h2 id="toc_2">3. Update SSH Daemon configuration on Server</h2>
<p>On the remote machine, currently the password authentication is still enabled, so we need to enable the RSA Authentication and disable the Password Authentication for the better security.</p>
<p>Open <strong>/etc/ssh/sshd_config</strong> on server, find(or add) the below items and set the values:
<code>
PubkeyAuthentication yes
RSAAuthentication yes
PasswordAuthentication no
</code>
Next restart ssh service: <code>$ sudo service ssh restart</code>
Now try login in the local machine:
<code>
$ ssh user@machine  # Or,
$ ssh -i id_rsa user@machine
</code>
If your key matches, you will directly go into the console shell, or else you will get the following error info, which means you configuration applied successfully.
<code>
Permission denied (publickey).
</code>
If you want to revoke an authorized key for some user, you can find the user&#39;s public key in <strong>&ldquo;~/.ssh/authorized_keys&rdquo;</strong> and remove it.</p>

<hr/>

<h4 id="toc_3"><em>Extra Bonus: below is a small trick to use the keys to encrypt/decrypt text for daily use.</em></h4>
<div class="highlight"><pre><span class="c"># encrypt a text file, and output to a file</span>
<span class="nv">$ </span>openssl enc -aes-256-cbc -e -in textfile.txt -out encrypted.txt -pass pass:some_password
<span class="c"># decrypt a text file, and output to a file(else it will print to the console)</span>
<span class="nv">$ </span>openssl enc -aes-256-cbc -d -in encrypted.txt -out textfile.txt -pass pass:some_password

<span class="c"># encode in base64 (the &quot;enc&quot; option let you specify a cipher, e.g. &quot;-base64&quot; here)</span>
<span class="nv">$ </span>openssl enc -base64 -e -in tetfile.txt
<span class="nv">$ </span>openssl enc -base64 -e <span class="o">&lt;&lt;&lt;</span> <span class="s2">&quot;Encode this text please&quot;</span>
<span class="nv">$ </span>openssl base64 -e <span class="o">&lt;&lt;&lt;</span> <span class="s2">&quot;Encode this text please&quot;</span>
<span class="c"># decode in base64</span>
<span class="nv">$ </span>openssl base64 -d <span class="o">&lt;&lt;&lt;</span> <span class="s2">&quot;RW5jb2RlIHRoaXMgdGV4dCBwbGVhc2UK&quot;</span>
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Archive Commands in Linux]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/01/archive-commands-in-linux.html"/>
        <published>2014-01-07T19:13:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2014/01/archive-commands-in-linux.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#shell" term="shell" label="shell" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Below is a collection of commands compressing and uncompressing various file formats.  </p>
<div class="highlight"><pre><span class="c">#### compress ####</span>
<span class="nv">$ </span>tar -cvf output.tar <span class="nb">test</span>-files
<span class="nv">$ </span>gzip output.tar       <span class="c"># result file &quot;output.tar.gz&quot;</span>
<span class="nv">$ </span>tar -cvzf output.tar.gz <span class="nb">test</span>-files        <span class="c"># combined with the two above</span>
<span class="nv">$ </span>bzip2 output.tar      <span class="c"># result file &quot;output.tar.bz2&quot;</span>
<span class="nv">$ </span>tar -cvjf output.tar.bz2 <span class="nb">test</span>-files
<span class="c"># other formats (zip, gz, rar, 7z, ...)</span>
<span class="nv">$ </span>zip -r archive.zip <span class="nb">test</span>-files
<span class="nv">$ </span>star -cv <span class="nv">f</span><span class="o">=</span>output.star <span class="nb">test</span>-files
<span class="nv">$ </span>find <span class="nb">test</span>-dir | cpio -ov &gt; output.cpio
<span class="nv">$ </span>7z a archive.7z <span class="nb">test</span>-files    <span class="c"># the package name for 7z is &quot;p7zip&quot;</span>

<span class="c">####  list files in the archive ####</span>
<span class="nv">$ </span>tar -tvf file.tar
<span class="nv">$ </span>star -tv <span class="nv">f</span><span class="o">=</span>file.tar
<span class="nv">$ </span>unzip -l file.zip
<span class="nv">$ </span>cpio -t &lt; file.cpio
<span class="nv">$ </span>7z l file.7z

<span class="c">#### uncompress ####</span>
<span class="c"># tar</span>
<span class="nv">$ </span>tar xvf file.tar
<span class="nv">$ </span>tar xvzf file.tar.gz
<span class="nv">$ </span>tar xvzf file.tar.tgz
<span class="nv">$ </span>tar xvjf file.tar.bz2
<span class="nv">$ </span>tar xvjf file.tar.tbz2
<span class="c"># other formats </span>
<span class="nv">$ </span>gunzip file.**gz**    
<span class="nv">$ </span>bunzip2 file.**bz2**
<span class="nv">$ </span>uncompress file.**Z**
<span class="nv">$ </span>unzip file.zip
<span class="nv">$ </span>unrar x file.rar      <span class="c"># or &quot;$ rar x file.rar&quot;</span>
<span class="nv">$ </span>7z x file.**7z        <span class="c"># or &quot;$ 7z e file.7z**&quot;</span>
<span class="nv">$ </span>star -xv <span class="nv">f</span><span class="o">=</span>archive.star 
<span class="nv">$ </span>cpio -idmv &lt; archive.cpio
<span class="nv">$ </span>unace x file.ace
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Simple Examples of &quot;yield&quot; in Python]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/12/python_yield.html"/>
        <published>2013-12-23T23:43:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2013/12/python_yield.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>The keyword &ldquo;yield&rdquo; in python is somewhat confusing when writing a single thread program, because it output or input a value somewhere inside the function, but you cannot tell how it does easily. So now I demonstrate two basic usages of &ldquo;yield&rdquo;, which you could consider as two patterns.</p>

<h2 id="toc_0">1. Generators</h2>
<p>All functions using &ldquo;yield&rdquo; can be called <em><strong>generators</strong></em>. When using as a generator, it outputs(returns) a value somewhere inside the function, and pause at this step until it gets the next chance of execution.</p>
<p>The general structure of a function that uses &ldquo;yield&rdquo; will be like this:</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">countdown</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="c"># **the settup part**</span>
    <span class="k">print</span> <span class="s">&quot;Do something here&quot;</span>

    <span class="c"># **the loop part**</span>
    <span class="k">while</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">n</span> <span class="c"># return a value to the call of &quot;next()&quot; function, and then wait for the next loop</span>
        <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
</pre></div>
<p>The execution in an interactive python environment is like this:</p>

<pre><code>&gt;&gt;&gt; c = countdown(10)
&gt;&gt;&gt; c.next()
Do something here
10
&gt;&gt;&gt; c.next()
9
&gt;&gt;&gt; 
...
&gt;&gt;&gt; c.next()
1
&gt;&gt;&gt; c.next()
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  StopIteration</code></pre>
<p>When the first trigger of the &ldquo;next()&rdquo; method, the instance &ldquo;c&rdquo; exectue the setup code and runs into the loop. When &ldquo;n&rdquo; is yield in the loop, the &ldquo;next()&rdquo; method gets its returning value and printed on the screen. In the next trigger of &ldquo;next()&rdquo;, it continues the loop so you don&#39;t see the setup part again. When the last value is yield, the while loop will end. So if &ldquo;next()&rdquo; method is called again, it gets a StopIteration error raised. </p>
<p>If you want to iterate the items generated by this generator, you don&#39;t need to catch the StopIteration, you could just use it also like iterating a list.</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">countdown</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">c</span><span class="p">]</span>
<span class="n">Do</span> <span class="n">something</span> <span class="n">here</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">items</span>
<span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</pre></div>

<h2 id="toc_1">2. Coroutines</h2>
<p>The example of generators is using &ldquo;yield&rdquo; like an output operation, while <em><strong>Coroutines</strong></em> use it like an input operation. Check out the below code:</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">accumulator</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="c"># don&#39;t forget to execute &quot;next()&quot; to run the setup part first</span>
    <span class="nb">sum</span> <span class="o">=</span> <span class="n">n</span> 
    <span class="k">print</span> <span class="s">&quot;init value:&quot;</span><span class="p">,</span> <span class="n">n</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span><span class="p">)</span> <span class="c"># gets a value from the method &quot;send()&quot;</span>
        <span class="nb">sum</span> <span class="o">+=</span> <span class="n">value</span>
        <span class="k">print</span> <span class="nb">sum</span> <span class="c"># now you don&#39;t use &quot;yield&quot; to return value because you want </span>
                  <span class="c"># to print out the value when &quot;send()&quot; is called, rather than to call &quot;next()&quot; again</span>
</pre></div>
<p>Execution:</p>

<pre><code>&gt;&gt;&gt; a = accumulator(0)
&gt;&gt;&gt; a.next()
init value:0
&gt;&gt;&gt; a.send(5)
5
&gt;&gt;&gt; a.send(5)
10</code></pre>
<p>In this example, you need to call &ldquo;next()&rdquo; first so that it could run to the first appearance of &ldquo;yield&rdquo;. Then, it will pause until you call &ldquo;send()&rdquo; method to input a number, so the loop continues and prints out the summarized value, and also pauses at &ldquo;yield&rdquo; in the next loop, and so on. </p>
<p>So when using &ldquo;yield&rdquo; function as coroutines, you could imagine it as a task waiting for your input, you just send the parameters to it and it will fulfill the task for you.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Python Main Args, Config, and Exception Snippets]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/12/python_main_args.html"/>
        <published>2013-12-21T15:35:00+08:00</published>
        <updated>2016-01-03T21:36:38+08:00</updated>
        <id>http://terryoy.github.io/2013/12/python_main_args.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Part 1. Below is an example showing how to use <strong>arguments</strong> in a python script. It&#39;s taken from this <a href="http://www.tutorialspoint.com/python/python_command_line_arguments.htm">example</a>.</p>
<div class="highlight"><pre><span class="c">#!/usr/bin/python</span>

<span class="kn">import</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">getopt</span>

<span class="k">def</span> <span class="nf">print_usage</span><span class="p">():</span>
    <span class="k">print</span> <span class="s">&#39;main.py -i &lt;input_file&gt; -o &lt;output_file&gt;&#39;</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">argv</span><span class="p">):</span>
    <span class="n">inputfile</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
    <span class="n">outputfile</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c"># opts is a list of returning key-value pairs, args is the options left after striped</span>
        <span class="c"># the short options &#39;hi:o:&#39;, if an option requires an input, it should be followed by a &quot;:&quot;</span>
        <span class="c"># the long options &#39;ifile=&#39; is an option that requires an input, followed by a &quot;=&quot;</span>
        <span class="n">opts</span><span class="p">,</span> <span class="n">args</span> <span class="o">=</span> <span class="n">getopt</span><span class="o">.</span><span class="n">getopt</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="s">&#39;hi:o:&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;ifile=&#39;</span><span class="p">,</span> <span class="s">&#39;ofile=&#39;</span><span class="p">])</span>
    <span class="k">except</span> <span class="n">getopt</span><span class="o">.</span><span class="n">GetoptError</span><span class="p">:</span>
        <span class="n">print_usage</span><span class="p">()</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="c"># print(args) # debug line</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">opts</span><span class="p">:</span>
        <span class="n">print_usage</span><span class="p">()</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

    <span class="c"># print arguments</span>
    <span class="k">for</span> <span class="n">opt</span><span class="p">,</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">opts</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">opt</span> <span class="o">==</span> <span class="s">&#39;-h&#39;</span><span class="p">:</span>
            <span class="n">print_usage</span><span class="p">()</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">opt</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&quot;-i&quot;</span><span class="p">,</span> <span class="s">&quot;--ifile&quot;</span><span class="p">):</span>
            <span class="n">inputfile</span> <span class="o">=</span> <span class="n">arg</span>
        <span class="k">elif</span> <span class="n">opt</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&quot;-o&quot;</span><span class="p">,</span> <span class="s">&quot;--ofile&quot;</span><span class="p">):</span>
            <span class="n">outputfile</span> <span class="o">=</span> <span class="n">arg</span>
    <span class="k">print</span> <span class="s">&quot;Input file:&quot;</span><span class="p">,</span> <span class="n">inputfile</span>
    <span class="k">print</span> <span class="s">&quot;Output file:&quot;</span><span class="p">,</span> <span class="n">outputfile</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</pre></div>
<p>Below is the example running result:</p>

<pre><code>$ ./main.py -h
main.py -i &lt;input_file&gt; -o &lt;output_file&gt;
$ ./main.py
main.py -i &lt;input_file&gt; -o &lt;output_file&gt;
$ ./main.py -i inputfile
Input file: inputfile
Output file: 
$ ./main.py -i inputfile --ofile=outputfile
Input file: inputfile
Output file: outputfile</code></pre>
<p>Part 2. Below is an example showing how to use <strong>configuration</strong> and <strong>exceptions</strong>.</p>
<div class="highlight"><pre><span class="c">#!/usr/bin/python</span>

<span class="kn">from</span> <span class="nn">ConfigParser</span> <span class="kn">import</span> <span class="n">ConfigParser</span><span class="p">,</span> <span class="n">NoOptionError</span>
<span class="kn">import</span> <span class="nn">traceback</span>

<span class="c">## The configuration is a file named &quot;config.ini&quot; with below content</span>
<span class="c"># [helloworld]</span>
<span class="c"># name = Terry</span>
<span class="c">##</span>

<span class="c"># read configuration</span>
<span class="n">config</span> <span class="o">=</span> <span class="n">ConfigParser</span><span class="p">()</span>
<span class="n">config</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s">&#39;config.ini&#39;</span><span class="p">)</span>

<span class="c"># use configuration</span>
<span class="k">print</span> <span class="s">&#39;an existing item value:&#39;</span><span class="p">,</span> <span class="s">&#39;[ name =&#39;</span><span class="p">,</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;helloworld&#39;</span><span class="p">,</span> <span class="s">&#39;name&#39;</span><span class="p">),</span> <span class="s">&#39;]&#39;</span>
<span class="k">try</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">&#39;an non-existing item value:&#39;</span><span class="p">,</span> <span class="s">&#39;[ non-exist =&#39;</span><span class="p">,</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;helloworld&#39;</span><span class="p">,</span> <span class="s">&#39;non-exist&#39;</span><span class="p">),</span> <span class="s">&#39;]&#39;</span>
<span class="k">except</span> <span class="n">NoOptionError</span><span class="p">:</span>
    <span class="c"># pass</span>
    <span class="n">traceback</span><span class="o">.</span><span class="n">print_exc</span><span class="p">()</span> <span class="c"># display exception information</span>
</pre></div>
<p>Here is the output result:</p>

<pre><code>an existing item value: [ name = Terry ]
Traceback (most recent call last):
  File &quot;./config_parser.py&quot;, line 12, in &lt;module&gt;
    print 'an non-existing item value:', '[ non-exist =', config.get('helloworld', 'non-exist'), ']'
  File &quot;/usr/lib/python2.7/ConfigParser.py&quot;, line 618, in get
    raise NoOptionError(option, section)
NoOptionError: No option 'non-exist' in section: 'helloworld'
an non-existing item value: [ non-exist =</code></pre>
<p>As you can see the line <em>&ldquo;an non-existing item value: [ non-exist = &rdquo;</em> is output belowthe exception trace information. It is because the traceback.print_exc() output to <strong>stderr</strong> while the others output to <strong>stdout</strong>, they&#39;re two separate buffers and no particular order when output to console.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Preferences for Vim]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/09/vimrc.html"/>
        <published>2013-09-23T23:16:00+08:00</published>
        <updated>2017-05-05T10:52:49+08:00</updated>
        <id>http://terryoy.github.io/2013/09/vimrc.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#vim" term="vim" label="vim" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>These are settings that to improve usage of VI text editor for various purposes.</p>

<h3 id="toc_0">1. Whitespaces and indent</h3>
<p>Copy &amp; paste below lines to <strong><em>~/.vimrc</em></strong>:</p>

<pre><code>set smartindent
set tabstop=4
set shiftwidth=4
set expandtab
set number</code></pre>

<ol>
<li>smartindent - Do smart autoindenting when starting a new line for C-like programs.</li>
<li>tabstop - Number of spaces that a <Tab> in the file counts for.</li>
<li>shiftwidth - Number of spaces to use for each step of (auto)indent.</li>
<li>expandtab - Spaces are used in indents with <Tab>.</li>
<li>number(nu) - Show line number</li>
</ol>

<h3 id="toc_1">2. Color scheme</h3>
<p>For color scheme preferences:</p>

<pre><code>colorscheme torte</code></pre>
<p>It is the default black/white scheme.</p>

<h3 id="toc_2">3. Markdown syntax support</h3>
<p>For markdown syntax highlight, by default it supports only the &ldquo;.markdown&rdquo; extension but not &ldquo;.md&rdquo;.</p>
<p>You can try this in VIM and get the correct syntax highlight:</p>

<pre><code>:set syntax=markdown</code></pre>
<p>So if you want it to support the &ldquo;.md&rdquo; file also, add this line to the ~/.vimrc:</p>

<pre><code>au BufNewFile,BufFilePre,BufRead *.md set filetype=markdown</code></pre>

<h3 id="toc_3">4. All kinds of tricks here</h3>

<h4 id="toc_4">4.1 Set fixed width to 80 columns, and soft wrap text automatically</h4>

<pre><code>:set columns=80</code></pre>

<h4 id="toc_5">4.2 Set preference according to File Type</h4>
<p>The file type plugin for Vim can help you set preferences for a specific file type.</p>

<pre><code># Show detected file type
:echo &amp;ft

# List Vim's file types and syntax definitions
:echo glob($VIMRUNTIME . '/ftplugin/*.vim')
:echo glob($VIMRUNTIME . '/syntax/*.vim')

# Check file type plugin status
:filetype</code></pre>
<p>If the file type detection is wrong or not recognized, you can set the file type:</p>

<pre><code>:set filetype=html</code></pre>
<p>Now if you want to add customize settings according to file type, you can edit a file under <code>~/.vim/ftplugin/&lt;filetype&gt;.vim</code> where <code>&lt;filetype&gt;</code> should be replace by the defined file type. For example:</p>

<pre><code>$ vi ~/.vim/ftplugin/html.vim
set ts=2
set sw=2
set expandtab</code></pre>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Useful Aliases and Commands in Linux]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/09/useful_alias.html"/>
        <published>2013-09-23T00:00:00+08:00</published>
        <updated>2016-05-11T10:43:13+08:00</updated>
        <id>http://terryoy.github.io/2013/09/useful_alias.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#shell" term="shell" label="shell" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Below is a list of some useful aliases, which you could add to your linux shell environment.</p>
<p>Copy and paste below content to your <strong><em>~/.bashrc</em></strong>.</p>

<!--script src="https://gist.github.com/terryoy/6374725.js"></script-->
<div class="highlight"><pre><span class="c"># open a browser and view raw html (e.g. &quot;cat some.html | viewhtml&quot;)</span>
<span class="nb">alias </span><span class="nv">viewhtml</span><span class="o">=</span><span class="s1">&#39;firefox &quot;data:text/html;charset=utf-8;base64,$(base64 -w 0 &lt;&amp;0)&quot;&#39;</span>

<span class="c"># url encode / decode</span>
<span class="nb">alias </span><span class="nv">urlencode</span><span class="o">=</span><span class="s1">&#39;python -c &quot;import sys, urllib as ul; print ul.quote_plus(sys.argv[1])&quot;&#39;</span>
<span class="nb">alias </span><span class="nv">urldecode</span><span class="o">=</span><span class="s1">&#39;python -c &quot;import sys, urllib as ul; print ul.unquote_plus(sys.argv[1])&quot;&#39;</span>

<span class="c"># url shortener</span>
<span class="nb">alias </span><span class="nv">shortenurl</span><span class="o">=</span><span class="s2">&quot;python -c \&quot;import sys, urllib as ul; print ul.urlopen(&#39;http://tinyurl.com/api-create.php?url=%s&#39; % ul.quote_plus(sys.argv[1])).readline()\&quot;&quot;</span>
</pre></div>

<h3 id="toc_0"># work with hex</h3>
<div class="highlight"><pre><span class="c"># if you want to dump a file in hex</span>
<span class="nv">$ </span>xxd -p file

<span class="c"># A Hex number convertor, convert decimal into hex(e.g. &quot;hex 34&quot; -&gt; 22)</span>
<span class="nb">alias </span><span class="nv">hex</span><span class="o">=</span><span class="s1">&#39;printf &quot;%x\n&quot;&#39;</span>
</pre></div>

<h3 id="toc_1"># mount a virtualbox disk on linux</h3>
<div class="highlight"><pre><span class="c"># before you can mount anything, install virtualbox-fuse</span>
<span class="nv">$ </span>sudo apt-get install virtualbox-fuse

<span class="c"># there are &#39;disk/&#39; folder and &#39;space/&#39; folder.</span>
<span class="c"># &#39;vdfuse -r&#39; is for read only,</span>
<span class="nv">$ </span>vdfuse -raf <span class="nv">$1</span> disk
<span class="nv">$ </span>mount disk/Partition1 space
</pre></div>

<h3 id="toc_2">Set keyboard repeat rate and delay</h3>
<div class="highlight"><pre><span class="c">#Set keyboard repeat rate and delay</span>
<span class="c"># where 220 is the delay(ms) and 40 is repeat rate(cps)</span>

<span class="c"># under X</span>
<span class="nv">$ </span>xset r rate 220 40
<span class="c"># under command line(or put it in /etc/rc.local, ~/.bashrc, ~/.bash_profile, etc.)</span>
<span class="nv">$ </span>sudo kbdrate -r 40 -d 220
</pre></div>

<h3 id="toc_3">Merge images into a movie</h3>
<div class="highlight"><pre><span class="c"># &quot;-framerate&quot; must be before &quot;-i&quot;, it&#39;s an input framerate, which means how many images are used in one second</span>
<span class="c"># &quot;-r&quot; is the output framerate</span>
<span class="c"># &quot;image%03d.jpg&quot; for &quot;image001.jpg&quot; pattern, while &quot;image%d.jpg&quot; for &quot;image1.jpg&quot;(no zero-padding) pattern</span>
<span class="nv">$ </span>ffmpeg -framerate 4 -i image%03d.jpg -r 4 test.mp4
</pre></div>

<h3 id="toc_4">Check network port opens</h3>
<div class="highlight"><pre><span class="c"># Most of the network conversations are in tcp, so it&#39;s ok to filter the port with &quot;grep tcp&quot;</span>
<span class="nv">$ </span>sudo netstat -pl | grep tcp
</pre></div>

<h3 id="toc_5">Check user&#39;s default shell and change it</h3>
<div class="highlight"><pre><span class="c"># check default shell</span>
<span class="nv">$ </span>cat /etc/passwd | grep terryoy
<span class="c"># change default shell(check &quot;man chsh&quot; for more)</span>
<span class="nv">$ </span>chsh -s /bin/bash
</pre></div>
]]>
        </content>
    </entry>
</feed>