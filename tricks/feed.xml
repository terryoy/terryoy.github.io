<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Hello, World!</title>
    <link href="http://terryoy.github.io/tricks/feed.xml" rel="self" />
    <link href="http://terryoy.github.io/tricks/" />
    <updated>2015-06-27T23:21:26+08:00</updated>
    <id>http://terryoy.github.io/tricks/</id>
    <entry>
        <title type="html"><![CDATA[Linux Server Security Useful Commands]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/06/some-useful-linux-server-security-commands.html"/>
        <published>2015-06-27T22:31:00+08:00</published>
        <updated>2015-06-27T23:21:26+08:00</updated>
        <id>http://terryoy.github.io/2015/06/some-useful-linux-server-security-commands.html</id>
        <category scheme="http://terryoy.github.io/tag/#server" term="server" label="server" />
        <category scheme="http://terryoy.github.io/tag/#security" term="security" label="security" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>When suspecting your server is broken into, below is some tricks to do the server audit.</p>

<h3 id="toc_0">1. Use &ldquo;last&rdquo; command to check login sessions</h3>
<div class="highlight"><pre><span class="nv">$ </span>last
terryoy  pts/0        58.251.197.153   Sat Jun 27 21:42   still logged in   
terryoy  pts/2        113.116.1.68     Tue Jun 23 14:40 - 16:14  <span class="o">(</span>01:34<span class="o">)</span>    
terryoy  pts/0        113.116.1.68     Tue Jun 23 14:38 - 16:14  <span class="o">(</span>01:35<span class="o">)</span>    
terryoy  pts/0        183.16.85.159    Tue Jun 23 09:37 - 14:02  <span class="o">(</span>04:24<span class="o">)</span>    
terryoy  pts/0        183.16.197.223   Mon Jun 22 17:47 - 20:10  <span class="o">(</span>02:22<span class="o">)</span>    
terryoy  pts/6        183.16.195.96    Thu Jun 18 11:08 - 15:23  <span class="o">(</span>04:14<span class="o">)</span>    
terryoy  pts/5        183.16.195.96    Thu Jun 18 11:08 - 15:23  <span class="o">(</span>04:14<span class="o">)</span>    
terryoy  pts/2        183.16.190.37    Thu Jun 18 10:37 - 13:06  <span class="o">(</span>02:29<span class="o">)</span>    
terryoy  pts/0        183.16.190.37    Thu Jun 18 10:01 - 13:01  <span class="o">(</span>02:59<span class="o">)</span>
</pre></div>

<h3 id="toc_1">2. Use &ldquo;lastlog&rdquo; to check all user&#39;s last login time</h3>
<div class="highlight"><pre><span class="nv">$ </span>lastlog
Username         Port     From             Latest
root             pts/2    27.45.56.68      Sat Feb 21 15:21:40 +0800 2015
daemon                                     **Never logged in**
bin                                        **Never logged in**
sys                                        **Never logged in**
sync                                       **Never logged in**
games                                      **Never logged in**
man                                        **Never logged in**
lp                                         **Never logged in**
mail                                       **Never logged in**
news                                       **Never logged in**
uucp                                       **Never logged in**
proxy                                      **Never logged in**
</pre></div>

<h3 id="toc_2">3. Check &ldquo;/var/log/auth.log&rdquo;</h3>
<div class="highlight"><pre><span class="nv">$ </span>sudo less /var/log/auth.log
...
Jun 27 21:35:01 iZ940ou5p7nZ CRON<span class="o">[</span>14089<span class="o">]</span>: pam_unix<span class="o">(</span>cron:session<span class="o">)</span>: session closed <span class="k">for </span>user root
Jun 27 21:42:55 iZ940ou5p7nZ sshd<span class="o">[</span>14108<span class="o">]</span>: Accepted password <span class="k">for </span>terryoy from 58.251.197.153 port 62430 ssh2
Jun 27 21:42:55 iZ940ou5p7nZ sshd<span class="o">[</span>14108<span class="o">]</span>: pam_unix<span class="o">(</span>sshd:session<span class="o">)</span>: session opened <span class="k">for </span>user terryoy by <span class="o">(</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">)</span>
Jun 27 21:45:01 iZ940ou5p7nZ CRON<span class="o">[</span>14187<span class="o">]</span>: pam_unix<span class="o">(</span>cron:session<span class="o">)</span>: session opened <span class="k">for </span>user root by <span class="o">(</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">)</span>
Jun 27 21:45:01 iZ940ou5p7nZ CRON<span class="o">[</span>14187<span class="o">]</span>: pam_unix<span class="o">(</span>cron:session<span class="o">)</span>: session closed <span class="k">for </span>user root
Jun 27 21:53:30 iZ940ou5p7nZ sudo:  terryoy : <span class="nv">TTY</span><span class="o">=</span>pts/0 ; <span class="nv">PWD</span><span class="o">=</span>/home/terryoy ; <span class="nv">USER</span><span class="o">=</span>root ; <span class="nv">COMMAND</span><span class="o">=</span>/usr/bin/apt-get install acct
Jun 27 21:53:30 iZ940ou5p7nZ sudo: pam_unix<span class="o">(</span>sudo:session<span class="o">)</span>: session opened <span class="k">for </span>user root by terryoy<span class="o">(</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">)</span>
Jun 27 21:53:39 iZ940ou5p7nZ sudo: pam_unix<span class="o">(</span>sudo:session<span class="o">)</span>: session closed <span class="k">for </span>user root
...
</pre></div>

<h3 id="toc_3">4. Use &ldquo;acct&rdquo; for system accounting</h3>
<p>The &ldquo;acct&rdquo; package is a set of utilities for system accounting. </p>

<pre><code>* ac, print stats about user's connect time
* accton, turn process accounting on or off
* last, listing of last logged in users
* lastcomm, print info about previous executed commands
* sa, summarize accounting info
* dump-utmp, print an utmp file in human readable format
* dump-acct, print an acct file in human readable format</code></pre>
<div class="highlight"><pre><span class="c"># list user&#39;s login session time by date</span>
<span class="nv">$ </span>ac -p -d

<span class="c"># display user&#39;s last commands</span>
<span class="nv">$ </span>lastcomm &lt;user_name&gt;
</pre></div>

<h3 id="toc_4">Reference to secure ubuntu server</h3>
<p><a href="https://www.ftmon.org/blog/secure-ubuntu-server/">www.ftmon.org/blog/secure-ubuntu-server/</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Create a Root CA and Self-Sign Certificate for SSL]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/02/create-ssl-ca-root-and-self-sign.html"/>
        <published>2015-02-23T11:03:00+08:00</published>
        <updated>2015-04-21T11:55:33+08:00</updated>
        <id>http://terryoy.github.io/2015/02/create-ssl-ca-root-and-self-sign.html</id>
        <category scheme="http://terryoy.github.io/tag/#server" term="server" label="server" />
        <category scheme="http://terryoy.github.io/tag/#security" term="security" label="security" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Concepts</h3>
<p>Nowadays we often have HTTPS protected web access scenario, however it&#39;s expensive to purchase a certificates from authority if you&#39;re just running a small site. So it&#39;s better to create your own certificates and use your own SSL protection.</p>
<p>The steps can be roughly described as below:</p>

<pre><code>1. Create a private key (as Root CA Key), keep this very private
2. Self-sign a root certificate
3. Install root CA on your various workstations
4. Create a CSR(Certificate Signing Request) for each of your authorized needed circumstances(device, server, client, etc.)
5. Sign CA with root CA Key</code></pre>

<h3 id="toc_1">2. Generate Root CA(Certificate Authority)</h3>
<p>The first part is to create a private key and the CA, which will be used as the root CA to sign certificates.</p>
<div class="highlight"><pre><span class="c">## Step 1: Create a private key</span>

<span class="c"># generate a private root key</span>
<span class="nv">$ </span>openssl genrsa -out rootCA.key 2048
<span class="c"># (or) generate a private root key with passphrase protection; and if you forgot the password, you need to do everything again</span>
<span class="nv">$ </span>openssl genrsa -out rootCA.key 2048 -des3


<span class="c">## Step 2: Self-sign a certificate</span>

<span class="nv">$ </span>openssl req -x509 -new -nodes -key rootCA.key -days 3650 -out rootCA.pem
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter <span class="s1">&#39;.&#39;</span>, the field will be left blank.
-----
Country Name <span class="o">(</span>2 letter code<span class="o">)</span> <span class="o">[</span>AU<span class="o">]</span>:CN
State or Province Name <span class="o">(</span>full name<span class="o">)</span> <span class="o">[</span>Some-State<span class="o">]</span>:Guangdong
Locality Name <span class="o">(</span>eg, city<span class="o">)</span> <span class="o">[]</span>:Shenzhen
Organization Name <span class="o">(</span>eg, company<span class="o">)</span> <span class="o">[</span>Internet Widgits Pty Ltd<span class="o">]</span>:TeaTime Production.
Organizational Unit Name <span class="o">(</span>eg, section<span class="o">)</span> <span class="o">[]</span>:IT   
Common Name <span class="o">(</span>e.g. server FQDN or YOUR name<span class="o">)</span> <span class="o">[]</span>:Terry Ouyang    
Email Address <span class="o">[]</span>:terry.ouyang@gmail.com
</pre></div>
<p>Now we have a private root key(rootCA.key), and a root CA(rootCA.pem). If you want all the clients/PC/browsers accept your authorized certificate, you need to put your root CA in their local trusted stores(e.g. OS&#39;s trusted certificates repositories).</p>

<h3 id="toc_2">3. Create Certificates and Sign with Root CA</h3>
<p>For every device you want to authorize, you need to create their own private key, then complete the signed certificate with a certificate signing request(CSR).</p>
<div class="highlight"><pre><span class="c">## Step 1: Create the private key</span>

<span class="nv">$ </span>openssl genrsa -out device.key 2048

<span class="c">## Step 2: Create the CSR (In this step you must set &quot;Common Name&quot; to your desire host if you&#39;re planning to use it as a server&#39;s certificate)</span>

<span class="nv">$ </span>openssl req -new -key device.key -out device.csr
...
Common Name <span class="o">(</span>e.g. server FQDN or YOUR name<span class="o">)</span> <span class="o">[]</span>:terryoy.github.io
...

<span class="c">## Step 3: Create the signed certificate </span>

<span class="nv">$ </span>openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 3650
</pre></div>
<p>Now you have the certificate private key(device.key) and the self CA signed certificate(device.crt). You can now use them for SSL communications.</p>

<h3 id="toc_3">4. Congifuration for Nginx</h3>
<p>Below is an example of enabling the SSL function for the service configuration.</p>
<div class="highlight"><pre>server <span class="o">{</span>
    listen 443;
    ssl on;
    ssl_certificate /etc/nginx/ssl/service.crt;
    ssl_certificate_key /etc/nginx/ssl/service.key;

    ...
<span class="o">}</span>
</pre></div>
<p>You can also check your server&#39;s certificate by the command below:</p>
<div class="highlight"><pre><span class="nv">$ </span>openssl s_client -connect www.yourexample.com:443
</pre></div>

<h3 id="toc_4">5. Setup SSL Factory on Android App</h3>
<p>There is a good reference on <a href="http://stackoverflow.com/a/6378872">stackoverflow.com</a> for this problem.</p>
<p>If you&#39;re using cocos2d-x 3.3+, it supports that you set a certificate for the HttpClient(globally), which allows you use your own certificate for SSL verification.</p>
<div class="highlight"><pre><span class="k">auto</span> <span class="n">path</span> <span class="o">=</span> <span class="n">FileUtils</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">fullPathForFilename</span><span class="p">(</span><span class="s">&quot;my_cacert.pem&quot;</span><span class="p">);</span>
<span class="n">HttpClient</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">setSSLVerification</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[PostgesSQL 9 Administration QuickRef(2) - Managing Database]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/02/postgresql-admin-quickref-part2-initiating-database.html"/>
        <published>2015-02-21T16:40:00+08:00</published>
        <updated>2015-02-21T17:24:38+08:00</updated>
        <id>http://terryoy.github.io/2015/02/postgresql-admin-quickref-part2-initiating-database.html</id>
        <category scheme="http://terryoy.github.io/tag/#postgresql" term="postgresql" label="postgresql" />
        <category scheme="http://terryoy.github.io/tag/#database" term="database" label="database" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Creating a Database</h3>
<p>It&#39;s a common task to create a database and assign an access user for it. This can be done by command line or by psql queries.</p>
<div class="highlight"><pre><span class="c"># by command line</span>
<span class="nv">$ </span>su postgres
<span class="nv">$ </span>createuser -D -A -P myuser
<span class="nv">$ </span>createdb -O myuser mydb

<span class="c"># (or) a longer version for the createdb command</span>
<span class="nv">$ </span>createdb -h localhost -p 5432 -U postgres -O myuser -E UTF8 mydb
</pre></div>
<div class="highlight"><pre><span class="c1">--create database by psql client </span>
<span class="gp">postgres=#</span> <span class="k">CREATE</span> <span class="k">USER</span> <span class="n">myuser</span> <span class="k">WITH</span> <span class="k">PASSWORD</span> <span class="s1">&#39;my_password&#39;</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">mydb</span> <span class="k">WITH</span> <span class="k">OWNER</span> <span class="n">myuser</span> <span class="k">ENCODING</span> <span class="s1">&#39;UTF8&#39;</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">GRANT</span> <span class="k">ALL</span> <span class="k">PRIVILEGES</span> <span class="k">ON</span> <span class="k">DATABASE</span> <span class="s-Name">&quot;mydb&quot;</span> <span class="k">to</span> <span class="n">myuser</span><span class="p">;</span>
</pre></div>

<h3 id="toc_1">2. Configuring Connection Method</h3>
<p>Peer authentication uses system&#39;s user accounts for authentication, while MD5 authentication uses password authentication encrypted in md5.</p>
<p>Restart Postgresql service after configuration file is changed.</p>
<div class="highlight"><pre><span class="c"># Edit the file for the database access method</span>
<span class="nv">$ </span>sudo vi /etc/postgresql/9.1/main/pg_hba.conf

<span class="c"># Database administrative login by Unix domain socket</span>
<span class="nb">local   </span>all             postgres                                peer

<span class="c"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span>

<span class="c"># &quot;local&quot; is for Unix domain socket connections only</span>
<span class="nb">local   </span>all             all                                     peer
<span class="c"># IPv4 local connections:</span>
host    all             all             127.0.0.1/32            md5
<span class="c"># IPv6 local connections:</span>
host    all             all             ::1/128                 md5
<span class="c"># Allow replication connections from localhost, by a user with the</span>
<span class="c"># replication privilege.</span>
<span class="c">#local   replication     postgres                                peer</span>
<span class="c">#host    replication     postgres        127.0.0.1/32            md5</span>
<span class="c">#host    replication     postgres        ::1/128                 md5</span>


<span class="nv">$ </span>sudo service postgresql restart
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[PostgesSQL 9 Administration QuickRef(1) - Exploring Database]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/03/postgresql-admin-quickref-part1-exploring-database.html"/>
        <published>2014-03-06T15:27:00+08:00</published>
        <updated>2014-03-06T15:36:15+08:00</updated>
        <id>http://terryoy.github.io/2014/03/postgresql-admin-quickref-part1-exploring-database.html</id>
        <category scheme="http://terryoy.github.io/tag/#postgresql" term="postgresql" label="postgresql" />
        <category scheme="http://terryoy.github.io/tag/#database" term="database" label="database" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>The most cheat sheets or quick references I found are organized by knowledge domains, but I would rather like a quick reference organized by tasks. Thus I make this reference.</p>

<h1 id="toc_0">Part I: Exploring Database</h1>

<h3 id="toc_1">1. Basic Information</h3>
<p>Default location of data files (in debian/ubuntu): <code>/var/lib/postgresql/9.1/main/</code>
Data files for an instance:
    base        -   data directory for databases 
    global      -   database catalog tables(shared across databases)
    pg_clog - transaction status files
    pg_multixact    -   row-level lock status files
    pg_subtrans -   subtransaction status files 
    pg_tblspc       -   links to external tablespaces
    pg_twophase -   prepared transaction status
    pg_xlog     -   WAL(Write-Ahead Log) transaction log
Log files: <code>/var/log/postgresql/</code></p>
<p>PostgreSQL command line programs:</p>
<div class="highlight"><pre><span class="c"># check psql version</span>
<span class="nv">$ </span>psql --version
<span class="c"># check configuration variables</span>
<span class="nv">$ </span>pg_config
<span class="c"># run a single command</span>
<span class="nv">$ </span>psql -c <span class="s2">&quot;\d&quot;</span>
</pre></div>
<p>PSQL text client:</p>
<div class="highlight"><pre><span class="c1">-- line comment</span>
<span class="o">/</span> <span class="o">*</span><span class="n">multi</span><span class="o">-</span><span class="nb">line</span> <span class="k">comment</span><span class="o">*</span> <span class="o">/</span>
<span class="c1">-- check server version</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="k">version</span><span class="p">();</span>
<span class="go">-- output query result as one column per line</span>
<span class="gp">postgres=#</span> <span class="kp">\x</span>
</pre></div>

<h3 id="toc_2">2. Server Stats</h3>
<div class="highlight"><pre><span class="c"># list databases</span>
<span class="nv">$ </span>psql -l
<span class="c"># list tables in a database</span>
<span class="nv">$ </span>psql -c <span class="s2">&quot;\d&quot;</span> -d somedb
</pre></div>
<div class="highlight"><pre><span class="c1">-- check server uptime</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">date_trunc</span><span class="p">(</span><span class="s1">&#39;second&#39;</span><span class="p">,</span> <span class="k">current_timestamp</span> <span class="o">-</span> <span class="n">pg_postmaster_start_time</span><span class="p">())</span> <span class="k">as</span> <span class="n">uptime</span><span class="p">;</span>

<span class="go">-- list database names</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">datname</span> <span class="k">from</span> <span class="n">pg_database</span><span class="p">;</span>
<span class="go">-- list tables in databases;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">table_catalog</span><span class="p">,</span> <span class="n">table_schema</span><span class="p">,</span> <span class="n">table_name</span><span class="p">,</span> <span class="n">table_type</span> <span class="k">from</span> <span class="n">information_schema</span><span class="mf">.</span><span class="k">tables</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="kp">\dt+</span>

<span class="go">-- check database size</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_database_size</span><span class="p">(</span><span class="s1">&#39;somedb&#39;</span><span class="p">);</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_database_size</span><span class="p">(</span><span class="n">current_database</span><span class="p">());</span>
<span class="go">-- check table size</span>
<span class="gp">postgres=#</span> <span class="kp">\dt+</span> <span class="ss">some_table</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_relation_size</span><span class="p">(</span><span class="s1">&#39;some_table&#39;</span><span class="p">);</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_total_relation_size</span><span class="p">(</span><span class="s1">&#39;some_table&#39;</span><span class="p">);</span> <span class="c1">-- including indexes and other related space</span>
<span class="go">-- list table sizes in order</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">table_name</span><span class="p">,</span> <span class="n">pg_total_relation_size</span><span class="p">(</span><span class="n">table_name</span><span class="p">)</span> <span class="k">as</span> <span class="n">size</span>
<span class="k">FROM</span> <span class="n">information_schema</span><span class="mf">.</span><span class="k">tables</span> <span class="k">NOT</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;information_schema&#39;</span><span class="p">,</span> <span class="s1">&#39;pg_catalog&#39;</span><span class="p">)</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">size</span> <span class="k">DESC</span><span class="p">;</span>

<span class="go">-- check online users/clients</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span>  <span class="k">from</span> <span class="n">pg_stat_activity</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">datname</span><span class="p">,</span> <span class="n">usename</span><span class="p">,</span> <span class="n">client_addr</span><span class="p">,</span> <span class="n">client_port</span> <span class="k">FROM</span> <span class="n">pg_stat_activity</span><span class="p">;</span>

<span class="go">-- track user activities(like check user&#39;s pending query)</span>
<span class="gp">postgres=#</span> <span class="k">SET</span> <span class="n">track_activities</span> <span class="o">=</span> <span class="k">on</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">datname</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">current_query</span> 
<span class="k">FROM</span> <span class="n">pg_stat_activity</span> 
<span class="k">WHERE</span> <span class="n">current_query</span> <span class="o">!=</span> <span class="s1">&#39;&lt;IDLE&gt;&#39;</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="k">current_timestamp</span> <span class="o">-</span> <span class="n">query_start</span> <span class="k">as</span> <span class="n">runtime</span><span class="p">,</span> <span class="n">datname</span><span class="p">,</span> <span class="n">usename</span><span class="p">,</span> <span class="n">current_query</span> 
<span class="k">FROM</span> <span class="n">pg_stat_activity</span>
<span class="k">WHERE</span> <span class="n">current_query</span> <span class="o">!=</span> <span class="s1">&#39;&lt;IDLE&gt;&#39;</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="mf">1</span> <span class="k">DESC</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">datname</span><span class="p">,</span> <span class="n">usename</span><span class="p">,</span> <span class="n">current_query</span>
<span class="k">FROM</span> <span class="n">pg_stat_activity</span>
<span class="k">WHERE</span> <span class="n">waiting</span><span class="p">;</span>

<span class="go">-- check who is blocking the queries</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> 
    <span class="n">w</span><span class="mf">.</span><span class="n">current_query</span> <span class="k">as</span> <span class="n">waiting_query</span><span class="p">,</span>
    <span class="n">w</span><span class="mf">.</span><span class="n">procpid</span> <span class="k">as</span> <span class="n">w_pid</span><span class="p">,</span>
    <span class="n">w</span><span class="mf">.</span><span class="n">usename</span> <span class="k">as</span> <span class="n">w_user</span><span class="p">,</span>
    <span class="n">l</span><span class="mf">.</span><span class="n">current_query</span> <span class="k">as</span> <span class="n">locking_query</span><span class="p">,</span>
    <span class="n">l</span><span class="mf">.</span><span class="n">procpid</span> <span class="k">as</span> <span class="n">l_pid</span><span class="p">,</span>
    <span class="n">l</span><span class="mf">.</span><span class="n">usename</span> <span class="k">as</span> <span class="n">l_user</span><span class="p">,</span>
    <span class="n">t</span><span class="mf">.</span><span class="n">schemaname</span> <span class="o">||</span> <span class="s1">&#39;-&#39;</span> <span class="o">||</span> <span class="n">t</span><span class="mf">.</span><span class="n">relname</span> <span class="k">as</span> <span class="n">tablename</span>
<span class="k">FROM</span> <span class="n">pg_stat_activity</span> <span class="n">w</span>
<span class="k">JOIN</span> <span class="n">pg_locks</span> <span class="n">l1</span> <span class="k">ON</span> <span class="n">w</span><span class="mf">.</span><span class="n">procpid</span> <span class="o">=</span> <span class="n">l1</span><span class="mf">.</span><span class="n">pid</span> <span class="k">AND</span> <span class="k">NOT</span> <span class="n">l1</span><span class="mf">.</span><span class="k">granted</span>
<span class="k">JOIN</span> <span class="n">pg_locks</span> <span class="n">l2</span> <span class="k">ON</span> <span class="n">l1</span><span class="mf">.</span><span class="n">relation</span> <span class="o">=</span> <span class="n">l2</span><span class="mf">.</span><span class="n">relation</span> <span class="k">AND</span> <span class="n">l2</span><span class="mf">.</span><span class="k">granted</span>
<span class="k">JOIN</span> <span class="n">pg_stat_activity</span> <span class="n">l</span> <span class="k">on</span> <span class="n">l2</span><span class="mf">.</span><span class="n">pid</span> <span class="o">=</span> <span class="n">l</span><span class="mf">.</span><span class="n">procpid</span>
<span class="k">JOIN</span> <span class="n">pg_stat_user_tables</span> <span class="n">t</span> <span class="k">ON</span> <span class="n">l1</span><span class="mf">.</span><span class="n">relation</span> <span class="o">=</span> <span class="n">t</span><span class="mf">.</span><span class="n">relid</span>
<span class="k">WHERE</span> <span class="n">w</span><span class="mf">.</span><span class="n">waiting</span><span class="p">;</span>

<span class="go">-- cancel a query</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_cancel_backend</span><span class="p">(</span><span class="n">some_processid</span><span class="p">);</span>
<span class="go">-- killing a session</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_terminate_backend</span><span class="p">(</span><span class="n">some_processid</span><span class="p">);</span>
<span class="go">-- killing &quot;idle in transaction&quot;(e.g. leaving without ending the transaction) sessions</span>
<span class="go">-- (ps, you can schedule this script to be running every minute)</span>
<span class="gp">postgres=#</span> <span class="k">SELECT</span> <span class="n">pg_terminate_backend</span><span class="p">(</span><span class="n">procpid</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">pg_stat_activity</span>
<span class="k">WHERE</span> <span class="n">current_query</span> <span class="o">=</span> <span class="s1">&#39;&lt;IDLE&gt; in transaction&#39;</span>
    <span class="k">and</span> <span class="k">current_timestamp</span> <span class="o">-</span> <span class="n">query_start</span> <span class="o">&gt;</span> <span class="s1">&#39;10 min&#39;</span><span class="p">;</span>

<span class="go">-- collecting daily usage statistics</span>
<span class="gp">postgres=#</span> <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">backup_stat_user_tables</span> <span class="k">as</span> 
<span class="k">SELECT</span> <span class="k">current_timestamp</span> <span class="k">as</span> <span class="n">snaptime</span><span class="p">,</span>
<span class="k">FROM</span> <span class="n">pg_stat_user_tables</span><span class="p">;</span>
<span class="gp">postgres=#</span> <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">backup_stat_user_tablese</span>
<span class="k">SELECT</span>
</pre></div>

<h3 id="toc_3">3. Schema and Table</h3>
<div class="highlight"><pre><span class="c1">-- Show definition of a table(including References to this table)</span>
<span class="gp">postgres=#</span> <span class="kp">\d+</span> <span class="ss">some_table</span>
</pre></div>
<p>(to be continue)</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Setup SSH Identity Key Login in Linux]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/01/ssh-key-based-auth-server.html"/>
        <published>2014-01-08T15:40:00+08:00</published>
        <updated>2014-01-08T15:46:42+08:00</updated>
        <id>http://terryoy.github.io/2014/01/ssh-key-based-auth-server.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#shell" term="shell" label="shell" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>This example is about how to create a new user and enable SSH public-key authentication in Ubuntu Server. It is necessary if your server is open to the public on internet.</p>

<h2 id="toc_0">1. Create a New User on Server</h2>
<p>In a traditional way, people use the command &ldquo;useradd&rdquo; to create user account, then together with other commands to setup the group, the home folder for the user.</p>
<div class="highlight"><pre><span class="nv">$ </span>useradd terry
<span class="nv">$ </span>passwd terry
<span class="nv">$ </span>mkdir /home/terry
<span class="nv">$ </span>chown -R terry:users /home/terry
</pre></div>
<p>In a debian way, there is one command which does it all: &ldquo;adduser&rdquo;.</p>
<div class="highlight"><pre><span class="nv">$ </span>adduser edmund
Adding user <span class="s1">&#39;edmund&#39;</span> ...
Adding new group <span class="s1">&#39;edmund&#39;</span> <span class="o">(</span>1001<span class="o">)</span> ...
Adding new user <span class="s1">&#39;edmund&#39;</span> <span class="o">(</span>1001<span class="o">)</span> with group <span class="s1">&#39;edmund&#39;</span> ...
Creating home directory <span class="s1">&#39;/home/edmund&#39;</span> ...
Copying files from <span class="s1">&#39;/etc/skel&#39;</span> ...
Enter new UNIX password: 
Retype new UNIX password: 
passwd: password updated successfully
Changing the user information <span class="k">for </span>edmund
Enter the new value, or press ENTER <span class="k">for </span>the default
    Full Name <span class="o">[]</span>: 
    Room Number <span class="o">[]</span>: 
    Work Phone <span class="o">[]</span>: 
    Home Phone <span class="o">[]</span>: 
    Other <span class="o">[]</span>: 
Is the information correct? <span class="o">[</span>Y/n<span class="o">]</span>
</pre></div>

<h2 id="toc_1">2. Generate SSH Key and Apply to Server</h2>
<p>With SSH key login, user require a public/private key pairs to authenticate the login. SSH can use both &ldquo;RSA&rdquo; and &ldquo;DSA&rdquo; keys, however according to the <a href="https://help.ubuntu.com/community/SSH/OpenSSH/Keys#Key-Based_SSH_Logins">ubuntu guide</a>, &ldquo;RSA&rdquo; is the only recommended choice for new keys. </p>
<p>First thing you should keep in mind, the private key should <strong>NOT</strong> allow to be accessed by anybody else(e.g. set &ldquo;700&rdquo; with chmod). We will create the RSA keys in your <strong>local</strong> machine, then copy the public key to the <strong>remote</strong> server.</p>
<div class="highlight"><pre><span class="nv">$ </span>mkdir ~/.ssh
<span class="nv">$ </span>chmod 700 ~/.ssh      <span class="c"># set access right only to user self</span>
<span class="nv">$ </span>ssh-keygen -t rsa     <span class="c"># **or you could use &quot;ssh-keygen -t rsa -b 4096&quot; for more secure login, default is 2048**.</span>
Generating public/private rsa key pair.
Enter file in which to save the key <span class="o">(</span>/home/edmund/.ssh/id_rsa<span class="o">)</span>: 
Enter passphrase <span class="o">(</span>empty <span class="k">for </span>no passphrase<span class="o">)</span>: 
Enter same passphrase again: 
Your identification has been saved in /home/edmund/.ssh/id_rsa.
Your public key has been saved in /home/edmund/.ssh/id_rsa.pub.

<span class="c"># next copy the public key to server. you can use a one-command way or manually copy the key to server.</span>
<span class="nv">$ </span>ssh-copy-id user@machine      <span class="c"># one-command way</span>
<span class="c"># manually way: copy the public key to server, and add it to authorized_key</span>
<span class="nv">$ </span>scp ~/.ssh/id_rsa.pub user@machine:~/.ssh/my_rsa.pub
<span class="nv">$ </span>ssh user@machine
<span class="nv">$ </span><span class="nb">cd</span> ~/.ssh
<span class="nv">$ </span>cat my_rsa.pub &gt;&gt; authorized_keys
</pre></div>

<h2 id="toc_2">3. Update SSH Daemon configuration on Server</h2>
<p>On the remote machine, currently the password authentication is still enabled, so we need to enable the RSA Authentication and disable the Password Authentication for the better security.</p>
<p>Open <strong>/etc/ssh/sshd_config</strong> on server, find(or add) the below items and set the values:
<code>
PubkeyAuthentication yes
RSAAuthentication yes
PasswordAuthentication no
</code>
Next restart ssh service: <code>$ sudo service ssh restart</code>
Now try login in the local machine:
<code>
$ ssh user@machine  # Or,
$ ssh -i id_rsa user@machine
</code>
If your key matches, you will directly go into the console shell, or else you will get the following error info, which means you configuration applied successfully.
<code>
Permission denied (publickey).
</code>
If you want to revoke an authorized key for some user, you can find the user&#39;s public key in <strong>&ldquo;~/.ssh/authorized_keys&rdquo;</strong> and remove it.</p>

<hr/>

<h4 id="toc_3"><em>Extra Bonus: below is a small trick to use the keys to encrypt/decrypt text for daily use.</em></h4>
<div class="highlight"><pre><span class="c"># encrypt a text file, and output to a file</span>
<span class="nv">$ </span>openssl enc -aes-256-cbc -e -in textfile.txt -out encrypted.txt -pass pass:some_password
<span class="c"># decrypt a text file, and output to a file(else it will print to the console)</span>
<span class="nv">$ </span>openssl enc -aes-256-cbc -d -in encrypted.txt -out textfile.txt -pass pass:some_password

<span class="c"># encode in base64 (the &quot;enc&quot; option let you specify a cipher, e.g. &quot;-base64&quot; here)</span>
<span class="nv">$ </span>openssl enc -base64 -e -in tetfile.txt
<span class="nv">$ </span>openssl enc -base64 -e <span class="o">&lt;&lt;&lt;</span> <span class="s2">&quot;Encode this text please&quot;</span>
<span class="nv">$ </span>openssl base64 -e <span class="o">&lt;&lt;&lt;</span> <span class="s2">&quot;Encode this text please&quot;</span>
<span class="c"># decode in base64</span>
<span class="nv">$ </span>openssl base64 -d <span class="o">&lt;&lt;&lt;</span> <span class="s2">&quot;RW5jb2RlIHRoaXMgdGV4dCBwbGVhc2UK&quot;</span>
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Archive Commands in Linux]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/01/archive-commands-in-linux.html"/>
        <published>2014-01-07T19:13:00+08:00</published>
        <updated>2014-01-07T19:19:42+08:00</updated>
        <id>http://terryoy.github.io/2014/01/archive-commands-in-linux.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#shell" term="shell" label="shell" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Below is a collection of commands compressing and uncompressing various file formats.  </p>
<div class="highlight"><pre><span class="c">#### compress ####</span>
<span class="nv">$ </span>tar -cvf output.tar <span class="nb">test</span>-files
<span class="nv">$ </span>gzip output.tar       <span class="c"># result file &quot;output.tar.gz&quot;</span>
<span class="nv">$ </span>tar -cvzf output.tar.gz <span class="nb">test</span>-files        <span class="c"># combined with the two above</span>
<span class="nv">$ </span>bzip2 output.tar      <span class="c"># result file &quot;output.tar.bz2&quot;</span>
<span class="nv">$ </span>tar -cvjf output.tar.bz2 <span class="nb">test</span>-files
<span class="c"># other formats (zip, gz, rar, 7z, ...)</span>
<span class="nv">$ </span>zip -r archive.zip <span class="nb">test</span>-files
<span class="nv">$ </span>star -cv <span class="nv">f</span><span class="o">=</span>output.star <span class="nb">test</span>-files
<span class="nv">$ </span>find <span class="nb">test</span>-dir | cpio -ov &gt; output.cpio
<span class="nv">$ </span>7z a archive.7z <span class="nb">test</span>-files    <span class="c"># the package name for 7z is &quot;p7zip&quot;</span>

<span class="c">####  list files in the archive ####</span>
<span class="nv">$ </span>tar -tvf file.tar
<span class="nv">$ </span>star -tv <span class="nv">f</span><span class="o">=</span>file.tar
<span class="nv">$ </span>unzip -l file.zip
<span class="nv">$ </span>cpio -t &lt; file.cpio
<span class="nv">$ </span>7z l file.7z

<span class="c">#### uncompress ####</span>
<span class="c"># tar</span>
<span class="nv">$ </span>tar xvf file.tar
<span class="nv">$ </span>tar xvzf file.tar.gz
<span class="nv">$ </span>tar xvzf file.tar.tgz
<span class="nv">$ </span>tar xvjf file.tar.bz2
<span class="nv">$ </span>tar xvjf file.tar.tbz2
<span class="c"># other formats </span>
<span class="nv">$ </span>gunzip file.**gz**    
<span class="nv">$ </span>bunzip2 file.**bz2**
<span class="nv">$ </span>uncompress file.**Z**
<span class="nv">$ </span>unzip file.zip
<span class="nv">$ </span>unrar x file.rar      <span class="c"># or &quot;$ rar x file.rar&quot;</span>
<span class="nv">$ </span>7z x file.**7z        <span class="c"># or &quot;$ 7z e file.7z**&quot;</span>
<span class="nv">$ </span>star -xv <span class="nv">f</span><span class="o">=</span>archive.star 
<span class="nv">$ </span>cpio -idmv &lt; archive.cpio
<span class="nv">$ </span>unace x file.ace
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Simple Examples of &quot;yield&quot; in Python]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/12/python_yield.html"/>
        <published>2013-12-23T23:43:00+08:00</published>
        <updated>2014-01-07T15:19:11+08:00</updated>
        <id>http://terryoy.github.io/2013/12/python_yield.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>The keyword &ldquo;yield&rdquo; in python is somewhat confusing when writing a single thread program, because it output or input a value somewhere inside the function, but you cannot tell how it does easily. So now I demonstrate two basic usages of &ldquo;yield&rdquo;, which you could consider as two patterns.</p>

<h2 id="toc_0">1. Generators</h2>
<p>All functions using &ldquo;yield&rdquo; can be called <em><strong>generators</strong></em>. When using as a generator, it outputs(returns) a value somewhere inside the function, and pause at this step until it gets the next chance of execution.</p>
<p>The general structure of a function that uses &ldquo;yield&rdquo; will be like this:</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">countdown</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="c"># **the settup part**</span>
    <span class="k">print</span> <span class="s">&quot;Do something here&quot;</span>

    <span class="c"># **the loop part**</span>
    <span class="k">while</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">n</span> <span class="c"># return a value to the call of &quot;next()&quot; function, and then wait for the next loop</span>
        <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
</pre></div>
<p>The execution in an interactive python environment is like this:</p>

<pre><code>&gt;&gt;&gt; c = countdown(10)
&gt;&gt;&gt; c.next()
Do something here
10
&gt;&gt;&gt; c.next()
9
&gt;&gt;&gt; 
...
&gt;&gt;&gt; c.next()
1
&gt;&gt;&gt; c.next()
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  StopIteration</code></pre>
<p>When the first trigger of the &ldquo;next()&rdquo; method, the instance &ldquo;c&rdquo; exectue the setup code and runs into the loop. When &ldquo;n&rdquo; is yield in the loop, the &ldquo;next()&rdquo; method gets its returning value and printed on the screen. In the next trigger of &ldquo;next()&rdquo;, it continues the loop so you don&#39;t see the setup part again. When the last value is yield, the while loop will end. So if &ldquo;next()&rdquo; method is called again, it gets a StopIteration error raised. </p>
<p>If you want to iterate the items generated by this generator, you don&#39;t need to catch the StopIteration, you could just use it also like iterating a list.</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">countdown</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">c</span><span class="p">]</span>
<span class="n">Do</span> <span class="n">something</span> <span class="n">here</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">items</span>
<span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</pre></div>

<h2 id="toc_1">2. Coroutines</h2>
<p>The example of generators is using &ldquo;yield&rdquo; like an output operation, while <em><strong>Coroutines</strong></em> use it like an input operation. Check out the below code:</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">accumulator</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="c"># don&#39;t forget to execute &quot;next()&quot; to run the setup part first</span>
    <span class="nb">sum</span> <span class="o">=</span> <span class="n">n</span> 
    <span class="k">print</span> <span class="s">&quot;init value:&quot;</span><span class="p">,</span> <span class="n">n</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span><span class="p">)</span> <span class="c"># gets a value from the method &quot;send()&quot;</span>
        <span class="nb">sum</span> <span class="o">+=</span> <span class="n">value</span>
        <span class="k">print</span> <span class="nb">sum</span> <span class="c"># now you don&#39;t use &quot;yield&quot; to return value because you want </span>
                  <span class="c"># to print out the value when &quot;send()&quot; is called, rather than to call &quot;next()&quot; again</span>
</pre></div>
<p>Execution:</p>

<pre><code>&gt;&gt;&gt; a = accumulator(0)
&gt;&gt;&gt; a.next()
init value:0
&gt;&gt;&gt; a.send(5)
5
&gt;&gt;&gt; a.send(5)
10</code></pre>
<p>In this example, you need to call &ldquo;next()&rdquo; first so that it could run to the first appearance of &ldquo;yield&rdquo;. Then, it will pause until you call &ldquo;send()&rdquo; method to input a number, so the loop continues and prints out the summarized value, and also pauses at &ldquo;yield&rdquo; in the next loop, and so on. </p>
<p>So when using &ldquo;yield&rdquo; function as coroutines, you could imagine it as a task waiting for your input, you just send the parameters to it and it will fulfill the task for you.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Python Main Args, Config, and Exception Snippets]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/12/python_main_args.html"/>
        <published>2013-12-21T15:35:00+08:00</published>
        <updated>2013-12-21T16:03:50+08:00</updated>
        <id>http://terryoy.github.io/2013/12/python_main_args.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Part 1. Below is an example showing how to use <strong>arguments</strong> in a python script. It&#39;s taken from this <a href="http://www.tutorialspoint.com/python/python_command_line_arguments.htm">example</a>.</p>
<div class="highlight"><pre><span class="c">#!/usr/bin/python</span>

<span class="kn">import</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">getopt</span>

<span class="k">def</span> <span class="nf">print_usage</span><span class="p">():</span>
    <span class="k">print</span> <span class="s">&#39;main.py -i &lt;input_file&gt; -o &lt;output_file&gt;&#39;</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">argv</span><span class="p">):</span>
    <span class="n">inputfile</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
    <span class="n">outputfile</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c"># opts is a list of returning key-value pairs, args is the options left after striped</span>
        <span class="c"># the short options &#39;hi:o:&#39;, if an option requires an input, it should be followed by a &quot;:&quot;</span>
        <span class="c"># the long options &#39;ifile=&#39; is an option that requires an input, followed by a &quot;=&quot;</span>
        <span class="n">opts</span><span class="p">,</span> <span class="n">args</span> <span class="o">=</span> <span class="n">getopt</span><span class="o">.</span><span class="n">getopt</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="s">&#39;hi:o:&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;ifile=&#39;</span><span class="p">,</span> <span class="s">&#39;ofile=&#39;</span><span class="p">])</span>
    <span class="k">except</span> <span class="n">getopt</span><span class="o">.</span><span class="n">GetoptError</span><span class="p">:</span>
        <span class="n">print_usage</span><span class="p">()</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="c"># print(args) # debug line</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">opts</span><span class="p">:</span>
        <span class="n">print_usage</span><span class="p">()</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

    <span class="c"># print arguments</span>
    <span class="k">for</span> <span class="n">opt</span><span class="p">,</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">opts</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">opt</span> <span class="o">==</span> <span class="s">&#39;-h&#39;</span><span class="p">:</span>
            <span class="n">print_usage</span><span class="p">()</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">opt</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&quot;-i&quot;</span><span class="p">,</span> <span class="s">&quot;--ifile&quot;</span><span class="p">):</span>
            <span class="n">inputfile</span> <span class="o">=</span> <span class="n">arg</span>
        <span class="k">elif</span> <span class="n">opt</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&quot;-o&quot;</span><span class="p">,</span> <span class="s">&quot;--ofile&quot;</span><span class="p">):</span>
            <span class="n">outputfile</span> <span class="o">=</span> <span class="n">arg</span>
    <span class="k">print</span> <span class="s">&quot;Input file:&quot;</span><span class="p">,</span> <span class="n">inputfile</span>
    <span class="k">print</span> <span class="s">&quot;Output file:&quot;</span><span class="p">,</span> <span class="n">outputfile</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</pre></div>
<p>Below is the example running result:</p>

<pre><code>$ ./main.py -h
main.py -i &lt;input_file&gt; -o &lt;output_file&gt;
$ ./main.py
main.py -i &lt;input_file&gt; -o &lt;output_file&gt;
$ ./main.py -i inputfile
Input file: inputfile
Output file: 
$ ./main.py -i inputfile --ofile=outputfile
Input file: inputfile
Output file: outputfile</code></pre>
<p>Part 2. Below is an example showing how to use <strong>configuration</strong> and <strong>exceptions</strong>.</p>
<div class="highlight"><pre><span class="c">#!/usr/bin/python</span>

<span class="kn">from</span> <span class="nn">ConfigParser</span> <span class="kn">import</span> <span class="n">ConfigParser</span><span class="p">,</span> <span class="n">NoOptionError</span>
<span class="kn">import</span> <span class="nn">traceback</span>

<span class="c">## The configuration is a file named &quot;config.ini&quot; with below content</span>
<span class="c"># [helloworld]</span>
<span class="c"># name = Terry</span>
<span class="c">##</span>

<span class="c"># read configuration</span>
<span class="n">config</span> <span class="o">=</span> <span class="n">ConfigParser</span><span class="p">()</span>
<span class="n">config</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s">&#39;config.ini&#39;</span><span class="p">)</span>

<span class="c"># use configuration</span>
<span class="k">print</span> <span class="s">&#39;an existing item value:&#39;</span><span class="p">,</span> <span class="s">&#39;[ name =&#39;</span><span class="p">,</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;helloworld&#39;</span><span class="p">,</span> <span class="s">&#39;name&#39;</span><span class="p">),</span> <span class="s">&#39;]&#39;</span>
<span class="k">try</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">&#39;an non-existing item value:&#39;</span><span class="p">,</span> <span class="s">&#39;[ non-exist =&#39;</span><span class="p">,</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;helloworld&#39;</span><span class="p">,</span> <span class="s">&#39;non-exist&#39;</span><span class="p">),</span> <span class="s">&#39;]&#39;</span>
<span class="k">except</span> <span class="n">NoOptionError</span><span class="p">:</span>
    <span class="c"># pass</span>
    <span class="n">traceback</span><span class="o">.</span><span class="n">print_exc</span><span class="p">()</span> <span class="c"># display exception information</span>
</pre></div>
<p>Here is the output result:</p>

<pre><code>an existing item value: [ name = Terry ]
Traceback (most recent call last):
  File &quot;./config_parser.py&quot;, line 12, in &lt;module&gt;
    print 'an non-existing item value:', '[ non-exist =', config.get('helloworld', 'non-exist'), ']'
  File &quot;/usr/lib/python2.7/ConfigParser.py&quot;, line 618, in get
    raise NoOptionError(option, section)
NoOptionError: No option 'non-exist' in section: 'helloworld'
an non-existing item value: [ non-exist =</code></pre>
<p>As you can see the line <em>&ldquo;an non-existing item value: [ non-exist = &rdquo;</em> is output belowthe exception trace information. It is because the traceback.print_exc() output to <strong>stderr</strong> while the others output to <strong>stdout</strong>, they&#39;re two separate buffers and no particular order when output to console.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Preferences for Vim]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/09/vimrc.html"/>
        <published>2013-09-23T23:16:00+08:00</published>
        <updated>2013-12-03T12:53:55+08:00</updated>
        <id>http://terryoy.github.io/2013/09/vimrc.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#vim" term="vim" label="vim" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>These are settings that to improve usage of VI text editor for various purposes.</p>
<p>Copy &amp; paste below lines to <strong><em>~/.vimrc</em></strong>:</p>

<pre><code>set smartindent
set tabstop=4
set shiftwidth=4
set expandtab</code></pre>

<ol>
<li>smartindent - Do smart autoindenting when starting a new line for C-like programs.</li>
<li>tabstop - Number of spaces that a <Tab> in the file counts for.</li>
<li>shiftwidth - Number of spaces to use for each step of (auto)indent.</li>
<li>expandtab - Spaces are used in indents with <Tab>.</li>
</ol>
<p>For color scheme preferences:</p>

<pre><code>colorscheme torte</code></pre>
<p>It is the default black/white scheme.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Useful Aliases and Commands in Linux]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2013/09/useful_alias.html"/>
        <published>2013-09-23T00:00:00+08:00</published>
        <updated>2014-11-27T15:07:12+08:00</updated>
        <id>http://terryoy.github.io/2013/09/useful_alias.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#shell" term="shell" label="shell" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Below is a list of some useful aliases, which you could add to your linux shell environment.</p>
<p>Copy and paste below content to your <strong><em>~/.bashrc</em></strong>.</p>

<!--script src="https://gist.github.com/terryoy/6374725.js"></script-->
<div class="highlight"><pre><span class="c"># open a browser and view raw html (e.g. &quot;cat some.html | viewhtml&quot;)</span>
<span class="nb">alias </span><span class="nv">viewhtml</span><span class="o">=</span><span class="s1">&#39;firefox &quot;data:text/html;charset=utf-8;base64,$(base64 -w 0 &lt;&amp;0)&quot;&#39;</span>

<span class="c"># url encode / decode</span>
<span class="nb">alias </span><span class="nv">urlencode</span><span class="o">=</span><span class="s1">&#39;python -c &quot;import sys, urllib as ul; print ul.quote_plus(sys.argv[1])&quot;&#39;</span>
<span class="nb">alias </span><span class="nv">urldecode</span><span class="o">=</span><span class="s1">&#39;python -c &quot;import sys, urllib as ul; print ul.unquote_plus(sys.argv[1])&quot;&#39;</span>

<span class="c"># url shortener</span>
<span class="nb">alias </span><span class="nv">shortenurl</span><span class="o">=</span><span class="s2">&quot;python -c \&quot;import sys, urllib as ul; print ul.urlopen(&#39;http://tinyurl.com/api-create.php?url=%s&#39; % ul.quote_plus(sys.argv[1])).readline()\&quot;&quot;</span>
</pre></div>

<h3 id="toc_0"># work with hex</h3>
<div class="highlight"><pre><span class="c"># if you want to dump a file in hex</span>
<span class="nv">$ </span>xxd -p file

<span class="c"># A Hex number convertor, convert decimal into hex(e.g. &quot;hex 34&quot; -&gt; 22)</span>
<span class="nb">alias </span><span class="nv">hex</span><span class="o">=</span><span class="s1">&#39;printf &quot;%x\n&quot;&#39;</span>
</pre></div>

<h3 id="toc_1"># mount a virtualbox disk on linux</h3>
<div class="highlight"><pre><span class="c"># before you can mount anything, install virtualbox-fuse</span>
<span class="nv">$ </span>sudo apt-get install virtualbox-fuse

<span class="c"># there are &#39;disk/&#39; folder and &#39;space/&#39; folder.</span>
<span class="c"># &#39;vdfuse -r&#39; is for read only,</span>
<span class="nv">$ </span>vdfuse -raf <span class="nv">$1</span> disk
<span class="nv">$ </span>mount disk/Partition1 space
</pre></div>

<h3 id="toc_2">Set keyboard repeat rate and delay</h3>
<div class="highlight"><pre><span class="c">#Set keyboard repeat rate and delay</span>
<span class="c"># where 220 is the delay(ms) and 40 is repeat rate(cps)</span>

<span class="c"># under X</span>
<span class="nv">$ </span>xset r rate 220 40
<span class="c"># under command line(or put it in /etc/rc.local, ~/.bashrc, ~/.bash_profile, etc.)</span>
<span class="nv">$ </span>sudo kbdrate -r 40 -d 220
</pre></div>
]]>
        </content>
    </entry>
</feed>