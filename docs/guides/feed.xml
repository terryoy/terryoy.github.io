<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Hello, World!</title>
    <link href="http://terryoy.github.io/guides/feed.xml" rel="self" />
    <link href="http://terryoy.github.io/guides/" />
    <updated>2020-02-01T10:09:36+08:00</updated>
    <id>http://terryoy.github.io/guides/</id>
    <entry>
        <title type="html"><![CDATA[How to Write a Shell Script?]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2019/07/how-to-write-a-shell-script-.html"/>
        <published>2019-07-01T18:11:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2019/07/how-to-write-a-shell-script-.html</id>
        <category scheme="http://terryoy.github.io/tag/#shell" term="shell" label="shell" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Finnally, I&#39;ve done it! Wow, it took me 3 hours to explore the ability of bash scripts.</p>
<p>I was trying to write a shell script to help me create this blog article, in an interactive way. </p>
<p>The blog articles are organized in a directory structure: <code>_content/{year}/{article-name-slug.md}</code>,  and it also has a template to write the meta info for this article, which is like:</p>

<pre><code># How to Write a Shell Script?
- date: 2019-07-01 18:11
- tags: shell
- category: guides
-------</code></pre>
<p>So the basic idea is like this:</p>

<ul>
<li>I want to create the page where I could simply input the title, tags, and category</li>
<li>the date time is generated by the script</li>
<li>the file path is determined by the information I input and the date</li>
<li>the file name is slugified</li>
<li>all the information is filled in the template</li>
<li>use vim to open the file and filled the initial content with the template</li>
</ul>
<p>All the functions I needed and searched are listed below:</p>

<ul>
<li>prompt info and read values from user input. using <code>echo</code> and <code>read</code> command</li>
<li>list the tags and categories. using <code>ls -p</code>, <code>tr</code>, <code>sort</code>, and <code>column</code></li>
<li>making the steps as functions</li>
<li>fill template file with environmental variables. using <code>cat</code>, <code>echo</code> and <code>eval</code></li>
<li>creatign temporary file to hold the generated content from the template. using <code>$RANDOM</code> env variable for a random number.</li>
<li>fill the vi editing content after entering the editor. using <code>vi &lt;filename&gt; -c &quot;read &lt;tmpfile&gt;&quot;</code></li>
</ul>
<p>So the final example of the shell script can be found <a href="https://github.com/terryoy/terryoy.github.io/blob/master/_newpage.sh">here</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Setup ARM Development Environment with QEMU]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2018/04/setup_arm_development.html"/>
        <published>2018-04-21T23:26:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2018/04/setup_arm_development.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#qemu" term="qemu" label="qemu" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Clone the kernel repository</h3>
<div class="highlight"><pre><span></span>$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git

<span class="c1"># or just download the package from the mirror</span>
$ wget https://mirror.tuna.tsinghua.edu.cn/kernel/v4.x/linux-4.4.1.tar.xz
</pre></div>

<h3 id="toc_1">2. Install the Cross Compiling Toolchain</h3>
<div class="highlight"><pre><span></span>$ sudo apt-get install gcc-arm-linux-gnueabi

<span class="c1"># another option is &quot;arm-linux-gnueabihf&quot; but we use &quot;gcc-arm-gnueabi&quot; here</span>
</pre></div>

<h3 id="toc_2">3. Make the first compile</h3>
<p>We&#39;re emulating the vexpress Cortex A9 for demo.</p>
<div class="highlight"><pre><span></span>$ <span class="nb">export</span> <span class="nv">ARCH</span><span class="o">=</span>arm  
$ <span class="nb">export</span> <span class="nv">CROSS_COMPILE</span><span class="o">=</span>arm-linux-gnueabi-  
$ make vexpress_defconfig  
$ make zImage -j8  
$ make modules -j8  
$ make dtbs
</pre></div>

<h3 id="toc_3">4. Install QEMU</h3>
<div class="highlight"><pre><span></span>$ sudo apt-get install qemu
</pre></div>

<h3 id="toc_4">5. Make Root File System</h3>

<h3 id="toc_5">5.1 busybox</h3>
<div class="highlight"><pre><span></span>$ wget http://www.busybox.net/downloads/busybox-1.25.1.tar.bz2  
$ tar xvf busybox-1.25.1.tar.bz2
$ make defconfig  
$ make <span class="nv">CROSS_COMPILE</span><span class="o">=</span>arm-linux-gnueabi-  
$ make install <span class="nv">CROSS_COMPILE</span><span class="o">=</span>arm-linux-gnueabi-
</pre></div>
<p>Then you find the executables in <code>_install</code> folder. Next we start to create the rootfs.</p>

<h3 id="toc_6">5.2 rootfs</h3>
<div class="highlight"><pre><span></span>$ sudo mkdir rootfs
$ sudo mkdir rootfs/lib 

<span class="c1"># copy busybox to rootfs</span>
$ sudo cp _install/* -r rootfs/

<span class="c1"># copy arm libs to lib</span>
<span class="c1"># sudo cp -P /usr/arm-linux-gnueabi/lib/* rootfs/lib/</span>
</pre></div>

<h3 id="toc_7">5.3 Create 4 tty devices</h3>
<div class="highlight"><pre><span></span>$ sudo mkdir -p rootfs/dev
$ sudo mknod rootfs/dev/tty1 c <span class="m">4</span> <span class="m">1</span>  
$ sudo mknod rootfs/dev/tty2 c <span class="m">4</span> <span class="m">2</span>  
$ sudo mknod rootfs/dev/tty3 c <span class="m">4</span> <span class="m">3</span>  
$ sudo mknod rootfs/dev/tty4 c <span class="m">4</span> <span class="m">4</span>
</pre></div>
<p>You can also create other folders in the image. (Reference: <a href="https://learningfromyoublog.wordpress.com/2016/04/05/131/">learningfromyoublog.wordpress.com/2016/04/05/131/</a>)</p>

<h3 id="toc_8">5.4 Make the Image</h3>
<div class="highlight"><pre><span></span><span class="c1"># creat an empty image</span>
$ dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>a9rootfs.ext3 <span class="nv">bs</span><span class="o">=</span>1M <span class="nv">count</span><span class="o">=</span><span class="m">32</span>  

<span class="c1"># format to ext3</span>
$ mkfs.ext3 a9rootfs.ext3  

<span class="c1"># copy files into the image</span>
$ sudo mkdir tmpfs  
$ sudo mount -t ext3 a9rootfs.ext3 tmpfs/ -o loop  
$ sudo cp -r rootfs/*  tmpfs/  
$ sudo umount tmpfs
</pre></div>

<h3 id="toc_9">6. Start QEMU with the Image</h3>
<div class="highlight"><pre><span></span><span class="c1"># open in current console</span>
$ qemu-system-arm -M vexpress-a9 -m 512M -dtb extra_folder/vexpress-v2p-ca9.dtb -kernel extra_folder/zImage -nographic -append <span class="s2">&quot;root=/dev/mmcblk0 rw console=ttyAMA0&quot;</span> -sd a9rootfs.ext3 

<span class="c1"># open in new window(maybe GUI)</span>
$ qemu-system-arm -M vexpress-a9 -m 512M -dtb extra_folder/vexpress-v2p-ca9.dtb -kernel extra_folder/zImage -append <span class="s2">&quot;root=/dev/mmcblk0 rw&quot;</span> -sd a9rootfs.ext3
</pre></div>
<p>Now you enter the console of the emulator system. Press <code>Ctrl+A C</code> to exit to <code>(qemu)</code> console, or <code>Ctrl+A X</code> to exit..</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Learn to Use CMake to Compile Code]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2018/01/learn-to-use-cmake.html"/>
        <published>2018-01-12T14:41:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2018/01/learn-to-use-cmake.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#programming" term="programming" label="programming" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>I&#39;m trying to use the Linux environment to develop C/C++ programs, but never really get on the path.</p>
<p>It&#39;s not the language that I don&#39;t understand, but the environment, the toolchain and how to configure a project in real life is my question. Linux have many programs developed in C/C++, but compiling them myself always out of my scope, which is blocking me from deeper understanding of Linux.</p>
<p>So here I&#39;m reading a walkthrough to help myself making a C/C++ project work.</p>
<p><strong>CMake</strong> is said to be an OS and compiler independent build system. So you first write CMake configurations in any source directories, and then it can generate a native build environment that will compile source code, create libraries, generate wrappers and build executables in arbitrary combinations.</p>

<h3 id="toc_0">0. Build Essential</h3>
<p>First of all, if you want to compile anything in Linux, you should install the <code>build-essential</code> package first.</p>
<div class="highlight"><pre><span></span>$ sudo apt install build-essential
</pre></div>
<p>It contains all the common packages to build Debian packages, such as: g++, gcc, hurd, libc, dpkg, make, etc.</p>
<p>Next step let&#39;s install the CMake package:</p>
<div class="highlight"><pre><span></span>$ sudo apt install cmake
</pre></div>

<h3 id="toc_1">1. A Hello World and a CMakeLists.txt</h3>
<p>The minimal demo has two files. </p>
<p>A <code>hello.cpp</code> source file:</p>
<div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
     <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello World&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
     <span class="k">return</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
<p>A <code>CMakeLists.txt</code> config file:</p>

<pre><code># Specify the minimum version for CMake

cmake_minimum_required(VERSION 2.8)

# Project's name
project(hello)

# Set the output folder where your program will be created
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})

# The following folder will be included
include_directories(&quot;${PROJECT_SOURCE_DIR}&quot;)

# Compile the program to hello
add_executable(hello ${PROJECT_SOURCE_DIR}/hello.cpp)</code></pre>
<p>The three lines <code>cmake_minimum_required</code>, <code>project(hello)</code>, and <code>add_executable</code> are essential.</p>
<p>Run below two commands to compile the exectuatble:</p>
<div class="highlight"><pre><span></span><span class="c1"># Generate CMake configurations</span>
$ cmake -H. -Bbuild

<span class="c1"># Build the executable</span>
$ cmake --build build -- -j3
</pre></div>

<h3 id="toc_2">References</h3>
<p><a href="https://tuannguyen68.gitbooks.io/learning-cmake-a-beginner-s-guide/content/chap1/chap1.html">Learning CMake: A Beginner&#39;s Guide</a>
<a href="https://cmake.org/cmake-tutorial/">CMake Official Tutorial</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Networking in Docker]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2018/01/networking-in-docker.html"/>
        <published>2018-01-12T11:41:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2018/01/networking-in-docker.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#docker" term="docker" label="docker" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>After installed an Ubuntu container in my docker, now I&#39;m trying to learn the networking tools in Ubuntu and Docker.</p>

<ol>
<li>Networking Tools in Ubuntu Again</li>
</ol>
<div class="highlight"><pre><span></span><span class="c1"># package for ifconfig(which is too old)</span>
$ apt install net-tools

<span class="c1"># newer package for networking</span>
$ apt install iproute2

<span class="c1"># ping command</span>
$ apt install iputils-ping

<span class="c1"># check network interface</span>
$ ifconfig
eth0      Link encap:Ethernet  HWaddr <span class="m">02</span>:42:ac:11:00:02  
          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:5956 errors:0 dropped:0 overruns:0 frame:0
          TX packets:3345 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:8376715 <span class="o">(</span><span class="m">8</span>.3 MB<span class="o">)</span>  TX bytes:186204 <span class="o">(</span><span class="m">186</span>.2 KB<span class="o">)</span>
</pre></div>

<ol>
<li>Docker Commands for Networking</li>
</ol>
<p>There are three types of networks in docker, and the <code>bridge</code> network is by default presented in all docker instances.</p>
<div class="highlight"><pre><span></span><span class="c1"># List networks in Docker</span>
$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
a6bf46c2bc44        bridge              bridge              <span class="nb">local</span>
e3826e52e7e6        host                host                <span class="nb">local</span>
08a134ed472c        none                null                <span class="nb">local</span>

<span class="c1"># Check docker&#39;s network detail</span>
$ docker network inspect bridge
<span class="o">[</span>
    <span class="o">{</span>
        <span class="s2">&quot;Name&quot;</span>: <span class="s2">&quot;bridge&quot;</span>,
        <span class="s2">&quot;Id&quot;</span>: <span class="s2">&quot;a6bf46c2bc44dc16523ac28edd5524fccef79b779ae52602c868001763cd21c4&quot;</span>,
        <span class="s2">&quot;Created&quot;</span>: <span class="s2">&quot;2018-01-09T11:36:15.168104899Z&quot;</span>,
        <span class="s2">&quot;Scope&quot;</span>: <span class="s2">&quot;local&quot;</span>,
        <span class="s2">&quot;Driver&quot;</span>: <span class="s2">&quot;bridge&quot;</span>,
        <span class="s2">&quot;EnableIPv6&quot;</span>: false,
        <span class="s2">&quot;IPAM&quot;</span>: <span class="o">{</span>
            <span class="s2">&quot;Driver&quot;</span>: <span class="s2">&quot;default&quot;</span>,
            <span class="s2">&quot;Options&quot;</span>: null,
            <span class="s2">&quot;Config&quot;</span>: <span class="o">[</span>
                <span class="o">{</span>
                    <span class="s2">&quot;Subnet&quot;</span>: <span class="s2">&quot;172.17.0.0/16&quot;</span>,
                    <span class="s2">&quot;Gateway&quot;</span>: <span class="s2">&quot;172.17.0.1&quot;</span>
                <span class="o">}</span>
            <span class="o">]</span>
        <span class="o">}</span>,
        <span class="s2">&quot;Internal&quot;</span>: false,
        <span class="s2">&quot;Attachable&quot;</span>: false,
        <span class="s2">&quot;Ingress&quot;</span>: false,
        <span class="s2">&quot;ConfigFrom&quot;</span>: <span class="o">{</span>
            <span class="s2">&quot;Network&quot;</span>: <span class="s2">&quot;&quot;</span>
        <span class="o">}</span>,
        <span class="s2">&quot;ConfigOnly&quot;</span>: false,
        <span class="s2">&quot;Containers&quot;</span>: <span class="o">{</span>
            <span class="s2">&quot;cfc178841a7940b6cbf43c8e0dbd7fb6672af3b3e8a9020632c75352685ec685&quot;</span>: <span class="o">{</span>
                <span class="s2">&quot;Name&quot;</span>: <span class="s2">&quot;ubuntu&quot;</span>,
                <span class="s2">&quot;EndpointID&quot;</span>: <span class="s2">&quot;8c14adc4a61eacdc8bd2b261d2af4f17c7a966d9fcfb8c61b5f9284fa2eded45&quot;</span>,
                <span class="s2">&quot;MacAddress&quot;</span>: <span class="s2">&quot;02:42:ac:11:00:02&quot;</span>,
                <span class="s2">&quot;IPv4Address&quot;</span>: <span class="s2">&quot;172.17.0.2/16&quot;</span>,
                <span class="s2">&quot;IPv6Address&quot;</span>: <span class="s2">&quot;&quot;</span>
            <span class="o">}</span>
        <span class="o">}</span>,
        <span class="s2">&quot;Options&quot;</span>: <span class="o">{</span>
            <span class="s2">&quot;com.docker.network.bridge.default_bridge&quot;</span>: <span class="s2">&quot;true&quot;</span>,
            <span class="s2">&quot;com.docker.network.bridge.enable_icc&quot;</span>: <span class="s2">&quot;true&quot;</span>,
            <span class="s2">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span>: <span class="s2">&quot;true&quot;</span>,
            <span class="s2">&quot;com.docker.network.bridge.host_binding_ipv4&quot;</span>: <span class="s2">&quot;0.0.0.0&quot;</span>,
            <span class="s2">&quot;com.docker.network.bridge.name&quot;</span>: <span class="s2">&quot;docker0&quot;</span>,
            <span class="s2">&quot;com.docker.network.driver.mtu&quot;</span>: <span class="s2">&quot;1500&quot;</span>
        <span class="o">}</span>,
        <span class="s2">&quot;Labels&quot;</span>: <span class="o">{}</span>
    <span class="o">}</span>
<span class="o">]</span>
</pre></div>

<h3 id="toc_0">3. Internal Networking</h3>
<p>By default, the container is connected within a local network(172.17.0.1/16) bridged to the host machine, host can access the net gateway ip <code>172.17.0.1</code>. The contianers should be able to access each other in the local network provided by this net gateway. When you use the command <code>docker network inspect bridge</code>, you could see the list of containers and their IPs assigned.</p>

<h4 id="toc_1">3.1 Accessing container&#39;s service by port mapping</h4>
<p>Some containers as Nginx provide a service through a local port, in which case you could use port forwarding by your local IP. For example, you can check this port forwarding by <code>docker port</code> command or just listing the containers:</p>
<div class="highlight"><pre><span></span><span class="c1"># list ports for container</span>
$ docker port nginx
<span class="m">80</span>/tcp -&gt; <span class="m">0</span>.0.0.0:5000

<span class="c1"># list containers</span>
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                   PORTS                  NAMES
cfc178841a79        ubuntu              <span class="s2">&quot;/bin/bash&quot;</span>              <span class="m">3</span> weeks ago         Up <span class="m">4</span> hours                                      ubuntu
0200f61f5d65        nginx               <span class="s2">&quot;nginx -g &#39;daemon of…&quot;</span>   <span class="m">2</span> months ago        Up <span class="m">3</span> minutes             <span class="m">0</span>.0.0.0:5000-&gt;80/tcp   webserver
</pre></div>
<p>Now you can see there is a port mapping from <code>host:5000</code> to <code>container:80</code>.</p>
<p>By default, no port is opened for a container to host, you need to specify the port mapping at <code>docker run</code> command with <code>-p</code>.</p>

<pre><code># `-d` is when you needed it run as a daemon.
$ docker run nginx -d -p 5000:80 --name nginx nginx</code></pre>
<p>To open a port mapping for an existing container is very tricky. It is often said that you need to create another container instance based on the current just to open a port.</p>

<h4 id="toc_2">3.2 Creating a Network</h4>
<p>Now let&#39;s try something advanced. Let&#39;s create the different types of network one by one.</p>

<h5 id="toc_3">3.2.1 Bridge Network</h5>
<p>By default, the network you created will be a <code>bridged</code> network. You can add container to the network later. It creates a subnet and open only specific ports to the host to access service in the subnet, like NAT.</p>
<div class="highlight"><pre><span></span>$ docker network create gamezone
$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
0fe8bfe5222d        gamezone            bridge              <span class="nb">local</span>

<span class="c1"># if you want to remove the bridge network</span>
$ docker network rm gamezone
</pre></div>
<p>Now let&#39;s create an Ubuntu container called &ldquo;gamecenter&rdquo; which connects to the gamezone network and maps port 5000 to the docker host&#39;s 15000.</p>
<div class="highlight"><pre><span></span>$ docker create --name gamecenter <span class="se">\</span>
        --network gamezone <span class="se">\</span>
        --publish <span class="m">15000</span>:5000 <span class="se">\</span>
        -t -i ubuntu /bin/bash

$ docker container ls -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS                     NAMES
8cf4e293aae9        ubuntu              <span class="s2">&quot;/bin/bash&quot;</span>              <span class="m">10</span> minutes ago      Up <span class="m">10</span> minutes               <span class="m">0</span>.0.0.0:15000-&gt;5000/tcp   gamecenter

$ docker network inspect gamezone
<span class="o">[</span>
    <span class="o">{</span>
        <span class="s2">&quot;Name&quot;</span>: <span class="s2">&quot;gamezone&quot;</span>,
        <span class="s2">&quot;Id&quot;</span>: <span class="s2">&quot;9b6417528a0e4a37ab9818e185a8046af06b3a9ae0eba40a2e494087676b70c9&quot;</span>,
        <span class="s2">&quot;Created&quot;</span>: <span class="s2">&quot;2018-06-09T15:24:43.6288314Z&quot;</span>,
        <span class="s2">&quot;Scope&quot;</span>: <span class="s2">&quot;local&quot;</span>,
        <span class="s2">&quot;Driver&quot;</span>: <span class="s2">&quot;bridge&quot;</span>,
        <span class="s2">&quot;EnableIPv6&quot;</span>: false,
        <span class="s2">&quot;IPAM&quot;</span>: <span class="o">{</span>
            <span class="s2">&quot;Driver&quot;</span>: <span class="s2">&quot;default&quot;</span>,
            <span class="s2">&quot;Options&quot;</span>: <span class="o">{}</span>,
            <span class="s2">&quot;Config&quot;</span>: <span class="o">[</span>
                <span class="o">{</span>
                    <span class="s2">&quot;Subnet&quot;</span>: <span class="s2">&quot;172.18.0.0/16&quot;</span>,
                    <span class="s2">&quot;Gateway&quot;</span>: <span class="s2">&quot;172.18.0.1&quot;</span>
                <span class="o">}</span>
            <span class="o">]</span>
        <span class="o">}</span>,
        <span class="s2">&quot;Internal&quot;</span>: false,
        <span class="s2">&quot;Attachable&quot;</span>: false,
        <span class="s2">&quot;Ingress&quot;</span>: false,
        <span class="s2">&quot;ConfigFrom&quot;</span>: <span class="o">{</span>
            <span class="s2">&quot;Network&quot;</span>: <span class="s2">&quot;&quot;</span>
        <span class="o">}</span>,
        <span class="s2">&quot;ConfigOnly&quot;</span>: false,
        <span class="s2">&quot;Containers&quot;</span>: <span class="o">{</span>
            <span class="s2">&quot;8cf4e293aae932693f6769eea08665306485b17018999d8725f14b659e51c919&quot;</span>: <span class="o">{</span>
                <span class="s2">&quot;Name&quot;</span>: <span class="s2">&quot;gamecenter&quot;</span>,
                <span class="s2">&quot;EndpointID&quot;</span>: <span class="s2">&quot;6ca3d79c633520dbee752ab6b462404aa8507f8eb9f2b2cf840de2d3322d27bb&quot;</span>,
                <span class="s2">&quot;MacAddress&quot;</span>: <span class="s2">&quot;02:42:ac:12:00:02&quot;</span>,
                <span class="s2">&quot;IPv4Address&quot;</span>: <span class="s2">&quot;172.18.0.2/16&quot;</span>,
                <span class="s2">&quot;IPv6Address&quot;</span>: <span class="s2">&quot;&quot;</span>
            <span class="o">}</span>
        <span class="o">}</span>,
        <span class="s2">&quot;Options&quot;</span>: <span class="o">{}</span>,
        <span class="s2">&quot;Labels&quot;</span>: <span class="o">{}</span>
    <span class="o">}</span>
<span class="o">]</span>

$ docker start gamecenter
$ docker attach gamecenter
$ ifconfig
eth0      Link encap:Ethernet  HWaddr <span class="m">02</span>:42:ac:12:00:02  
          inet addr:172.18.0.2  Bcast:172.18.255.255  Mask:255.255.0.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:20872 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8684 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:28266802 <span class="o">(</span><span class="m">28</span>.2 MB<span class="o">)</span>  TX bytes:476241 <span class="o">(</span><span class="m">476</span>.2 KB<span class="o">)</span>
</pre></div>
<p>You can notice that the container &ldquo;gamecenter&rdquo; is running in the subnet of <code>172.18.0.1</code> currently. And we have open a port <code>15000</code> on the host, to map to gamecenter&#39;s port <code>5000</code>.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Setup Arm Development Environment]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2017/12/setup_arm_development.html"/>
        <published>2017-12-31T00:00:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2017/12/setup_arm_development.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#misc" term="misc" label="misc" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Clone the kernel repository</h3>
<div class="highlight"><pre><span></span>$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git

<span class="c1"># or just download the package from the mirror</span>
$ wget https://mirror.tuna.tsinghua.edu.cn/kernel/v4.x/linux-4.4.1.tar.xz
</pre></div>

<h3 id="toc_1">2. Install the Cross Compiling Toolchain</h3>
<div class="highlight"><pre><span></span>$ sudo apt-get install gcc-arm-linux-gnueabi

<span class="c1"># another option is &quot;arm-linux-gnueabihf&quot; but we use &quot;gcc-arm-gnueabi&quot; here</span>
</pre></div>

<h3 id="toc_2">3. Make the first compile</h3>
<p>We&#39;re emulating the vexpress Cortex A9 for demo.</p>
<div class="highlight"><pre><span></span>$ <span class="nb">export</span> <span class="nv">ARCH</span><span class="o">=</span>arm  
$ <span class="nb">export</span> <span class="nv">CROSS_COMPILE</span><span class="o">=</span>arm-linux-gnueabi-  
$ make vexpress_defconfig  
$ make zImage -j8  
$ make modules -j8  
$ make dtbs
</pre></div>

<h3 id="toc_3">4. Install QEMU</h3>
<div class="highlight"><pre><span></span>$ sudo apt-get install qemu
</pre></div>

<h3 id="toc_4">5. Make Root File System</h3>

<h3 id="toc_5">5.1 busybox</h3>
<div class="highlight"><pre><span></span>$ wget http://www.busybox.net/downloads/busybox-1.25.1.tar.bz2  
$ tar xvf busybox-1.25.1.tar.bz2
$ make defconfig  
$ make <span class="nv">CROSS_COMPILE</span><span class="o">=</span>arm-linux-gnueabi-  
$ make install <span class="nv">CROSS_COMPILE</span><span class="o">=</span>arm-linux-gnueabi-
</pre></div>
<p>Then you find the executables in <code>_install</code> folder. Next we start to create the rootfs.</p>

<h3 id="toc_6">5.2 rootfs</h3>
<div class="highlight"><pre><span></span>$ sudo mkdir rootfs
$ sudo mkdir rootfs/lib 

<span class="c1"># copy busybox to rootfs</span>
$ sudo cp _install/* -r rootfs/

<span class="c1"># copy arm libs to lib</span>
<span class="c1"># sudo cp -P /usr/arm-linux-gnueabi/lib/* rootfs/lib/</span>
</pre></div>

<h3 id="toc_7">5.3 Create 4 tty devices</h3>
<div class="highlight"><pre><span></span>$ sudo mkdir -p rootfs/dev
$ sudo mknod rootfs/dev/tty1 c <span class="m">4</span> <span class="m">1</span>  
$ sudo mknod rootfs/dev/tty2 c <span class="m">4</span> <span class="m">2</span>  
$ sudo mknod rootfs/dev/tty3 c <span class="m">4</span> <span class="m">3</span>  
$ sudo mknod rootfs/dev/tty4 c <span class="m">4</span> <span class="m">4</span>
</pre></div>
<p>You can also create other folders in the image. (Reference: <a href="https://learningfromyoublog.wordpress.com/2016/04/05/131/">learningfromyoublog.wordpress.com/2016/04/05/131/</a>)</p>

<h3 id="toc_8">5.4 Make the Image</h3>
<div class="highlight"><pre><span></span><span class="c1"># creat an empty image</span>
$ dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>a9rootfs.ext3 <span class="nv">bs</span><span class="o">=</span>1M <span class="nv">count</span><span class="o">=</span><span class="m">32</span>  

<span class="c1"># format to ext3</span>
$ mkfs.ext3 a9rootfs.ext3  

<span class="c1"># copy files into the image</span>
$ sudo mkdir tmpfs  
$ sudo mount -t ext3 a9rootfs.ext3 tmpfs/ -o loop  
$ sudo cp -r rootfs/*  tmpfs/  
$ sudo umount tmpfs
</pre></div>

<h3 id="toc_9">6. Start QEMU with the Image</h3>
<div class="highlight"><pre><span></span><span class="c1"># open in current console</span>
$ qemu-system-arm -M vexpress-a9 -m 512M -dtb extra_folder/vexpress-v2p-ca9.dtb -kernel extra_folder/zImage -nographic -append <span class="s2">&quot;root=/dev/mmcblk0 rw console=ttyAMA0&quot;</span> -sd a9rootfs.ext3 

<span class="c1"># open in new window(maybe GUI)</span>
$ qemu-system-arm -M vexpress-a9 -m 512M -dtb extra_folder/vexpress-v2p-ca9.dtb -kernel extra_folder/zImage -append <span class="s2">&quot;root=/dev/mmcblk0 rw&quot;</span> -sd a9rootfs.ext3
</pre></div>
<p>Now you enter the console of the emulator system. Press <code>Ctrl+A C</code> to exit to <code>(qemu)</code> console, or <code>Ctrl+A X</code> to exit..</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Basic Usage for Docker]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2017/11/docker-basic.html"/>
        <published>2017-11-06T16:12:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2017/11/docker-basic.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#docker" term="docker" label="docker" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Just to keep some notes when started to use docker for my development projects.</p>

<h3 id="toc_0">0. Get Started</h3>
<p>For my mac, download the .dmg file from official web site. Then it will run a program with a task icon in the top bar.</p>
<p>After the program has been initialized, you can open a terminal and try a few commands:</p>
<div class="highlight"><pre><span></span><span class="c1"># check versions</span>
$ docker --version
$ docker-compose --version
$ docker-machine --version

<span class="c1"># Current images</span>
$ docker images

<span class="c1"># Running instances</span>
$ docker ps
</pre></div>

<h3 id="toc_1">1. First Instance</h3>
<p>The docker official Hello World image is small enough, which you can try as your first instance.</p>
<div class="highlight"><pre><span></span>$ docker run hello-world
</pre></div>
<p>The image does not exist locally currently, but docker will continue to try downloading it and then run it.</p>
<p>Then, you wil see the image locally.</p>
<div class="highlight"><pre><span></span>$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hello-world         latest              725dcfab7d63        <span class="m">2</span> days ago          <span class="m">1</span>.84kB
</pre></div>
<p>However, the container for this image is not visible in the list because <strong>the process has existed</strong>. You need to use a <code>-a</code> parameter to see it:</p>
<div class="highlight"><pre><span></span>$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES
c32eac048fda        hello-world         <span class="s2">&quot;/hello&quot;</span>            <span class="m">5</span> minutes ago       Exited <span class="o">(</span><span class="m">0</span><span class="o">)</span> <span class="m">5</span> minutes ago                       cranky_shaw
</pre></div>

<h3 id="toc_2">2. Server Instance</h3>
<p>The Hello World container doesn&#39;t do anything. If you want to try something interesting, try the <a href="https://docs.docker.com/docker-for-mac/#explore-the-application-and-run-examples">nginx image</a> instead.</p>
<div class="highlight"><pre><span></span>$ docker run -d -p <span class="m">8001</span>:80 --name webserver1 nginx
</pre></div>
<p>I choose a different port for the server, just to show how the port mapping is handled. When you check the instance with <code>docker ps</code>, you can see the image name, instance name, and the port mapping and get the meaning. When the container is up, you can access <code>http://localhost:8001/</code> to see the nginx home page.</p>
<div class="highlight"><pre><span></span>$ docker ps 
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                  NAMES
6f6ba1d3f285        nginx               <span class="s2">&quot;nginx -g &#39;daemon ...&quot;</span>   About a minute ago   Up About a minute   <span class="m">0</span>.0.0.0:8001-&gt;80/tcp   webserver1

$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              40960efd7b8f        <span class="m">38</span> hours ago        108MB
hello-world         latest              725dcfab7d63        <span class="m">2</span> days ago          <span class="m">1</span>.84kB
</pre></div>
<p>A good point is that you can see how much disk usage every image uses. Now you can stop the service, or remove the unused resources by commands.</p>
<div class="highlight"><pre><span></span><span class="c1"># container life cycle methods</span>
$ docker stop webserver1
$ docker start webserver1
$ docker restart webserver1


<span class="c1"># remove a container</span>
$ docker rm webserver1

<span class="c1"># remove an image</span>
$ docker rmi hello-world
</pre></div>
<p>For server instance like Ubuntu, you need an interactive shell to work with it, so the command will be a little bit different:</p>

<pre><code># start a new container named 'ubuntu'
$ docker run --name ubuntu -ti ubuntu-core

# run an existing container
$ docker container start -i ubuntu

# attach console to a server if it has started without interactive environment
$ docker container start ubuntu
$ docker attach ubuntu

# If you want to detach from a server without stopping it
# use `ctrl-p ctrl-q` key sequence</code></pre>
<p>You may wonder the file size of each containers, you can checkt it by <code>docker ps -s</code>. You can see a ubuntu core only uses very small space with the minimal setup.</p>
<div class="highlight"><pre><span></span>$ docker ps -s
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES               SIZE
070a6e845653        ubuntu              <span class="s2">&quot;/bin/bash&quot;</span>              About an hour ago   Up About an hour                           ubuntu              <span class="m">96</span>.7MB <span class="o">(</span>virtual 219MB<span class="o">)</span>
0200f61f5d65        nginx               <span class="s2">&quot;nginx -g &#39;daemon ...&quot;</span>   <span class="m">2</span> hours ago         Up <span class="m">2</span> hours          <span class="m">0</span>.0.0.0:5000-&gt;80/tcp   webserver           2B <span class="o">(</span>virtual 108MB<span class="o">)</span>
</pre></div>

<h3 id="toc_3">3. Other Settings</h3>
<p>There are some Docker preferences also mentioned in the Get Started guide, which I should make some notes here:</p>

<ul>
<li><strong>Disk Image Location</strong>. on Mac, it is stored in a file called &ldquo;Docker.qcow2&rdquo; somewhere in ~/Library, and all the containers are store within this image. You can move it somewhere else.</li>
<li><strong>Experimental features</strong>. It is not recommended for production environment, then I wonder why it is turned on by default on Mac.</li>
<li>*<em>Registry, Configuration, and Certificates for the Daemon *</em>, use it when you needed.</li>
</ul>

<h4 id="toc_4">3.1 Download Images by Tags</h4>
<div class="highlight"><pre><span></span><span class="c1"># Download images/repos from registry</span>
$ docker pull &lt;image&gt;:&lt;tag&gt;

<span class="c1"># Example of getting a core ubuntu system</span>
$ docker pull ubuntu:xenial
$ docker run --name ubuntu -ti ubuntu
</pre></div>

<h3 id="toc_5">4. Docker for Mac vs Docker Toolbox</h3>
<p>Docker Toolbox is also installed by the .dmg installation. The programs include <code>docker-compose</code> and <code>docker-machine</code>.</p>

<ul>
<li>Docker for Mac is a Mac native  application, you get only one VM, and it is managed by Docker for Mac. The VM is used with a lightweight solution called HyperKit.</li>
<li>Using Dokcker Toolbox, you can set up one or more VM and manage them.</li>
</ul>

<h3 id="toc_6">5. Docker Architecture</h3>
<p>The Docker architecture can split into 3 parts:</p>

<ul>
<li>Docket Client, the <code>docker</code> cli tools for user to interact with docker daemon with Docker API.</li>
<li>Docker Host, the service daemon <code>dockerd</code> listen for Docker API request and perform all kinds of management tasks about images, containers, networks, and volumns.</li>
<li>Docker Registry, a cloud service which stores Docker images, such as Docker Hub and Docker Cloud(both are public registries).</li>
</ul>

<h4 id="toc_7">5.1 Docker Objects</h4>

<ul>
<li>Image, a read-only template with instructions for creating Docker container.</li>
<li>Container, an instance of an image, with network, file system, etc. attached. You can create, delete, stop, resume containers.</li>
<li>Service, allow you to scale containers across Docker daemons.</li>
</ul>

<h4 id="toc_8">5.2 The Underlying technology</h4>

<ul>
<li>Namespaces. When you run a container, Docker create a set of namespaces for the container, which provide a layer of isolation. The namespaces includes:

<ul>
<li><code>pid</code> for process</li>
<li><code>net</code> for network interfaces</li>
<li><code>ipc</code> for interprocess communication</li>
<li><code>mnt</code> for file system</li>
<li><code>uts</code> for kernel and version identifiers (Unix Timeshare System)</li>
</ul></li>
<li>Control Groups. A <code>cgroup</code> limits an application to a specific set of resources, and allow Docker Engine to share hardware resources to containers with optionally limits and constraints.</li>
<li>Container Format. A combination of namespaces, control groups, and UnionFS, packed into a Wrapper. The default format is <code>libcontainer</code>.</li>
</ul>
<p>Refs:
<a href="https://docs.docker.com/engine/docker-overview/#docker-architecture">Docker Architecture</a>
<a href="https://store.docker.com/">Docker Store</a> is a market where you can distribute your images.</p>

<h3 id="toc_9">6. Developing Apps with Docker</h3>
<p>It&#39;s easy to setup Docker to deploy with your app. All you need to do is to add a <code>Dockerfile</code> in your source folder and then build the image. The official example demonstrate how a small flask app is built with Docker.</p>

<h4 id="toc_10">6.1 First time image</h4>
<p>I summarize the steps as below:</p>

<ul>
<li>Go to docker <a href="https://hub.docker.com/_/python/">hub</a> to find a target python image. It already has all kinds of  Dockerfile template for you to copy.</li>
<li>Create a local copy of the Docker file. Make sure you understand the template and knows what to modify according to your app.</li>
<li>Write a flask <code>app.py</code> and a <code>requirements.txt</code> as usual.</li>
<li>Build the docker image and then run with it.</li>
</ul>
<div class="highlight"><pre><span></span><span class="c1"># prepare the source files(...skipped here)</span>
$ ls
Dockerfile    app.py      requirements.txt

<span class="c1"># build the image</span>
$ docker build -t slim-flask .

<span class="c1"># create and run the container</span>
$ docker run -p <span class="m">4000</span>:80 slim-flask
 * Running on http://0.0.0.0:80/ <span class="o">(</span>Press CTRL+C to quit<span class="o">)</span>
</pre></div>
<p>The result will be:</p>

<ul>
<li>Only a Dockerfile is added to your source, and others are still remain</li>
<li>A Python docker image is downloaded, which takes the size of 156MB or 691MB depends on if you choose the &ldquo;slim&rdquo; version.</li>
<li>A flask image for your app is genenrated, which contains the content from the original python image, the pip installed packages from requirements, and your source files. So the size is slightly bigger than the python image.</li>
</ul>
<div class="highlight"><pre><span></span>$ docker images 
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
slim-flask          latest              3032f935f40c        <span class="m">10</span> seconds ago      166MB
python              slim                a79297999298        <span class="m">45</span> hours ago        156MB
</pre></div>

<h4 id="toc_11">6.2 Create image from a container</h4>
<p>However, sometimes you want to make configurations inside a container and want to save it as an image. You can do that:</p>
<div class="highlight"><pre><span></span>$ docker container commit <span class="o">[</span>options<span class="o">]</span> CONTAINER <span class="o">[</span>repository:<span class="o">[</span>TAG<span class="o">]]</span>

<span class="c1"># example</span>
$ docker container commit ubuntu ubuntu-image
</pre></div>

<h4 id="toc_12">6.3 Publish docker image</h4>
<p>Use it when it is needed.</p>
<div class="highlight"><pre><span></span>$ docker login             <span class="c1"># Log in this CLI session using your Docker credentials</span>
$ docker tag &lt;image&gt; username/repository:tag  <span class="c1"># Tag &lt;image&gt; for upload to registry</span>
$ docker push username/repository:tag            <span class="c1"># Upload tagged image to registry</span>
$ docker run username/repository:tag                   <span class="c1"># Run image from a registry</span>
</pre></div>

<h3 id="toc_13">7. Docker mirrors</h3>

<ul>
<li>Docker(Official), <code>--registry-mirror=https://registry.docker-cn.com</code></li>
<li>Netease, <a href="http://hub-mirror.c.163.com">hub-mirror.c.163.com</a></li>
<li>USTC, <a href="https://docker.mirrors.ustc.edu.cn">docker.mirrors.ustc.edu.cn</a></li>
<li>Daocloud &amp; Alicloud, need registration, and Alicloud needs an dev platform account.</li>
</ul>
<p><a href="https://ieevee.com/tech/2016/09/28/docker-mirror.html">source</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Usage for Redis on Linux]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2017/03/linux-redis-usage.html"/>
        <published>2017-03-10T22:20:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2017/03/linux-redis-usage.html</id>
        <category scheme="http://terryoy.github.io/tag/#database" term="database" label="database" />
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">0. Setup</h3>
<div class="highlight"><pre><span></span>$ sudo apt-get install redis-server

<span class="c1"># login redis</span>
$ redis-cli
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Frontend Workflow Toolbox Summary]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/09/frontend-workflow-summary.html"/>
        <published>2016-09-18T23:45:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2016/09/frontend-workflow-summary.html</id>
        <category scheme="http://terryoy.github.io/tag/#frontend" term="frontend" label="frontend" />
        <category scheme="http://terryoy.github.io/tag/#study" term="study" label="study" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>I&#39;m working my job as a frontend developer currently. So I will do some research and write about the tools I&#39;ve been using to develop Javasript frontend projects.</p>

<h3 id="toc_0">1. CSS</h3>

<h3 id="toc_1">2. Javascript</h3>

<h4 id="toc_2">2.1 Browserify</h4>
<p>Uses the same module system as nodejs that can compile, build, and pack javascript modules in node-flavoured CommonJS way for browser. You can manage frontend dependencies with npm, using <code>require()</code> method to import, and &ldquo;module.exports&rdquo; to export, just like the way nodejs does.</p>
<p>When compiling, browserify will start with an entry file(e.g. &#39;./app.js&#39;), then find the whole <code>abstract syntax tree</code> of the file by static analysis, and pack all the related content into one files.</p>
<p>In order to make node modules more compatible with browser side, browserify also provides many <a href="https://github.com/substack/browserify-handbook#builtins">builtins modules</a> such as <code>events</code>, <code>os</code>, <code>querystring</code>, etc.</p>
<p>The best part of browserify is that providing the static analysis and compiling platform, you can also have customized transformers for files other than the standard JS. This enables compiling coffee script or other favors, and also other plugins such as code coverage, in a pipe streaming way. </p>
<p>In bundling, browserify has two functions: </p>

<ol>
<li><code>ignore</code>, making a stub definition for some methods only available for node-specific modules</li>
<li><code>exclude</code>, to separate files in different bundle, so don&#39;t pack the specific files</li>
</ol>
<p>Reference: <a href="https://github.com/substack/browserify-handbook#introduction">github.com/substack/browserify-handbook#introduction</a></p>

<h4 id="toc_3">2.2 Gulp</h4>
<p>If you want to do something quick and dirty, just checkout the Gulp Recipes and copy the the code you want. The Recipes have prepare many examples of small tasks for you to reference.</p>
<p>References:</p>

<ul>
<li>Gulp:  <a href="https://github.com/gulpjs/gulp">github.com/gulpjs/gulp</a></li>
<li>Gulp + Browserify Guide: <a href="https://www.viget.com/articles/gulp-browserify-starter-faq">www.viget.com/articles/gulp-browserify-starter-faq</a></li>
<li>Gulp Recipes: <a href="https://github.com/gulpjs/gulp/tree/master/docs/recipes">github.com/gulpjs/gulp/tree/master/docs/recipes</a></li>
<li>Principles of Gulp Plugin: <a href="https://github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/README.md">github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/README.md</a></li>
</ul>

<h4 id="toc_4">2.3 Babel</h4>
<p>The language transfrm platform and the cutting edge of ES(ECMAScript/Javascript) standard. It can transform ES6(ES2015), ES7(ES2016) scripts to compatible ES5. So you can use it as a <code>transformer</code> in browserify and compile the files you have written in ES6, etc. The official web site says the main features about it:</p>

<ul>
<li>Babel Presets,</li>
<li>Babel Polyfill, new globals such as Promise or new native methods. </li>
<li>JSX and Flow support</li>
</ul>
<p>References:</p>

<ul>
<li>ES6: <a href="https://github.com/rse/es6-features">github.com/rse/es6-features</a></li>
<li>Babel: <a href="http://babeljs.io/">babeljs.io/</a></li>
<li>Babel Plugins(Presets, Stage-X, and Transform Plugins): <a href="http://babeljs.io/docs/plugins/">babeljs.io/docs/plugins/</a> </li>
</ul>

<h4 id="toc_5">2.4  Webpack</h4>

<h3 id="toc_6">3. Others</h3>

<h4 id="toc_7">3.1 Coffee Script</h4>

<h4 id="toc_8">3,2 Type Script</h4>

<h3 id="toc_9">4. Vocabulary</h3>
<p>There are some terms in web frontend development that is not meaning obviously, so I collect some of them here.</p>

<ul>
<li><p><a href="https://en.wikipedia.org/wiki/Polyfill"><strong>Polyfill</strong></a> - a polyfill is cod e that implements a feature on web browsers that do <em>not</em> support it. It is a <em>shim</em> for a browser API.</p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Shim_(computing)"><strong>Shim</strong></a> - A small library that transparently intercepts API calls. This term can be  commonly used to support an old API in a newer environment, or a new API in an older environment, or running programs on a different platform than they were developed for.</p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Glob_(programming"><strong>glob</strong></a>) - A pattern that specifies a set of files with wildcard characters. It is originally a program <code>/etc/glob</code> that look for files by patterns, then it is used in a lof of libraries in many language. The original word is short for &#39;global command&#39;.</p></li>
</ul>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Put Linux into Old PC - (3) Localize the Language Environment]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/06/put-linux-into-old-pc-3-localization.html"/>
        <published>2016-06-28T21:03:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2016/06/put-linux-into-old-pc-3-localization.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#study" term="study" label="study" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">Part 3. Localize the language environment</h3>
<p>It is very easy to support the multi-language environment if you&#39;re installing the normal Linux desktop. However, it takes a few steps if you want to try the manual way. To make it more challenging, I would like to add Japanese support(the second foreign language I&#39;m going to learn) together with Chinese support which is my mother language.</p>
<p>The job to enable this multi-language environment includes three parts:</p>

<ul>
<li>Able to view the Asian characters,</li>
<li>Able to input the Asian characters,</li>
<li>The user interface are translated into the familiar language. (However, I might prefer an English environment just for working~)</li>
</ul>

<h4 id="toc_1">3.1 Enabling the Input Method</h4>
<p>Now I want to enable the input method at first, because it enable me to try enter other characters. There are several approaches to support multi-language input method, such as <code>SCIM</code>, <code>ibus</code>, and <code>uim</code>. The currently recommendation is <strong>ibus</strong>. There are several popular alternatives for both Japanese and Chinese input methods. <code>Anthy</code> and <code>mozc</code> are for Japanese, and <code>pinyin</code>, <code>sunpinyin</code> and <code>google-pinyin</code> are for Chinese(let&#39;s hope that Sogou Pinyin is joining this competition~). You can choose as you prefer, but I will first install only two basic choices.</p>
<div class="highlight"><pre><span></span><span class="c1"># Install Anthy and Pinyin</span>
$ sudo apt-get install ibus-anthy ibus-pinyin

<span class="c1"># Setup the configurations for the first time (you may need to manually add the input method in the enabled list)</span>
<span class="c1"># (for input method config)</span>
$ im-config
<span class="c1"># (for ibus config)</span>
$ ibus-setup
</pre></div>
<p>Be sure to change the method switching keyboard shortcuts to &ldquo;Ctrl+Space&rdquo;, otherwise you may not correctly enable it(by default, it uses &ldquo;Super+Space&rdquo; to switch between but I have no &ldquo;Super&rdquo; key on my keyboard).</p>
<p>After all the steps above, the ibus input method is still not enabled at start up, which means you need to manually start the daemon by executing &ldquo;ibus-setup&rdquo;. However, no doubt that I will fix this soon.</p>
<p>To enable things at X start up, you need to put commands in <code>~/.xprofile</code> or <code>~/.xinitrc</code>, depends on the windows manager requirements. <code>~/.xprofile</code> is often used before windows manager start up, while <code>~/.xinitrc</code> is used by &ldquo;initx&rdquo; and its frontend &ldquo;startx&rdquo; to initialize the X window manager(remember we put &ldquo;exec openbox-session&rdquo; in this file previously?). The <code>ibus-daemon</code> program starts the ibus daemon server, so if I want to start ibus when X starts, I will put it in the ~/.xinitrc file. <a href="#ref">[2]</a></p>
<div class="highlight"><pre><span></span>$ vi ~/.xinitrc
<span class="c1"># (add at the end of the file)</span>
ibus-daemon -drx
</pre></div>
<p>You can check out what the part of &ldquo;-drx&rdquo; means by <code>man ibus-daemon</code>. It&#39;s easy.</p>

<h4 id="toc_2">3.2 Testing the Input method</h4>
<p>There are a lot of applications that supports input method. Two I have tried, the browser and the terminal. Not every termimal emulator supports ibus input. Luckily, I have chosen <code>lxterminal</code> and it does the job.</p>
<p>The first and easy test is on the browser. I changed the keyboard shortcut for &ldquo;switching to next input method&rdquo; to Ctrl+Space, because the default one is Super+Space but my <code>Super</code> key isn&#39;t available at the time and <code>Ctrl</code> is more like my preference. </p>
<p>The Japanese font seems to be already available with the installation above, but the Chinese font isn&#39;t. So, by installing some extra Chinese fonts, you should be able to see most of the east asian characters.</p>
<div class="highlight"><pre><span></span><span class="c1"># Chinese Font</span>
$ sudo apt-get install fonts-wqy-microhei fonts-wqy-zenhei
</pre></div>
<p>The &ldquo;Typing Method&rdquo; in the Japanese input method is more like a switch from Pinyin to Wubi in Chinese. My Japanese keyboard has Hiragana characters written on the keys, so I can choose &ldquo;Kana&rdquo; as typing method(a little bit like Wubi, typing words in characters). If you choose &ldquo;Romanji&rdquo; as the typing method, then you should input the characters in a phonetic way.</p>

<h4 id="toc_3">3.3 Localizing the UI</h4>
<p>The English UI is good enough for me in the most circumstances. But still, I want to look into the details for changing the language of applicatoin interfaces.</p>

<h5 id="toc_4">Basic Locale Settings</h5>
<p>The system variable &ldquo;LANG=xx_YY.ZZZZ&rdquo; has defined the language settings in three ways: <code>language code</code>, <code>country code</code>, and <code>encoding</code>. (Notice the upper cases and the lower cases.) This variable affects the language interface of most of the applications. To do an experiement, try to set the variable as below, before entering the X window environment. You will see the menu of applications are changed to a different font, but the language is possibly still in English. This is because the application has no Chinese locale interface installed.</p>
<div class="highlight"><pre><span></span>$ <span class="nb">export</span> <span class="nv">LANG</span><span class="o">=</span>zh_CN.UTF-8
</pre></div>

<h3 id="toc_5">Reference</h3>
<p><a name="ref"></a>
[1] Debian i18n: <a href="https://www.debian.org/doc/manuals/debian-reference/ch08.en.html">www.debian.org/doc/manuals/debian-reference/ch08.en.html</a> <br/>
[2] IBus: <a href="https://wiki.archlinux.org/index.php/IBus">wiki.archlinux.org/index.php/IBus</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Put Linux into Old PC - (2) Desktop Environment]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/05/put-linux-into-old-pc-2-desktop.html"/>
        <published>2016-05-18T09:47:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2016/05/put-linux-into-old-pc-2-desktop.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#study" term="study" label="study" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">Part 2. Setup a minimal desktop environment</h3>

<h4 id="toc_1">2.1 Xorg and Openbox</h4>
<p>To use a desktop environment, <strong>Xorg</strong> is the package you won&#39;t miss(for more information you can also check the <a href="htts://www.x.org/">x.org</a> and <a href="https://www.freedesktop.org/">freedesktop.org</a> web-sites. I choose <strong>Openbox</strong> as the window manager, which is one of the most lightweight window manager. It is the best showcase of minimalism, yet the functions shall be simple enough for customization. The window manager is not a desktop environment, it is just simply a manager to windows, their styles and behaviors. A complete desktop environment is not necessary, or maybe it&#39;s the chance that I could design my own.</p>
<div class="highlight"><pre><span></span>$ sudo apt-get install xorg
<span class="c1"># now you can enter the GUI environment by command &quot;startx&quot;, but you still need a window manager to do further things</span>
$ sudo apt-get install openbox obconf openbox-themes
<span class="c1"># the above packages and their dependencies will allow you to build and configure an Openbox system, along with choices of themes.</span>
</pre></div>
<p>What&#39;s interesting about &ldquo;startx&rdquo; is that, if you try it after you install xorg and before any Window Manager, you&#39;ll get a graphical shell environment with mouse available. The font is definitly different from what you had in the normal console. It is I think the essential GUI environment possible. And if you press Ctrl+D to exit the session, you get back to your original console environment, so the <strong>xorg-session</strong> is exited.</p>
<p>After installing the openbox package, it&#39;s not yet completed. You also need to add the a <code>~/.xinitrc</code> configuration so that it calls the openbox when you execute &ldquo;startx&rdquo;.</p>
<div class="highlight"><pre><span></span>$ <span class="nb">echo</span> <span class="s2">&quot;exec openbox-session&quot;</span> &gt; ~/.xinitrc
$ startx
</pre></div>
<p>Now you can see GUI environment by Openbox. Right click on the desktop and you get a start menu, you can start a terminal emulator or configure the openbox using <em>Obconf</em>.</p>
<p>If you see an error says cannot get access to ~/.Xauthority, it&#39;s possibly you ran it in root user. It doesn&#39;t need to be root user, and you should chown the file to yourself.</p>
<p>Before going to the next step, let&#39;s look for a better console terminal than the system default one(xterm), otherwise it&#39;s inconvenient to work on multiple sessions and copy&amp;paste text. The <code>lxterminal</code> is lightweight and good enough.</p>
<div class="highlight"><pre><span></span>$ sudo apt-get install lxterminal
</pre></div>
<p>Then you can try it out with the right-click menu and select &ldquo;Terminal emulator&rdquo;. You can check the key-bindings in LXterminal&#39;s Preferences menu.</p>
<p>Next we try to do more about the customization.</p>

<h4 id="toc_2">2.2 Openbox Configuration (menu.xml and rc.xml)</h4>
<p>Openbox has two main configuration files:</p>

<ul>
<li>rc.xml, which sets keybindings, desktop names and window behavior</li>
<li>menu.xml, which contains the instructions for the right-click menu.</li>
</ul>
<p>The configuration files can be found in <code>/etc/xdg/openbox/</code>, while you can have your user-specific version in <code>~/.config/openbox/</code>.</p>
<p>Reference for OpenBox: <a href="http://openbox.org/wiki/Help:Configuration">http://openbox.org/wiki/Help:Configuration</a></p>

<h5 id="toc_3">2.2.1 Desktop behaviors</h5>
<p>First we look into some settings in <strong>rc.xml</strong>. Most of the configuration items you can found them in the <code>Obconf</code> program, which is right in the desktop&#39;s right-click menu.</p>
<p>The configurations are mainly in below categories:</p>

<ul>
<li>Resistance, distances for handling window moving behavior, such as overlap and moving towards different desktops.</li>
<li>Focus, behaviors for switching window focus with mouse.</li>
<li>Placement, decides the position when a new window is displayed</li>
<li>Theme, this is where you can customize the visual design of the environment. (I will cover the Theme customization in the following section.)</li>
<li>Desktops, desktop behaviors</li>
<li>Resize, resizing and moving windows</li>
<li>Margins, the desktop margin settings(the boundaries where windows will not resize to&hellip;)</li>
<li>Applications, customize settings per application. You can also configure this with an GUI app <code>ObApp</code> <em>(will cover later)</em></li>
<li>Keyboard, keyboard shortcuts and behaviours</li>
<li>Mouse, mouse shortcuts and behaviours</li>
<li>Menu, right-click(system) menu behaviours. </li>
<li>Dock, dock-apps settings, it&#39;s kind of apps that will have docking behaviours</li>
</ul>
<p>The other configuration files is <strong>menu.xml</strong>. It defines the system menu content and is referred by the <em>rc.xml</em>. Since the content are quite obvious, I don&#39;t need to tell more about it. Check out the <a href="http://openbox.org/wiki/Help:Menus">wiki page</a> for customizing menus, notice it can also has &ldquo;Pipe menus&rdquo; where the menu content is genereted from the pipe of the command line results, which means you can programs to hack. ;-)</p>
<p>There are also two files under <code>/etc/xdg/openbox</code>. One is <strong>autostart</strong>, you can include some initializing scripts here when an Openbox X Session is started; the other file is <strong>environment</strong>, where you can set system wide variables for the Openbox session. Both of them can be user specific by creating files with the same name under <code>~/.config/openbox/</code>.</p>

<h5 id="toc_4">2.2.2 Openbox Themes</h5>
<p>You can create your own themes for better looking of the desktop environment. The file structure is like below:</p>

<pre><code>ThemesDirectory  (such as /usr/share/themes, ~/.local/share/themes or ~/.themes)
 |
 +-&gt; ThemeName  (This is the name of the theme, such as Clearlooks)
      |
      +-&gt; openbox-3  (This the type of the theme - it's for Openbox 3!)
           |
           |-&gt; themerc  (This is the main theme file, documented in this page)
           |
           |-&gt; max.xbm  (These are optional xbm masks for the titlebar buttons)
           |-&gt; close.xbm
           ...
           +-&gt; shade.xbm</code></pre>
<p>I have created a theme called &ldquo;LinuxInOldPC&rdquo; under &ldquo;~/.themes/&rdquo;, with the <code>openbox-3</code> folder and the default <code>themerc</code> file inside. The content template can be copied from the wiki page at the end of this section.</p>
<p>Wiki of Openbox Themes: <a href="http://openbox.org/wiki/Help:Themes">http://openbox.org/wiki/Help:Themes</a></p>

<h5 id="toc_5">2.2.3 Key-bindings</h5>
<p>Here is a small trick where I would love to have, to conveniently dock the active window to part of the screen.</p>
<p>Reference for Windows docking: <a href="https://gist.github.com/terryoy/5486156">https://gist.github.com/terryoy/5486156</a></p>
<p>Another OpenBox Guide: <a href="https://urukrama.wordpress.com/openbox-guide/](https://urukrama.wordpress.com/openbox-guide/)">urukrama.wordpress.com/openbox-guide/](urukrama.wordpress.com/openbox-guide/)</a></p>

<h4 id="toc_6">2.3 A simple web browser that do the trick</h4>
<p>After searching the apt-cache library for web browser, I discover there is a simple browser called <code>surf</code>, which uses WebKit/Gtk to render. I think this tool is well enough for browsing modern web sites, and also friendly to command line. So I pick it for the initial choice of a browser for me to search information online on this computer.</p>
<div class="highlight"><pre><span></span>$ sudo apt-get install surf
</pre></div>
<p><strong>Surf</strong> has no tab support, no menu no any distractions. If you want to navigate to urls, hit <strong>Ctrl-g</strong> to enter a new URL.</p>
<p>Reference for &ldquo;surf&rdquo;: <a href="http://surf.suckless.org/">http://surf.suckless.org/</a></p>
<p>Next I also give a try to Chromium, the open source version of Chrome. It seems this more sophisticated version of webkit browser also works fine under linux. The performance on loading static web site is quick. So I decided to use Chromium as my default currently.</p>
<p>But now we have a problem here, what if I want to change the default browser in OpenBox? Debian provides a program call <strong>update-alternatives</strong> so that you could set default program for specific purpose.</p>
<div class="highlight"><pre><span></span><span class="c1"># list current default program settings</span>
$ update-alternatives --get-selections

<span class="c1"># update a default program</span>
$ sudo update-alternatives --config x-www-browser
</pre></div>
<p>It will prompt you an option list of possible programs, so that you can easily decide which program to use.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Put Linux into Old PC - (1) Installation and Hardware]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2016/05/put-linux-into-old-pc-1-hardware.html"/>
        <published>2016-05-15T21:04:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2016/05/put-linux-into-old-pc-1-hardware.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#study" term="study" label="study" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">0. How this series begin?</h3>
<p>I bought from Taobao a used Japanese IBM G40 PC, which has Pentium 4 (2.5GHz) processor, 512MB RAM and a 140GB hard disk (I believe the hardware spec has been changed by the used PC seller). Since the power consumption and the speed are not suitable for very modern applications, I decided to use it as an experiment machine for creating a minimal linux workspace. This series of blog posts will be the progress showing how I work on this machine to make it very friendly and efficient for daily used.</p>

<h3 id="toc_1">Part 1. System Setup</h3>
<p>I started to boot with the Ubuntu 16.04 LTS server image(flashed on a USB stick), the booting is a bit strange than previous versions, it shows a &ldquo;boot:&rdquo; prompt which need you to tells what to boot, but it&#39;s not difficult to find out how to boot into the installation mode.</p>
<p>The reason using Ubuntu latest version is because I want to keep up with the development of the software packages, Debian is in a very stable status, while the Ubuntu packages are active enough to try out new things. I format the whole disk and install Ubuntu on it. This is the starting point.</p>

<h4 id="toc_2">1.1 Problem 1: hibernation on lid close</h4>
<p>I&#39;m so exciting at the moment when I finish all the installation and reboot, because I finally get this project started! But the first problem come very quickly - <strong>when I try to lower the lid, the screen just go dark, and when I reopen it, the going hibernate process sticks in every few seconds</strong>. I think there is some problem with the led sensor, because it automatically goes into hibernate a few seconds later when I activate again. So I think it is related to the power options in system settings.</p>
<p>This problem leads me to know about the <strong>&ldquo;systemd&rdquo;</strong> program. Searching solutions on the internet, I find out the settings in systemd will handle the power related key event. It sets how system react when user press Power key, Hibernate Key, Lid close/open, etc.</p>
<div class="highlight"><pre><span></span>$ sudo vi /etc/systemd/logind.conf
<span class="c1"># --in the file, change below line</span>
<span class="c1">#HandleLidSwitch=suspend</span>
<span class="c1"># --to</span>
<span class="nv">HandleLidSwitch</span><span class="o">=</span>ignore

$ sudo service systemd-logind restart
</pre></div>
<p>This helps me to get over the hibernation problem at once. <strong>Systemd</strong> is a Linux system and service manager. There is similar programs like ubuntu&#39;s &ldquo;upstart&rdquo;, or Mac OS&#39;s &ldquo;launchd&rdquo;. You can search for more info about it. <strong>The man page of systemd(init) is definitely worth reading to understand the first process of the system.</strong></p>
<p>There are two other power related packages <code>acpi</code> and <code>acpid</code>. The Ubuntu document recommends that you can remove the packages if you do not have a laptop. Might read that later.</p>

<h4 id="toc_3">1.2 Problem 2: Japanese keyboard layout</h4>
<p>Although I set some Japanese keyboard layout in the installation, but it doesn&#39;t match all the keys with my Japanese IBM G40 keyboard. Apparently I need to switch the keyboard layout and do a few tests. The configuration program I used here is <code>dpkg-reconfigure</code>, which allows you to configure a package again after they&#39;re installed. The package will be &ldquo;keyboard-configuration&rdquo;.</p>
<div class="highlight"><pre><span></span><span class="c1"># choose a different keyboard mapping</span>
$ sudo dpkg-reconfigure keyboard-configuration
</pre></div>
<p>The above one already solved the problem. I changed the keyboard model to IBM ThinkPad T60/R60/T61/R61, then it says the layout of this keyboard varies in different country, so I&#39;m able to choose the &ldquo;Japanese&rdquo; as the country of the origin layout. </p>
<p>Some threads mentioned about the <code>console-setup</code> as I found out it is mainly for the encoding and the font set in the console, it might be related to the problem but not at this point. I may referred back if I try to work with Chinese character in the console.</p>
<div class="highlight"><pre><span></span><span class="c1"># This change some console character set options</span>
$ sudo dpkg-reconfigure console-setup
</pre></div>
<p>A little more on dpkg-reconfigure, if you use <code>man dpkg-recongure</code> to check its manual, you will find another related command called <code>debconf-show</code>. It shows you all the current configurations of the package. So before you go with &ldquo;dpkg-reconfigure&rdquo;, you can check the configuration first.</p>
<div class="highlight"><pre><span></span>$ sudo debconf-show keyboard-configuration
</pre></div>
<p>It shows how many configuration items of the package and their values. Check out the man page for &ldquo;keyboard-configuration&rdquo;, &ldquo;console-setup&rdquo;, &ldquo;dpkg-reconfigure&rdquo; and &ldquo;debconf-show&rdquo; to explore more.</p>

<h4 id="toc_4">1.3 Remapping the unused keys</h4>
<p>The Japanese keyboard on my laptop doesn&#39;t have a Win(or Super) key, but have some abandoned key for old Japanese input. So I kind of like to remap the key to be more useful, such as using one as Super key.</p>
<p>Reference for <strong>key remapping</strong>: <a href="http://askubuntu.com/questions/24916/how-do-i-remap-certain-keys-or-devices">askubuntu.com/questions/24916/how-do-i-remap-certain-keys-or-devices</a></p>

<h4 id="toc_5">1.4 Problem 3: WiFi Connection</h4>
<p>The original G40 doesn&#39;t have wireless network connection. Fortunately I have a spare USB wifi adapter, but I need to configure the WiFi manually via command line. The adapter I used is Ralink RT5370, which is already supported in the kernel, so I don&#39;t need to explicitly install a driver for it.</p>
<p>First I could use <code>lsusb</code> to check that device is recognized. Then I move on to updating the configuration in <code>/etc/network/interfaces</code>. Check out the man page of <strong>interfaces</strong>, and you will find the information of the keywords and syntax for configuring the network interface. For example:</p>

<ul>
<li>  <em>auto</em>, telling <code>ifup</code> to get this interface up automatically</li>
<li>  <em>iface</em>, define an interface (template) using different methods(inet, inet6, etc.)</li>
<li>  <em>allow-\</em>, allow the interface to be brought up by various sub-system(e.g. allow-hotplug, allow-auto, etc.)</li>
<li>  <em>pre-up</em>, <em>post-down</em>, commands to be execute before the interface is up or after it is down</li>
</ul>
<p>The configuration syntax is not difficult, so I added the below lines to enable the wifi adapter at system startup:</p>

<pre><code>auto wlan0
iface wlan0 inet dhcp
iface wlan0 inet6 auto</code></pre>
<p>Next I discover that my WiFi adapter is not called &ldquo;wlan0&rdquo;(you can check that by command <code>iwconfig</code>). Instead, it is called &ldquo;wlx5c63bf2a8b28&rdquo;, no wonder why I cannot bring it up when execute ifup. So now I need to change the name for it to make it more readable using <strong>udev</strong>. udev is responsible for which device gets which name. By the Systemd v197 standard of &ldquo;Predictable Network Interface Names&rdquo;, interfaces are prefixed with &ldquo;en&rdquo; for ethernet, &ldquo;wl&rdquo; for WLAN, and &ldquo;WW&rdquo; for WWAN. </p>
<div class="highlight"><pre><span></span><span class="c1"># you check the interface entires list first, and fine the MAC address we&#39;ll need in udev</span>
$ ip link
<span class="c1"># (or alternatively for wireless interfaces)</span>
$ iw dev

<span class="c1"># update udev configuration</span>
$ sudo vi /etc/udev/rules.d/10-network.rules
<span class="c1"># add below line and save</span>
<span class="nv">SUBSYSTEM</span><span class="o">==</span><span class="s2">&quot;net&quot;</span>, <span class="nv">ACTION</span><span class="o">==</span><span class="s2">&quot;add&quot;</span>, ATTR<span class="o">{</span>address<span class="o">}==</span><span class="s2">&quot;5c:63:bf:2a:8b:28&quot;</span>, <span class="nv">NAME</span><span class="o">=</span><span class="s2">&quot;wlan0&quot;</span>
</pre></div>
<p>The <strong>udev</strong> program is a dynamic device management software, it supplies the system softwares with device events, manage permissions of device nodes and may create additional symlinks in the &ldquo;/dev&rdquo; directory, or provide names to unpredictable device names from the kernel. The man page for <code>udev</code> is worth reading.</p>
<p>Reboot to test out if the device is named correctly. The device can be found in <code>/sys/class/net/</code>, with a symbolic link to the device&#39;s DEVPATH.</p>
<p>Next step is to setup the WPA2 authentication of the WiFi with my SSID and password. We&#39;ll need <code>wpasupplicant</code> package for that.</p>
<div class="highlight"><pre><span></span>$ sudo apt-get install wpasupplicant
$ sudo vi /etc/wpa_supplicant/example.conf
<span class="c1"># add the following contents:</span>
<span class="c1">#   ctrl_interface=/run/wpa_supplicant</span>
<span class="c1">#   update_config=1</span>
$ sudo wpa_passphrase &lt;SSID&gt; &lt;password&gt; &gt;&gt; /etc/wpa_supplicant/example.conf

<span class="c1"># to test the configuration: 1. start wpa_supplicant in the background, 2. use wpa_cli to interactive with the interface</span>
$ wpa_supplicant -i wlan0 -c /etc/wpa_supplicant/example.conf
<span class="c1"># (or alternatively, add &quot;-B&quot; parameter to the wpa_supplicant command to make it run as a daemon in the background, then use &quot;wpa_cli&quot; to work interactively)</span>
$ wpa_cli
&gt;scan
&gt;scan_results
<span class="c1"># now you see the hotspot scan result, which means the configuration work</span>

<span class="c1"># Go back to our network interface setup, we will add wpa_supplicant to it(the &quot;-D&quot; is to specify the driver to use)</span>
$ sudo vi /etc/network/interfaces
auto wlan0
iface wlan0 inet dhcp
  pre-up wpa_supplicant -B -Dwext -i wlan0 -c /etc/wpa_supplicant/example.conf
<span class="c1"># save and test the interface</span>
<span class="c1"># (PS, sometimes I forgot the &quot;-B&quot; parameter in the wpa_supplicant command, it will make the ifup job hang because it will run as a daemon in the foreground.)</span>
$ sudo ifdown wlan0
$ sudo ifup wlan0
<span class="c1"># make sure the DHCP client can get an IP, otherwise the network auto start process in boot up might hang for 5 minutes to get the network...</span>
</pre></div>
<p>Hard-coding the WiFi SSID and password in the configuration is not convenience in real environment, but so far in my experiement environment, it is OK to use it first. We will get back to the network manager later to make it more convenience to connect different WiFi network.</p>

<h4 id="toc_6">Problem 1.5 WiFi Connection Revisited</h4>
<p>Last night I has successfully connect the wifi adapter to my home&#39;s network, howvever some new issues come up:</p>

<ul>
<li>  The bandwidth is only 1Mb/s</li>
<li>  Not convenient to configure SSID and passphrase</li>
</ul>
<p>After checking the <a href="https://www.debian.org/doc/manuals/debian-reference/ch05.en.html">Debian&#39;s document</a>, the network setup using <em>ifupdown</em> approach is a bit outdate, and the modern way is to use NetworkManager(NM) or Wicd(wicd and associated packages). </p>
<p>(BTW, it is good to have the <em>debian-handbook</em> and <em>debian-reference</em> package installed in your local machine for any reference needed.)</p>
<p>At first, I try to look up a proper driver for the adapter. There is a package <a href="https://wiki.debian.org/rt2800usb">rt2800usb</a> to support Ralink 802.11n usb devices on Linux. However, I found out that Ubuntu has already installed the <code>linux-firmware</code> which includes the rt28xx driver, so I decided to check it later.</p>
<p>Now I try to install the <strong>network-manager</strong> first. It is a program in two parts: a root daemon handling activation and configuration of network interfaces, and a user interface that controls it. It is provided by gnome project so the GUI is by default for gnome environment. However, it also provides a command line tool call <code>nmcli</code> in the package, so I will try it first.</p>
<div class="highlight"><pre><span></span>$ sudo apt-get install network-manager
$ sudo service network-manager start
$ nmcli <span class="nb">help</span>
</pre></div>
<p>It will ignores the interfaces(except <em>lo</em>) in /etc/network/interfaces and use its own configuration, so comment out all leaving only <em>lo</em> in /etc/network/interfaces. Next. try a few commands for nmcli to check the network status.</p>
<div class="highlight"><pre><span></span><span class="c1"># list network devices</span>
$ nmcli device

<span class="c1"># list connections</span>
$ nmcli connection
</pre></div>
<p>now we can try to connect the wifi with the WiFi adapter</p>
<div class="highlight"><pre><span></span><span class="c1"># list the wifi hot spots</span>
$ nmcli device wifi list
<span class="c1"># or refresh the list if you don&#39;t get it</span>
$ nmcli device wifi rescan

<span class="c1"># connect your hot spot</span>
$ nmcli device wifi connect &lt;SSID<span class="p">|</span>BSSID&gt; password &lt;password&gt;
</pre></div>
<p>It&#39;s as simple as just one command line, and yet so powerful than what I expected. The network manager auto saves the WiFi connection in its database, and it can also be activated automatically when system starts up. Save my day!</p>
<p>Reference for <strong>nmcli</strong>: <a href="https://fedoraproject.org/wiki/Networking/CLI">https://fedoraproject.org/wiki/Networking/CLI</a></p>
<p>After checking the connection, the bandwidth, everything goes well. So I can stop my researching for the network solution now. Next let&#39;s work on the desktop environment.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Raspberry Pi Hardware GPIO with Python]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/09/rpi-hardware-begin-gpio-python.html"/>
        <published>2015-09-06T20:02:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2015/09/rpi-hardware-begin-gpio-python.html</id>
        <category scheme="http://terryoy.github.io/tag/#rpi" term="rpi" label="rpi" />
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#hardware" term="hardware" label="hardware" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>This article is for beginner to learn how to work with RPi.GPIO. It collects a bunch of useful information and examples of GPIO/SPI/I2C programs.</p>

<h3 id="toc_0">1. Raspberry Pi Hardware Documentation</h3>
<p>First of all, the hardware documentation for rpi is here:
<a href="https://www.raspberrypi.org/documentation/hardware/README.md">https://www.raspberrypi.org/documentation/hardware/README.md</a></p>
<p>GPIO Pin out: <a href="http://pi.gadgetoid.com/pinout">http://pi.gadgetoid.com/pinout</a>. Now here&#39;s a screenshot of the pinouts.</p>
<p><img src="http://terryoy-github.u.qiniudn.com/blog/2015/rpi-gpio-pinout.png" alt="http://terryoy-github.u.qiniudn.com/blog/2015/rpi-gpio-pinout.png"/></p>
<p>SPI: <a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/spi/README.md">https://www.raspberrypi.org/documentation/hardware/raspberrypi/spi/README.md</a></p>
<p>Low level Peripherals: <a href="http://elinux.org/RPi_Low-level_peripherals">http://elinux.org/RPi_Low-level_peripherals</a></p>

<h3 id="toc_1">2. Basic GPIO</h3>
<p>(to be continued)</p>

<h3 id="toc_2">References:</h3>
<p>Sparkfun&#39;s tutorials:
<a href="https://learn.sparkfun.com/tutorials/raspberry-gpio/hardware-setup">learn.sparkfun.com/tutorials/raspberry-gpio/hardware-setup</a>
<a href="https://learn.sparkfun.com/tutorials/raspberry-gpio/python-rpigpio-example">learn.sparkfun.com/tutorials/raspberry-gpio/python-rpigpio-example</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Intel Edison Get Started]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/06/edison-get-started.html"/>
        <published>2015-06-03T16:15:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2015/06/edison-get-started.html</id>
        <category scheme="http://terryoy.github.io/tag/#programming" term="programming" label="programming" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>This guide is about the initial steps for me starting development on Intel Edison platform.</p>

<h3 id="toc_0">1. The Board and Setting Up Serial Communication</h3>
<p>The board I use to develop with Edison is the <a href="http://www.seeedstudio.com/depot/Intel-Edison-for-Arduino-p-2149.html">Intel Edison for Arduino</a> board. So first plug the Edison module on the board; secondary, I have the 6.5V 2A DC connected to supply the power to the board (or you could power up the board with the micro-USB in the middle); third, a micro-USB wire connect to the board for serial communication.</p>
<p>I&#39;m using minicom on Mac OSX for the serial connection, but you can also use <code>screen</code> on Mac OSX and Linux(see the reference at the end of this section).</p>
<p>If you forgot the root password, here&#39;s the way to recover it: </p>

<pre><code>* on booting, press any key to stop the process
* on the &quot;boot&gt;&quot; command line prompt, type ```run do_ota``` to redo the flashing process.</code></pre>
<p>Then you end up with a login using &ldquo;root&rdquo; as user name and no password.</p>

<ul>
<li><a href="https://software.intel.com/zh-cn/assembling-intel-edison-board-with-arduino-expansion-board">Reference for assembling</a></li>
<li><a href="https://software.intel.com/zh-cn/setting-up-serial-terminal-on-system-with-linux">Reference for setting up serial on Linux</a></li>
<li><a href="https://software.intel.com/zh-cn/setting-up-serial-terminal-on-system-with-mac-os-x">Reference for setting up serial on Mac</a></li>
</ul>

<h3 id="toc_1">2. Setting up WiFi</h3>
<p>The next thing to do is to setup the WiFi on Edison, because a large part of the development process happens on WiFi.</p>
<div class="highlight"><pre><span></span>$ configure_edison --wifi

<span class="c1"># check the wifi status</span>
$ wpa_cli status
</pre></div>
<p>Follow the instructions of this program to complete the scanning, choosing hotspot, and reboot with WiFi.</p>
<p>By default, <code>ssh</code> is restricted to usb, so you need to disable the restriction by using <code>configure_edison --setup</code> to setup the device name and password. It will automatically update the file &#39;/lib/systemd/system/sshd.socket&#39; and comment out this line &ldquo;BindToDevice=usb0&rdquo;. (need reboot to take effect)</p>

<ul>
<li><a href="https://software.intel.com/zh-cn/connecting-your-intel-edison-board-using-wifi">Reference for setting up WiFi</a></li>
</ul>

<h3 id="toc_2">3. Blink the LED</h3>
<p>(to be continued when I get the board&hellip;)</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[A Template for Program Readme on Github]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2015/06/program-readme-template.html"/>
        <published>2015-06-03T16:15:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2015/06/program-readme-template.html</id>
        <category scheme="http://terryoy.github.io/tag/#programming" term="programming" label="programming" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>When writing a Program, the developer should be clear about the purpose, to eliminate time wasted. Refering to the <a href="http://textfiles.com/programming/writprog.pro">How to Program</a>, I propose a documatation template companied with a Software Development Life Cycle to ensure this.</p>

<pre><code>1. SPECIFICATION
2. PROGRAM DESIGN
3. CODE DESIGN
4. CONSTRUCTION AND DESIGN</code></pre>
<p>So, starting a project on github, I think we should follow a basic documentation structure to answer each questions, to ensure that your purpose is clear enough.</p>

<h3 id="toc_0">1. Speficication</h3>
<p>In this stage, four things matter.</p>

<ul>
<li><p>User Interface</p>
<p>in what approach does user interact with the program?
what input/output?
command line? menus? how much freedom allowed?</p></li>
<li><p>Algorithm</p>
<p>what specific computation behind the program?
what method do we use?</p></li>
<li><p>Data Structures</p>
<p>how should the data of the problem be organized?</p></li>
<li><p>[Generality]</p>
<p>is it used only in a small number of situations? or is it general purpose of wide variety of circumstances?
you need fewer choices if made for a small number of situations, and more choices and more commands for large number of situations</p></li>
<li><p>[Robustness]
how gracefully does the program respond to bad data or bad commands?</p></li>
</ul>

<h3 id="toc_1">2. Program Design</h3>
<p>A design of the program may be often represented by a structure chart, but it&#39;s not the most important thing. Instead, you should divied the large program into <strong>subroutines</strong>.</p>

<ul>
<li>Design Structure
top level routines
    sub routines</li>
</ul>
<p>There&#39;re a few ideas for evaluating the desgin:</p>

<pre><code>1. Keep subroutines short
2. Keep subroutines single-purpose
3. Keep calling sequence short
4. Communicate data through calling sequences
5. Limit use of flag variables
6. Make design hierarchical</code></pre>

<h3 id="toc_2">[3. Setup and Testing]</h3>

<h3 id="toc_3">[4. About and License]</h3>
<p><em>(Since the original post discontinued, I have to complete the rest of the template myself.)</em></p>
<p>Following is a template in markdown:</p>

<pre><code>### 1. Specification

##### User Interface

##### Algorithms

##### Data Structures

##### [Generality]

##### [Robustness]

### 2. Program Design

##### Design Structure

##### Public Interface

### 3. Setup and Testing

### 4. About

### 5. License</code></pre>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[A JNI Guide on Android]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/11/jni-guide-on-android.html"/>
        <published>2014-11-27T16:06:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2014/11/jni-guide-on-android.html</id>
        <category scheme="http://terryoy.github.io/tag/#cpp" term="cpp" label="cpp" />
        <category scheme="http://terryoy.github.io/tag/#android" term="android" label="android" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Begin a JNI Project</h3>
<p>To create a JNI project in ADT, first is to setup NDK support for the workspace.  Open <em>&ldquo;Preferences&rdquo; -&gt; &ldquo;Android&rdquo; -&gt; &ldquo;NDK&rdquo;</em>, set the <em>NDK Locaiton</em> to your ndk root.</p>
<p>After you create a new Android project, native support is not yet enabled. Right click on the project, and select <em>&ldquo;Android Tools&rdquo; -&gt; &ldquo;Add Native Support&hellip;&rdquo;</em>. It prompts a &ldquo;Library Name&rdquo; input for you to type in the native library name you want to use. On succeed, it will generate a &ldquo;jni&rdquo; folders containing a &ldquo;.cpp&rdquo; file and a &ldquo;Android.mk&rdquo; makefile.</p>
<p><em>***a small hint on creating project: if you created an project without an initial activity (which it&#39;s possible when your only interest is in building an native app), you need to specify your MainActivity in the AndroidManifest.xml. On the &ldquo;Application&rdquo; sheet in Manifest editor, first add a &ldquo;Activity&rdquo; node, which connects to your Activity subclass; then create an &ldquo;Intent Filter&rdquo; node, and then an &ldquo;Action&rdquo; node and a &ldquo;Category&rdquo; node under the IntentFilter node. The Action node selects &ldquo;android.intent.action.MAIN&rdquo;, and the Category node selects &ldquo;android.intent.category.LAUNCHER&rdquo;.</em></p>

<h3 id="toc_1">2. Information on Android.mk</h3>
<p>The syntax of Android.mk is based on <a href="http://www.gnu.org/software/make/">GNU Make</a>. This file is only a snippet of the whole make process. The whole process also includes an Application.mk and a Android.mk provided by the NDK build system. </p>
<div class="highlight"><pre><span></span><span class="c"># my-dir is a macro defined by Android, which provides the path for where the make file is.</span>
<span class="nv">LOCAL_PATH</span> <span class="o">:=</span> <span class="k">$(</span>call my-dir<span class="k">)</span>

<span class="c"># CLEAR_VARS clears all the &quot;LOCAL_*&quot; variables except &quot;LOCAL_PATH&quot;</span>
<span class="cp">include $(CLEAR_VARS)</span>

<span class="nv">LOCAL_MODULE</span>    <span class="o">:=</span> jnidemo <span class="c1"># provide the lib name (e.g. libjnidemo.so), and also the name to load in Java Class</span>
<span class="nv">LOCAL_SRC_FILES</span> <span class="o">:=</span> jnidemo.cpp <span class="c1"># a source file list to compile and build into the library</span>

<span class="c">#LOCAL_SHARE_LIBRARIES := avilib # (optional 1): if you depends on other libraries, you can load it here</span>

<span class="c"># build the library</span>
<span class="cp">include $(BUILD_SHARED_LIBRARY)</span>

<span class="c">#$(call import-module,transcode/avilib) # (optional 2): put the 3rd party library outside project folder, under NDK_MODULE_PATH and import it using this line</span>
</pre></div>
<p><em>* If you have more than one library to build, just duplicate the part from &ldquo;include $(CLEAR_VARS)&rdquo; to &ldquo;include $(BUILD_SHARED_LIBRARY)&rdquo;.</em></p>
<p><em>* NDK build also supports executable build, only by replacing &ldquo;include $(BUILD_SHARED_LIBRARY)&rdquo; with &ldquo;include $(BUILD_EXECUTABLE)&rdquo;, the output will also be in libs/<arch> folder, but will not be packed into an .apk file.</em></p>
<p>_* If you need to trigger build under command line, go to the project root folder, and type <code>ndk-build</code> to build.</p>

<h3 id="toc_2">3. Import JNI library in Java Class</h3>
<p>Use the code below to load a library in the Java class.</p>
<div class="highlight"><pre><span></span><span class="kd">static</span> <span class="p">{</span>
    <span class="n">System</span><span class="p">.</span><span class="na">loadLibrary</span><span class="p">(</span><span class="s">&quot;jnidemo&quot;</span><span class="p">);</span>
    <span class="c1">// System.load(&quot;c:/path/to/library.so&quot;); // this is not recommended since it would be platform dependent</span>
<span class="p">}</span>
</pre></div>

<h3 id="toc_3">4. Working With Native Functions</h3>
<p>There are two sides of the JNI interface: Java calling C/C++, and C/C++ calling Java. In Java, you can call a native funciton implmeneted by a C/C++ shared library; and in C/C++, you might also need to trigger Java methods inside C/C++ code. So let&#39;s talk about both respectively.</p>

<h4 id="toc_4">4.1 Java Calling C/C++</h4>
<p>In a Java class, you can define a native method which will be implmemented by C/C++ code. In this case, you can call native C/C++ functions from Java.</p>
<div class="highlight"><pre><span></span><span class="n">Class</span> <span class="n">A</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="kd">native</span> <span class="n">String</span> <span class="nf">stringFromJNI</span><span class="p">();</span> <span class="c1">// native method</span>

    <span class="kd">static</span> <span class="p">{</span> <span class="c1">// load the shared library that contains the native method</span>
        <span class="n">System</span><span class="p">.</span><span class="na">loadLibrary</span><span class="p">(</span><span class="s">&quot;jnidemo&quot;</span><span class="p">);</span>
    <span class="p">}</span> 
<span class="p">}</span>
</pre></div>
<p>You can use <code>javah -classpath bin/classes com.teatime.jnidemo.A</code> to generate the C/C++ header for the java native methods. It will create a &ldquo;com_teatime_jnidemo_A.h&rdquo; file as below: </p>
<div class="highlight"><pre><span></span><span class="cm">/* DO NOT EDIT THIS FILE - it is machine generated */</span>
<span class="cp">#include</span> <span class="cpf">&lt;jni.h&gt;</span><span class="cp"></span>
<span class="cm">/* Header for class com_teatime_jnidemo_A */</span>

<span class="cp">#ifndef _Included_com_teatime_jnidemo_A</span>
<span class="cp">#define _Included_com_teatime_jnidemo_A</span>
<span class="cp">#ifdef __cplusplus</span>
<span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
<span class="cp">#endif</span>
<span class="cm">/*</span>
<span class="cm"> * Class:     com_teatime_jnidemo_A</span>
<span class="cm"> * Method:    stringFromJNI</span>
<span class="cm"> * Signature: ()Ljava/lang/String;</span>
<span class="cm"> */</span>
<span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span> <span class="n">Java_com_teatime_jnidemo_A_stringFromJNI</span>
  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">);</span>

<span class="cp">#ifdef __cplusplus</span>
<span class="p">}</span>
<span class="cp">#endif</span>
<span class="cp">#endif</span>
</pre></div>
<p>Here you can see the Java method signature is converted to something have similar meaning: &ldquo;jstring&rdquo; means the Java String class, &ldquo;jobject&rdquo; is for the object instance which calls  this method. </p>

<hr/>
<p>However, you don&#39;t really want to type this command to generate every file you make, so a more convenient way is to setup a &ldquo;Run -&gt; External Tools -&gt; External Tools Configurations&rdquo; to trigger it inside Eclipse IDE. The configuration will be like below: (note that the path segment is joined by &ldquo;:&rdquo; on mac/linux and &ldquo;;&rdquo; on windows)</p>

<pre><code>Name: Generate C/C++ Header File
Location: ${system_path:javah}
Working Directory: ${project_loc}/jni
Arguments: -classpath &quot;${project_classpath}:${env_var:ANDROID_SDK_HOME}/platforms/android-15/android.jar&quot; ${java_type_name}
Refresh -&gt; Refresh Resources upon completions; The project containing the selected resource
Common -&gt; Display in favourites menu -&gt; External Tools</code></pre>

<hr/>
<p>There are type mappings betwine Java and C as below. For more information you could check out the JNI document <a href="http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/types.html">here</a>.</p>
<p><img src="http://terryoy-github.u.qiniudn.com/blog/2014/jni_primitive_types.png" alt="Primitive Types"/>
<img src="http://terryoy-github.u.qiniudn.com/blog/2014/jni_reference_types.gif" alt="Reference Types"/></p>

<h4 id="toc_5">4.2 C/C++ Calling Java</h4>
<p>In C/C++, you need to include <code>jni.h</code> and use <code>JNIEnv</code> to work with the Java methods in JVM. The JNIEnv object is to keep everything consistent inside JVM. </p>

<blockquote>
<p>typedef const struct JNINativeInterface *JNIEnv; </p>
</blockquote>
<p>There&#39;s a list of functions for JNIEnv object you can check out <a href="http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/functions.html#wp23720">here</a></p>
<p>For primitive types, you can  use directly convert to the c types directly. For  Here are some examples:</p>
<div class="highlight"><pre><span></span><span class="c1">// primitive types</span>
<span class="kt">int</span> <span class="n">cvalue</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="n">jint</span> <span class="n">value</span> <span class="o">=</span> <span class="n">cvalue</span><span class="p">;</span>

<span class="c1">// create Java string</span>
<span class="n">jstring</span> <span class="n">javaString</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&quot;Hello World!&quot;</span><span class="p">);</span>
<span class="c1">// convert Java string to C string</span>
<span class="k">const</span> <span class="n">jbyte</span> <span class="o">*</span><span class="n">str</span><span class="p">;</span>
<span class="n">jboolean</span> <span class="n">isCopy</span><span class="p">;</span>
<span class="n">str</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaString</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">isCopy</span><span class="p">);</span> <span class="c1">// isCopy tells the function to get a copy or return the original string</span>
<span class="c1">// release string after GetStringChars/GetStringUTFChars</span>
<span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaString</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>

<span class="c1">// operating array</span>
<span class="n">jintArray</span> <span class="n">javaArray</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewIntArray</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="n">javaArray</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// this only creates a java array</span>
    <span class="c1">// approach 1: you can ask for a C array pointer to operate on it</span>
    <span class="n">jint</span><span class="o">*</span> <span class="n">nativeDirectArray</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntArrayElements</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaArray</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">isCopy</span><span class="p">);</span> <span class="c1">// isCopy tells the function to get a copy or the original</span>
    <span class="c1">// ... do something</span>
    <span class="c1">// release the pointer ref, otherwise will cause memory leak</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseIntArrayElements</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaArray</span><span class="p">,</span> <span class="n">nativeDirectArray</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// last param can be: 0, JNI_COMMIT, JNI_ABORT</span>
    <span class="c1">// 0: apply the content and release the native array</span>
    <span class="c1">// JNI_COMMIT: apply the content, don&#39;t release the native array</span>
    <span class="c1">// JNI_ABORT: don&#39;t apply the content, but release the array</span>

    <span class="c1">// aproach 2: work with a local array, and submit changes when needed</span>
    <span class="n">jint</span> <span class="n">nativeArray</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntArrayRegion</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaArray</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">nativeArray</span><span class="p">);</span> <span class="c1">// copy the content to nativeArray</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">setIntArrayRegion</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaArray</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">nativeArray</span><span class="p">);</span> <span class="c1">// apply the changes back to the original array</span>
<span class="p">}</span>

<span class="c1">// calling a method</span>
<span class="n">jmethodID</span> <span class="n">isntanceMethodId</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetMethodID</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">clazz</span><span class="p">,</span> <span class="s">&quot;instanceMethod&quot;</span><span class="p">,</span> <span class="s">&quot;()Ljava/lang/String;&quot;</span><span class="p">);</span>
<span class="n">jstring</span> <span class="n">stringValue</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">CallStringMethod</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="n">instanceMethodId</span><span class="p">);</span>
</pre></div>
<p>Often you will need to checkout the method signature of the Java class, so that you can lookup the method in JNI interface. Here is a small trick to print the method signature in JNI style.</p>
<div class="highlight"><pre><span></span>$ <span class="nb">cd</span> bin/classes
$ javap -s com.jnidemo.MyJNIClass
</pre></div>

<h3 id="toc_6">5. References</h3>
<p>Best Practices for using Java Native Interface: <a href="http://www.ibm.com/developerworks/library/j-jni/">http://www.ibm.com/developerworks/library/j-jni/</a> <br/>
JNI Documentation: <a href="http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/jniTOC.html">http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/jniTOC.html</a> <br/></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Finding Information for C/C++ Library on Linux]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/10/finding-information-linux-c-library.html"/>
        <published>2014-10-30T09:38:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2014/10/finding-information-linux-c-library.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#programming" term="programming" label="programming" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Developing on Linux often needs shared libraries most of the time. Below is a few references for finding the information about the libraries you are dealing with.</p>

<h3 id="toc_0">1. Naming Convention</h3>
<p>All C standard libraries on linux has the name convention <em>&ldquo;lib<strong>xxx</strong>&rdquo;</em>. If you search packages of a library, you can use the (debian) command below to look for it:</p>
<div class="highlight"><pre><span></span>$ apt-cache search libxxx
</pre></div>

<h3 id="toc_1">2. Library Packages</h3>
<p>Usually, there are three packages of a library you could deal with. </p>

<ul>
<li>libxxx - this is the binary package of the shared library, usually has a &ldquo;lib<name>.so.<version>&rdquo; file on the path /usr/lib/ or /usr/local/lib. It is also needed at runtime.</li>
<li>libxxx-dev - this is the package which enables you to compile and link the library.</li>
<li>libxxx-dbg - this is the package which contains the debug symbols for debugging the program. where the files are usually installed at &ldquo;/usr/lib/debug/&rdquo;.</li>
</ul>
<p>If you want to know what files are installed on you system of a package, below are a few commands to do so:</p>
<div class="highlight"><pre><span></span>$ dpkg-query -L &lt;package_name&gt;
$ dpkg-query -c &lt;.deb_file&gt;

<span class="c1"># if you want to check files without installing the package</span>
<span class="c1"># use the apt-file program(it will cache the file lists of all packages)</span>
$ apt-file update
$ apt-file list &lt;package_name&gt;
</pre></div>

<h3 id="toc_2">3. List Libraries on Your System</h3>
<p>Below command can list all the share libraries and their locations, so you could whether a libray is installed and registered on which path.</p>
<div class="highlight"><pre><span></span>$ ldconfig -p

<span class="c1"># find a library(SDL) for example</span>
$ ldconfig -p <span class="p">|</span> grep -i sdl
</pre></div>
<p>For the <code>ld</code> program, it searches &ldquo;/usr/lib/&rdquo; for libraries by default, but it also include the paths defined in &ldquo;/etc/ld.so.conf&rdquo; and &ldquo;/etc/ld.so.conf.d/&rdquo;.</p>

<h3 id="toc_3">4. Checking The Information of Library Files</h3>
<p>A library usually contains two parts: static(.a) and shared(.so). You can check the both parts with the commands below:</p>
<div class="highlight"><pre><span></span><span class="c1"># listing object files in static (archive) library</span>
$ ar tf /usr/lib/i386-linux-gnu/libSDL2.a
SDL.o
SDL_assert.o
SDL_error.o
SDL_hints.o
SDL_log.o
...

<span class="c1"># listing symbols in object files(.o), archive library(.a), and shared library(.so)</span>
$ nm object.o
$ nm lib.a
$ nm -D lib.so 
$ nm --dynamic lib.so
</pre></div>

<h3 id="toc_4">5. Development Reference</h3>
<p>Usually the &ldquo;-dev&rdquo; package contains some documentation or example files under path &ldquo;/usr/share/doc/lib<name>-dev/&rdquo;. It is very useful to checkout these materials locally. For examples:</p>
<div class="highlight"><pre><span></span><span class="c1"># open the documentation home page(xdg-open is a general command to open file, you can replace it with &quot;iceaweasel&quot; etc.)</span>
$ xdg-open /usr/share/doc/libusb-dev/html/index.html

<span class="c1"># extract the examples </span>
$ tar -zxvf /usr/share/doc/libsdl2-dev/examples/examples.tar.gz
</pre></div>

<h3 id="toc_5">6. More Information</h3>
<p>Static, Shared Dynamic and Loadable Linux Libraries <br/>
<a href="http://www.yolinux.com/TUTORIALS/LibraryArchives-StaticAndDynamic.html">http://www.yolinux.com/TUTORIALS/LibraryArchives-StaticAndDynamic.html</a><br/>
Program Library HOWTO <br/>
<a href="http://tldp.org/HOWTO/Program-Library-HOWTO/index.html">http://tldp.org/HOWTO/Program-Library-HOWTO/index.html</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[A Guide of Common Git Tasks]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/10/common-git-commands.html"/>
        <published>2014-10-22T20:57:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2014/10/common-git-commands.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#programming" term="programming" label="programming" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">1. Initialize a Git project</h3>
<p>Usually, starting a git project include&#39;s the following steps:</p>

<ul>
<li>initialize local repository</li>
<li>add a remote repository from server</li>
<li>set up-stream and push to remote repository</li>
</ul>
<div class="highlight"><pre><span></span><span class="c1"># initialize a repository</span>
$ git init

<span class="c1"># set a new remote</span>
$ git remote add origin https://github.com/user/repo.git

<span class="c1"># verify new remote</span>
$ git remote -v

<span class="c1"># (you might need to pull origin/master first if it&#39;s not empty)</span>
$ git pull origin master

<span class="c1"># push to remote repository</span>
$ git push --set-upstream origin master
</pre></div>

<h3 id="toc_1">2. Correct mistakes on the repository</h3>
<p>Usually there are some mistakes we will commit to git repository, so here are a few tips to correct the mistakes:</p>

<ul>
<li>Change file name/path</li>
<li>Unstage files</li>
<li>Remove sensitive data, or binary data in the history </li>
</ul>
<div class="highlight"><pre><span></span><span class="c1"># change or delete files in the current version</span>
<span class="c1"># -- you should not simple use the common shell command &quot;mv&quot; and &quot;rm&quot;, </span>
<span class="c1"># -- because that will lose the tracking. You should use with git instead</span>
$ git rm &lt;somefile&gt;
$ git mv &lt;somefile&gt; &lt;otherfile&gt;


<span class="c1"># Unstage files</span>
<span class="c1"># -- usually when you execute &quot;git status&quot;, it will prompt you how to unstage files (e.g. &#39;(use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#39;)</span>
$ git reset HEAD &lt;file&gt;...
<span class="c1"># -- (or, in some cases)</span>
$ git rm --cached &lt;file&gt;

<span class="c1"># Remove sensitive data</span>
<span class="c1"># -- This one is more difficult. </span>
<span class="c1"># check this link: https://help.github.com/articles/remove-sensitive-data/</span>
</pre></div>

<h3 id="toc_2">3. Using Proxy to work with server</h3>
<p>You can use openssh to create an ssh tunnel with a remote server, and then communicate with git server with this tunnel proxy.</p>
<div class="highlight"><pre><span></span><span class="c1"># Socks</span>
ssh -D &lt;local_proxy_port&gt; &lt;remote_user&gt;@&lt;remote_server&gt; -p &lt;remote_ssh_port&gt;
<span class="c1"># HTTPS for one site:</span>
ssh -L &lt;local_proxy_port&gt;:&lt;destination_host&gt;:&lt;destination_port&gt; &lt;ssh_user&gt;@&lt;ssh_server&gt; -p &lt;ssh_port&gt;
</pre></div>
<p>Using git with proxies:</p>
<div class="highlight"><pre><span></span><span class="c1"># proxy for https</span>
<span class="nb">export</span> <span class="nv">https_proxy</span><span class="o">=</span>&lt;http_proxy_host&gt;:&lt;http_proxy_port&gt;
<span class="c1"># socks4 proxy for http</span>
<span class="nb">export</span> <span class="nv">http_proxy</span><span class="o">=</span>socks://&lt;socks4_proxy_host&gt;:&lt;socks4_proxy_port&gt;
<span class="c1"># socks5 proxy for https</span>
<span class="nb">export</span> <span class="nv">https_proxy</span><span class="o">=</span>socks5://&lt;socks5_proxy_host&gt;:&lt;socks5_proxy_port&gt;
</pre></div>
<p>* If in some blocked environment that can only access HTTP/HTTPS, you can consider changing your ssh service port to 80/443.</p>

<h3 id="toc_3">4. Create a private Git repo on your SSH server</h3>
<p>(reference: <a href="http://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server">git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server</a>)</p>
<div class="highlight"><pre><span></span><span class="c1"># create a git user for remote access(optional)</span>
$ sudo adduser git
$ <span class="nb">cd</span> /home/git/ <span class="o">&amp;&amp;</span> mkdir .ssh <span class="o">&amp;&amp;</span> chmod <span class="m">700</span> .ssh
$ touch .ssh/authorized_keys <span class="o">&amp;&amp;</span> chmod <span class="m">600</span> .ssh/authorized_keys
$ cat /tmp/id_rsa.someone.pub &gt;&gt; .ssh/authorized_keys

<span class="c1"># create a server repo with </span>
$ mkdir -p /opt/git/somerepo.git
$ <span class="nb">cd</span> /opt/git/somerepo.git
$ git init --bare

<span class="c1"># create a local git repo(on your PC) and push to server repo</span>
$ <span class="nb">cd</span> myproject
$ git init
$ git add . <span class="o">&amp;&amp;</span> git commit -m <span class="s2">&quot;initial commit&quot;</span>
$ git remote add origin git@gitserver:/opt/git/somerepo.git
$ git push origin master
</pre></div>

<h3 id="toc_4">5. Tagging</h3>
<div class="highlight"><pre><span></span><span class="c1"># list your tags</span>
$ git tag
<span class="c1"># search for tags</span>
$ git tag -l <span class="s2">&quot;v1.8.*&quot;</span>

<span class="c1"># create a tag with annotation</span>
$ git tag -a v1.0.1 -m <span class="s2">&quot;a new tag for v1.0.1&quot;</span>
<span class="c1"># create a tag for a previous commit(for example, 902acd...)</span>
$ git tag -a v1.0.0 902acd

<span class="c1"># show tag info</span>
$ git show v1.0.1

<span class="c1"># push a tag to remote server</span>
$ git push origin v1.0.1
<span class="c1"># or push tags</span>
$ git push origin --tags 

<span class="c1"># You can also checkout the tags like the same way you checkout branches</span>
$ git checkout -b version2 v2.0.0

<span class="c1"># delete a tag</span>
$ git tag -d <span class="s2">&quot;v1.0.1a&quot;</span>
</pre></div>

<h3 id="toc_5">6. Amend Logs</h3>
<div class="highlight"><pre><span></span><span class="c1"># Method 1:</span>
<span class="c1"># fix something after git commit</span>
$ git commit -m <span class="s2">&quot;something wrong&quot;</span>
$ git add &lt;...&gt;
$ git rm &lt;...&gt;

<span class="c1"># apply changes and update log to last commit</span>
$ git commit --amend

<span class="c1"># Method 2:</span>
<span class="c1"># Make the last commit as unstage changes</span>
$ git commit -m <span class="s2">&quot;something wrong&quot;</span>
$ git reset HEAD~1
<span class="c1"># ... fix things</span>
<span class="c1"># Apply the changes and commit again</span>
$ git commit --amend
</pre></div>

<h3 id="toc_6">7. Working with drafts (stashing)</h3>
<div class="highlight"><pre><span></span><span class="c1"># Save current uncommitted change to stash</span>
$ git stash

<span class="c1"># List existing stash</span>
$ git stash list

<span class="c1"># recover last stash</span>
$ git stash apply

<span class="c1"># recover previous stashes</span>
$ git stash apply stash@<span class="o">{</span><span class="m">1</span><span class="o">}</span>

<span class="c1"># Delete stashes</span>
$ git stash drop stash@<span class="o">{</span><span class="m">0</span><span class="o">}</span>
</pre></div>
<p>Reference for git stash: <a href="https://git-scm.com/docs/git-stash">https://git-scm.com/docs/git-stash</a></p>

<h3 id="toc_7">8. Merge a specific commit to current branch</h3>
<p>Git has a <code>cherry-pick</code> function that can merge a specific commit to the current branch, this save me once. :P</p>
<div class="highlight"><pre><span></span><span class="c1"># merge a sequence of commits to the current branch, </span>
$ git cherry-pick &lt;commits...&gt;
</pre></div>
<p>When you try to merge a commit, you will possibly cause some conflict. The cherry-pick function also has some features to help you.</p>
<div class="highlight"><pre><span></span><span class="c1"># continue the job after you resolve the conflicts</span>
$ git cherry-pick --continue

<span class="c1"># forget current job in the sequence progress</span>
$ git cherry-pick --quit

<span class="c1"># clear all the sequence and recover to the pre-sequence state</span>
$ git cherry-pick --abort
</pre></div>

<h3 id="toc_8">9. Reverting commits</h3>
<p>There are two types of resetting the branch to a previous state: 1. delete unpublished commits locally, 2. Undo published commits with new commits.</p>
<p>Using <code>git reset</code> can help resetting current state.</p>
<div class="highlight"><pre><span></span><span class="c1"># delete the local commits and restore to the previous commit state</span>
$ git reset --hard &lt;commit&gt;

<span class="c1"># if you have local uncommit changes, you should save as stash first</span>
$ git stash
$ git reset --hard &lt;commit&gt;
$ git stash pop
</pre></div>
<p>Using <code>git revert</code> is to make a new commit to revert previous changes(specificly).</p>
<div class="highlight"><pre><span></span><span class="c1"># cancel specific changes</span>
$ git revert &lt;commit1&gt; &lt;commit2&gt; ...

<span class="c1"># cancel range of commits</span>
$ git revert e647032...cee8902
<span class="c1"># cancel last two commits</span>
$ git revert HEAD~2...HEAD
</pre></div>
<p><font color="red">If you&#39;ve really push something wrong to github, or merging with a wrong branch which you want to recover. You could do th below things with specifc care:</font></p>
<div class="highlight"><pre><span></span><span class="c1"># (it&#39;s strongly recommended to create a backup branch first!!!)</span>
<span class="c1"># **this line recover back to a specific commit, and all the later commits will be lost!!!</span>
$ git reset --hard &lt;commit&gt;
$ git push --force origin &lt;branch_name&gt;
</pre></div>
<p><a href="http://stackoverflow.com/questions/4114095/how-to-revert-git-repository-to-a-previous-commit">Ref to git revert</a>.</p>

<h3 id="toc_9">10. Get Revision List</h3>
<p><em>Updated on 2017-12-21</em></p>
<p>Now our projects in the company uses total commit count as the build version, so I make a search on how to use command line to get that. It&#39;s related to the <code>git rev-list</code> command and I found the command quite useful in fact.</p>
<div class="highlight"><pre><span></span><span class="c1"># Get the total commit count at the current branch</span>
$ git rev-list --count HEAD

<span class="c1"># Check different commits between two branches/tags</span>
$ git rev-list --pretty --left-right &lt;BRANCH_1&gt;...&lt;BRANCH_2&gt;
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Linux C Learning (Part 1)]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/08/learning-linux-c-part-1.html"/>
        <published>2014-08-20T23:34:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2014/08/learning-linux-c-part-1.html</id>
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <category scheme="http://terryoy.github.io/tag/#programming" term="programming" label="programming" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>Below is some study notes for Linux C Programming from a web course. It can serve as a coding reference in the future, or a walkthrough summary of the study. As I already have the knowledge of C Programming Language, so I will not cover the language detail here, but only the development environment under Linux.</p>

<h3 id="toc_0">1. <strong>gcc</strong> and <strong>gdb</strong></h3>
<p>There are several steps for the <strong>gcc</strong> compiler to compile a source file into a executable program. It can be set to the step output with some parameter to gcc, so you can checkout their result in file.</p>
<div class="highlight"><pre><span></span><span class="c1"># Preprocessor: This is to remove comments, replace marcos(#define), and headers(#include)</span>
$ gcc -E test.c -o test.i

<span class="c1"># (+)Compile: This compile the source code into assembly code. Different architecture has different assembly language spec</span>
$ gcc -S test.c -o test.s

<span class="c1"># (+)Assemble: this translate assembly code into binary object. You can check the file with &quot;file test.o&quot; to see the format as a &quot;object file&quot; or a &quot;ELF LSB relocatable&quot;, and the architecture of the platform(x64, etc.)</span>
$ gcc -c test.c -o test.o

<span class="c1"># (+)Link: This generate the final executable</span>
$ gcc test.c -o <span class="nb">test</span>
</pre></div>
<p>There are other useful parameters of gcc for specific purpose, for example, optimization, or debugging.</p>

<ul>
<li>&ldquo;-O[level]&rdquo;, optimzation level, (0,1,2,3)</li>
<li>&ldquo;-g&rdquo;, generate debug info, gdb needed</li>
<li>&ldquo;-Wall&rdquo;, enable all warnings and errors</li>
<li>&ldquo;-Werror&rdquo;, enable errors</li>
<li>&ldquo;-D&rdquo;, define macro in command line</li>
<li>&ldquo;-I&rdquo;, set the location of headers</li>
<li>&ldquo;-std=C99&rdquo;, use C99 standard</li>
</ul>
<p>The <strong>gdb</strong> debugging tool can be used to trace the program with some useful commands:</p>

<ul>
<li>&ldquo;l&rdquo;, list source code with line numbers</li>
<li>&ldquo;n&rdquo;, proceed next line</li>
<li>&ldquo;b [line number]&rdquo;, set a breakpoint at the code with the line number</li>
<li>&ldquo;c&rdquo;, continue running until finish or meets the next break point</li>
<li>&ldquo;p [variable]&rdquo;, print the instant value of a variable</li>
</ul>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Creating A New Database in MySql]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/06/create-database-mysql.html"/>
        <published>2014-06-04T14:40:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2014/06/create-database-mysql.html</id>
        <category scheme="http://terryoy.github.io/tag/#database" term="database" label="database" />
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <h3 id="toc_0">0. Setup</h3>
<div class="highlight"><pre><span></span>$ sudo apt-get install mysql-server
$ mysql -u root -p &lt;root_password&gt;
</pre></div>

<h3 id="toc_1">1. Create the database</h3>
<div class="highlight"><pre><span></span><span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">mytestdb</span><span class="p">;</span>
<span class="k">show</span> <span class="n">databases</span><span class="p">;</span>
</pre></div>

<h3 id="toc_2">2. Create a user and grant access</h3>
<div class="highlight"><pre><span></span><span class="k">CREATE</span> <span class="k">USER</span> <span class="s1">&#39;myuser&#39;</span><span class="o">@</span><span class="s1">&#39;localhost&#39;</span> <span class="n">IDENTIFIED</span> <span class="k">BY</span> <span class="s1">&#39;my_password&#39;</span><span class="p">;</span>

<span class="k">GRANT</span> <span class="k">ALL</span> <span class="k">PRIVILEGES</span> <span class="k">ON</span> <span class="n">mytestdb</span><span class="p">.</span><span class="o">*</span> <span class="k">TO</span> <span class="s1">&#39;myuser&#39;</span><span class="o">@</span><span class="s1">&#39;localhost&#39;</span><span class="p">;</span> 

<span class="c1">-- or alternatively, with more powerful access</span>
<span class="k">GRANT</span> <span class="k">ALL</span> <span class="k">PRIVILEGES</span> <span class="k">ON</span> <span class="n">mytestdb</span><span class="p">.</span><span class="o">*</span> <span class="k">TO</span> <span class="s1">&#39;admin&#39;</span><span class="o">@</span><span class="s1">&#39;%&#39;</span> <span class="k">WITH</span> <span class="k">GRANT</span> <span class="k">OPTION</span><span class="p">;</span>
</pre></div>

<h3 id="toc_3">3. Login with the User</h3>
<div class="highlight"><pre><span></span>mysql -u myuser -p mytestdb
</pre></div>

<h3 id="toc_4">4. Import a SQL dump into database</h3>
<div class="highlight"><pre><span></span><span class="n">USE</span> <span class="n">mytestdb</span><span class="p">;</span>
<span class="k">source</span> <span class="n">db_dump</span><span class="p">.</span><span class="k">sql</span><span class="p">;</span>
</pre></div>
<p>Or you can use a command line:</p>
<div class="highlight"><pre><span></span>mysql -u dbuser -p <span class="o">[</span>-h host<span class="o">]</span> dbname &lt; dbdump.sql
</pre></div>
<p>Exporting in command line is similar, using &ldquo;mysqldump&rdquo; command:</p>
<div class="highlight"><pre><span></span>mysqldump -u dbuser -p dbname &gt; dbdump.sql
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Use Ctypes to Wrap C Libraries in Python]]></title>
        <author><name>terryoy</name></author>
        <link href="http://terryoy.github.io/2014/03/using-ctypes-to-wrap-c-library.html"/>
        <published>2014-03-23T07:57:00+08:00</published>
        <updated>2020-02-01T10:09:36+08:00</updated>
        <id>http://terryoy.github.io/2014/03/using-ctypes-to-wrap-c-library.html</id>
        <category scheme="http://terryoy.github.io/tag/#python" term="python" label="python" />
        <category scheme="http://terryoy.github.io/tag/#linux" term="linux" label="linux" />
        <content type="html" xml:base="http://terryoy.github.io/" xml:lang="en">
            <![CDATA[ <p>In Linux, many libraries are provided in C dll with headers. It is not easy to try with the features if you&#39;re a Python programmer, unless you know how to work with C library i Python.</p>
<p>There is a tool to do it, which is <em><strong>ctypes</strong></em>. You can operate on data types, structs, pointers and functions with it. Now here is a brief guide on how to do it. <a href="http://stackoverflow.com/questions/1942298/wrapping-a-c-library-in-python-c-cython-or-ctypes">Here</a> is also a comparison of ctypes with other solutions.</p>

<h3 id="toc_0">1. Loading Libraries</h3>
<div class="highlight"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">ctypes</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">CDLL</span><span class="p">(</span><span class="s1">&#39;libc.so.6&#39;</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span><span class="o">.</span><span class="n">rand</span><span class="p">()</span>
<span class="mi">1804289383</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span><span class="o">.</span><span class="n">atoi</span><span class="p">(</span><span class="s2">&quot;12345&quot;</span><span class="p">)</span>
<span class="mi">12345</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libtest</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">CDLL</span><span class="p">(</span><span class="s1">&#39;./test.so&#39;</span><span class="p">)</span> <span class="c1"># you can also load the shared library by location, but you cannot load static library</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">ctypes.util</span> <span class="kn">import</span> <span class="n">find_library</span> <span class="c1"># if you need to find the library name</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">find_library</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)</span>
<span class="s1">&#39;libc.so.6&#39;</span>
</pre></div>
<p>The &ldquo;ctypes.CDLL()&rdquo; method will return a class that wraps a Standard C library. Alternatively, there is a &ldquo;ctypes.WinDLL()&rdquo; method that wraps a Windows stdcall library.</p>
<p>Ctypes assumes that all methods accept &ldquo;int&rdquo; or &ldquo;char*&rdquo; as parameters and return &ldquo;int&rdquo;, in other cases it doesn&#39;t work properly. So we&#39;ll need to define some attributes for the functions to fix that.</p>
<div class="highlight"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span><span class="o">.</span><span class="n">atof</span><span class="p">(</span><span class="s2">&quot;12345.123&quot;</span><span class="p">)</span>
<span class="mi">531599</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span><span class="o">.</span><span class="n">atof</span><span class="o">.</span><span class="n">restype</span><span class="o">=</span><span class="n">ctypes</span><span class="o">.</span><span class="n">c_double</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">libc</span><span class="o">.</span><span class="n">atof</span><span class="p">(</span><span class="s2">&quot;12345.123&quot;</span><span class="p">)</span>
<span class="mf">12345.123</span>
</pre></div>
<p>So every function in the library you can have three attributes to handle that: </p>

<ul>
<li>  <strong><em>func</em>.argtypes</strong> = [ ]       - a sequence of arguments </li>
<li>  <strong><em>func</em>.restype</strong> = xxx        - the type of return value </li>
<li>  <strong><em>func</em>.errcheck</strong> = method(result, func, args)        - a method that manipulates the <em>result</em>(return value) of the executed <em>func</em>, and also passed with the original <em>args</em> of this execution. </li>
</ul>
<p><a href="http://docs.python.org/2/library/ctypes.html#fundamental-data-types">Here</a> is a list of fundamental data types that you could use in <em>argtypes</em> and <em>restype</em>.</p>

<h3 id="toc_1">2. Structures and Pointers</h3>
<p>Since we&#39;ll need to define the parameters of the C functions, we need to have a way to work with structure and pointers.</p>
<p>With Ctypes, we can define a structure class by deriving from <em>ctype.Structure</em>.</p>
<div class="highlight"><pre><span></span><span class="c1"># in C we have this structure:</span>
<span class="c1">#</span>
<span class="c1"># struct Point {</span>
<span class="c1">#     double x, y;</span>
<span class="c1"># }</span>
<span class="c1">#</span>

<span class="c1"># in Python we create this class to represent a structure</span>
<span class="k">class</span> <span class="nc">Point</span><span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">Structure</span><span class="p">):</span>
    <span class="n">_fields_</span> <span class="o">=</span> <span class="p">[(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_double</span><span class="p">),</span>
        <span class="p">(</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_double</span><span class="p">)];</span>
</pre></div>
<p>If you want to define an array with ctypes, you can simply use the mutiply method:</p>
<div class="highlight"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">int_arr</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="o">*</span><span class="mi">4</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">int_arr</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">c_long_Array_4</span><span class="s1">&#39;&gt;</span>
</pre></div>
<p>We could use _ctypes.POINTER() to define the pointer type of ctype types(fundamental types and structures).</p>
<div class="highlight"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">type_int_p</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">POINTER</span><span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">)</span> <span class="c1"># type of a pointer</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">type_int_p</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">LP_c_long</span><span class="s1">&#39;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">type_int_pp</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">POINTER</span><span class="p">(</span><span class="n">int_p</span><span class="p">)</span> <span class="c1"># type of a pointer of the integer pointer</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">type_int_pp</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">LP_LP_c_long</span><span class="s1">&#39;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">type_point_p</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">POINTER</span><span class="p">(</span><span class="n">Point</span><span class="p">)</span> <span class="c1"># type of a pointer of the structure Point above</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">type_point_p</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">LP_Point</span><span class="s1">&#39;&gt;</span>
</pre></div>

<h3 id="toc_2">3. Initialize Variables and Pass Arguments to C</h3>
<p>The ctypes data types all have a kind of construction method to initialize variables with values. The instance will be a ctype object with the respective value as defined in C.</p>
<div class="highlight"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">ival</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>    <span class="c1"># integer value</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ival</span>
<span class="n">c_long</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ival</span><span class="o">.</span><span class="n">value</span>      <span class="c1"># you can convert it&#39;s value to a python value by the &quot;value&quot; attribute</span>
<span class="mi">100</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">dval</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_double</span><span class="p">(</span><span class="mf">200.25</span><span class="p">)</span>  <span class="c1"># double value</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">dval</span>
<span class="n">c_double</span><span class="p">(</span><span class="mf">200.25</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">dval</span><span class="o">.</span><span class="n">value</span>
<span class="mf">200.25</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">sval</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_char_p</span><span class="p">(</span><span class="s2">&quot;Hello, world!&quot;</span><span class="p">)</span>     <span class="c1"># string value</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">sval</span>    <span class="c1"># you can see the value is representing a pointer address instead of string</span>
<span class="n">c_char_p</span><span class="p">(</span><span class="mi">3071487276</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">sval</span><span class="o">.</span><span class="n">value</span>
<span class="s1">&#39;Hello, world!&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">printf</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">%s</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">sval</span><span class="p">)</span> <span class="c1"># but it can be printed as string with &quot;printf&quot; in C</span>
<span class="n">Hello</span><span class="p">,</span> <span class="n">world</span><span class="err">!</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ret</span>     <span class="c1"># (the return value of &quot;printf&quot; is the printed string length)</span>
<span class="mi">13</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">structval</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>     <span class="c1"># the Point structure defined above, you can also initialize like &quot;Point(0, 10)&quot;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">structval</span>
<span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">Point</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xb74466a4</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="n">structval</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">structval</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
<span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</pre></div>
<p>When we pass objects to functions, we can pass by <em>pointer</em>. In this case we&#39;ll have two companion methods <em>byref()</em> and <em>pointer()</em> that works with pointers. Also, for a pointer object you can access it&#39;s value by the <em>contents</em> attribute.
The <em>byref()</em> method create a parameter object of pointer, which you can only use in functions(notice the &ldquo;cparam&rdquo; object), while the <em>pointer()</em> method returns a pointer object which you can manipulate later.</p>
<div class="highlight"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">intc</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">byref</span><span class="p">(</span><span class="n">intc</span><span class="p">)</span>      <span class="c1"># the byref() returns a parameter object that only can be used as a foreign function&#39;s parameter(notice a &quot;cparam&quot; object). </span>
<span class="o">&lt;</span><span class="n">cparam</span> <span class="s1">&#39;P&#39;</span> <span class="p">(</span><span class="mh">0xb7124a70</span><span class="p">)</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">intp</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">pointer</span><span class="p">(</span><span class="n">intc</span><span class="p">)</span>     <span class="c1"># the pointer() returns a pointer object that you can further work with it</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">intp</span>
<span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">LP_c_long</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xb713392c</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">intp</span><span class="o">.</span><span class="n">contents</span>   <span class="c1"># access the data to which the pointer points</span>
<span class="n">c_long</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">intp</span><span class="o">.</span><span class="n">contents</span><span class="o">.</span><span class="n">value</span>
<span class="mi">100</span>
</pre></div>

<h3 id="toc_3">4. Accessing Structure and Variables from C</h3>
<p>We need not only passing data to C functions, but also getting some pre-defined data structure or variables in C. So let&#39;s talk about a few things you want to import from C.</p>
<p>For <strong>enums</strong> in C, you&#39;ll need to define them again in Python. Since it&#39;s a representative of basic data types like integer, it&#39;s easy to act in the same way as in C.</p>
<p>For <strong>Structures</strong>, you&#39;ll need to define the similar classes, derived from ctypes. Structure, and declare the <code>_fields_</code> attributes as mentioned above in Section 2. After that, you can use <strong>in_dll()</strong> method to load an object within the library. (BTW, If you don&#39;t need to access the attribute of that object, it&#39;s not necessary to set the <code>_fields_</code> attribute.)</p>
<div class="highlight"><pre><span></span><span class="n">libaa</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">CDLL</span><span class="p">(</span><span class="s1">&#39;libaa.so.1&#39;</span><span class="p">)</span> <span class="c1"># the ascii-art lib</span>

<span class="k">class</span> <span class="nc">RenderSettings</span><span class="p">(</span><span class="n">Structure</span><span class="p">):</span>
    <span class="n">_pack_</span> <span class="o">=</span> <span class="mi">4</span>
    <span class="n">_fields_</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">(</span><span class="s1">&#39;brightness&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">),</span>
        <span class="p">(</span><span class="s1">&#39;contrast&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">),</span>
        <span class="p">(</span><span class="s1">&#39;gamma&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_float</span><span class="p">),</span>
        <span class="p">(</span><span class="s1">&#39;dithering_mode&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">),</span>
        <span class="p">(</span><span class="s1">&#39;inversion&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">),</span>
        <span class="p">(</span><span class="s1">&#39;random&#39;</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">),</span>
    <span class="p">]</span>

<span class="n">DEFAULT_RENDER_SETTINGS</span> <span class="o">=</span> <span class="n">RenderSettings</span><span class="o">.</span><span class="n">in_dll</span><span class="p">(</span><span class="n">libaa</span><span class="p">,</span> <span class="s1">&#39;aa_defrenderparams&#39;</span><span class="p">)</span>
</pre></div>
<p>Sometimes the Structure object is a constant which you cannot change any value of it, it&#39;s better to have a <strong>clone()</strong> method to make a copy to chang it. The <strong>clone()</strong> method defined below can act as </p>
<div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">Structure</span><span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">Structure</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">clone</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">clone</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="bp">self</span><span class="p">)()</span>
        <span class="n">ctypes</span><span class="o">.</span><span class="n">pointer</span><span class="p">(</span><span class="n">clone</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span>
        <span class="k">return</span> <span class="n">clone</span>
</pre></div>
<p>For <strong>basic data types</strong>, it&#39;s the same way to use the in_dll() method in the simple types. (e.g. &ldquo;ctypes.c_int.in_dll(libaa, &#39;some_int&#39;)&rdquo;)</p>

<h3 id="toc_4">5. Playing with Functions</h3>
<p>In Section 1, we already talked about how to import the functions from C and use them. However there are a few things to remember. Below is an example of calling the functions. </p>

<ul>
<li>First, you should declare all the related types and structures in the function&#39;s arguments and return value. </li>
<li>Second, basic types can be auto converted into ctypes types, but for those are not, ensure they are in ctypes form.</li>
<li>Third, remember to use ctypes.pointer() or ctypes.byref() for passing the pointer arguments.</li>
</ul>
<div class="highlight"><pre><span></span><span class="c1"># it&#39;s a good practice to declare the structures and the functions at first like in C </span>

<span class="c1"># ... </span>
<span class="c1"># declare Structures </span>
<span class="k">class</span> <span class="nc">Context</span><span class="p">(</span><span class="n">Structure</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="n">ContextPtr</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">POINTER</span><span class="p">(</span><span class="n">Context</span><span class="p">)</span>

<span class="c1"># ... </span>
<span class="c1"># declare functions</span>
<span class="n">aa_init</span> <span class="o">=</span> <span class="n">libaa</span><span class="o">.</span><span class="n">aa_init</span>
<span class="n">aa_init</span><span class="o">.</span><span class="n">argtypes</span> <span class="o">=</span> <span class="p">[</span><span class="n">DriverPtr</span><span class="p">,</span> <span class="n">HardwareSettingsPtr</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_void_p</span><span class="p">]</span> <span class="c1"># parameters are (pointer of struct &quot;Driver&quot;, pointer of struct HardwareSetting, and a pointer of &quot;void&quot;)</span>
<span class="n">aa_init</span><span class="o">.</span><span class="n">restype</span> <span class="o">=</span> <span class="n">ContextPtr</span> 

<span class="n">aa_fastrender</span> <span class="o">=</span> <span class="n">libaa</span><span class="o">.</span><span class="n">aa_fastrender</span>
<span class="n">aa_fastrender</span><span class="o">.</span><span class="n">argtypes</span> <span class="o">=</span> <span class="p">[</span><span class="n">ContextPtr</span><span class="p">]</span> <span class="o">+</span> <span class="mi">4</span> <span class="o">*</span> <span class="p">[</span><span class="n">ctypes</span><span class="o">.</span><span class="n">c_int</span><span class="p">]</span> 

<span class="c1"># calling aa_init() and aa_fastrender()</span>
<span class="n">context</span> <span class="o">=</span> <span class="n">aa_init</span><span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">pointer</span><span class="p">(</span><span class="n">aa_mem_d</span><span class="p">),</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">pointer</span><span class="p">(</span><span class="n">settings</span><span class="p">),</span> <span class="kc">None</span><span class="p">)</span>
<span class="c1"># ...</span>
<span class="n">aa_fastrender</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span><span class="n">height</span><span class="p">)</span>
</pre></div>
<p>By now, you should have the knowledge to play with C libraries. Just start playing around with those libraries you can find in /usr/lib and /usr/include. Enjoy!</p>
]]>
        </content>
    </entry>
</feed>